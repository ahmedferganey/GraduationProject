
APP.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	2b c3       	rjmp	.+1622   	; 0x668 <__vector_4>
  12:	00 00       	nop
  14:	52 c3       	rjmp	.+1700   	; 0x6ba <__vector_5>
  16:	00 00       	nop
  18:	79 c3       	rjmp	.+1778   	; 0x70c <__vector_6>
  1a:	00 00       	nop
  1c:	a0 c3       	rjmp	.+1856   	; 0x75e <__vector_7>
  1e:	00 00       	nop
  20:	c7 c3       	rjmp	.+1934   	; 0x7b0 <__vector_8>
  22:	00 00       	nop
  24:	ee c3       	rjmp	.+2012   	; 0x802 <__vector_9>
  26:	00 00       	nop
  28:	15 c4       	rjmp	.+2090   	; 0x854 <__vector_10>
  2a:	00 00       	nop
  2c:	3c c4       	rjmp	.+2168   	; 0x8a6 <__vector_11>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	02 d0       	rcall	.+4      	; 0x8c <main>
  88:	2b c7       	rjmp	.+3670   	; 0xee0 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <main>:
int main(void)
{

		
	
	udtReturnValue = DISPLAY_udtUltrasonicLcdInit(ptr, NumOfUltrasonic);
  8c:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <NumOfUltrasonic>
  90:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ptr>
  94:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ptr+0x1>
  98:	f1 d0       	rcall	.+482    	; 0x27c <DISPLAY_udtUltrasonicLcdInit>
  9a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	while (1)
	{
		
		
		udtReturnValue = DISPLAY_udtUltrasonicDispLcd(ptr);
  9e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ptr>
  a2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ptr+0x1>
  a6:	0e d1       	rcall	.+540    	; 0x2c4 <DISPLAY_udtUltrasonicDispLcd>
  a8:	f8 cf       	rjmp	.-16     	; 0x9a <main+0xe>

000000aa <DIO_udtSetPinDirection>:
	direction_t 	udtDirection
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	if (udtDirection == (DIO_DIRECTION_OUTPUT))
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	61 f5       	brne	.+88     	; 0x106 <DIO_udtSetPinDirection+0x5c>
	{
		switch(udtPort)
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	c1 f0       	breq	.+48     	; 0xe2 <DIO_udtSetPinDirection+0x38>
  b2:	70 f0       	brcs	.+28     	; 0xd0 <DIO_udtSetPinDirection+0x26>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	f1 f0       	breq	.+60     	; 0xf4 <DIO_udtSetPinDirection+0x4a>
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	09 f0       	breq	.+2      	; 0xbe <DIO_udtSetPinDirection+0x14>
  bc:	5b c0       	rjmp	.+182    	; 0x174 <DIO_udtSetPinDirection+0xca>
			                  udtReturnValue = E_OK;
			                  break;
			case PORTC_INDEX: SET_BIT(DIO->DDRC, udtPin);
			                  udtReturnValue = E_OK;
			                  break;
			case PORTD_INDEX: SET_BIT(DIO->DDRD, udtPin);
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <DIO_udtSetPinDirection+0x1c>
  c4:	88 0f       	add	r24, r24
  c6:	6a 95       	dec	r22
  c8:	ea f7       	brpl	.-6      	; 0xc4 <DIO_udtSetPinDirection+0x1a>
  ca:	91 b3       	in	r25, 0x11	; 17
  cc:	89 2b       	or	r24, r25
  ce:	4f c0       	rjmp	.+158    	; 0x16e <DIO_udtSetPinDirection+0xc4>
	
	if (udtDirection == (DIO_DIRECTION_OUTPUT))
	{
		switch(udtPort)
		{
			case PORTA_INDEX: SET_BIT(DIO->DDRA, udtPin);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <DIO_udtSetPinDirection+0x2e>
  d6:	88 0f       	add	r24, r24
  d8:	6a 95       	dec	r22
  da:	ea f7       	brpl	.-6      	; 0xd6 <DIO_udtSetPinDirection+0x2c>
  dc:	9a b3       	in	r25, 0x1a	; 26
  de:	89 2b       	or	r24, r25
  e0:	2e c0       	rjmp	.+92     	; 0x13e <DIO_udtSetPinDirection+0x94>
			                  udtReturnValue = E_OK;
			                  break;
			case PORTB_INDEX: SET_BIT(DIO->DDRB, udtPin);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 c0       	rjmp	.+2      	; 0xea <DIO_udtSetPinDirection+0x40>
  e8:	88 0f       	add	r24, r24
  ea:	6a 95       	dec	r22
  ec:	ea f7       	brpl	.-6      	; 0xe8 <DIO_udtSetPinDirection+0x3e>
  ee:	97 b3       	in	r25, 0x17	; 23
  f0:	89 2b       	or	r24, r25
  f2:	30 c0       	rjmp	.+96     	; 0x154 <DIO_udtSetPinDirection+0xaa>
			                  udtReturnValue = E_OK;
			                  break;
			case PORTC_INDEX: SET_BIT(DIO->DDRC, udtPin);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 c0       	rjmp	.+2      	; 0xfc <DIO_udtSetPinDirection+0x52>
  fa:	88 0f       	add	r24, r24
  fc:	6a 95       	dec	r22
  fe:	ea f7       	brpl	.-6      	; 0xfa <DIO_udtSetPinDirection+0x50>
 100:	94 b3       	in	r25, 0x14	; 20
 102:	89 2b       	or	r24, r25
 104:	32 c0       	rjmp	.+100    	; 0x16a <DIO_udtSetPinDirection+0xc0>
			                  break;
			default:		  /*	!Comment: Do nothing	*/
			                  break;
		}
	}
	else if (udtDirection == (DIO_DIRECTION_INPUT))
 106:	41 11       	cpse	r20, r1
 108:	35 c0       	rjmp	.+106    	; 0x174 <DIO_udtSetPinDirection+0xca>
	{
		switch(udtPort)
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	d1 f0       	breq	.+52     	; 0x142 <DIO_udtSetPinDirection+0x98>
 10e:	70 f0       	brcs	.+28     	; 0x12c <DIO_udtSetPinDirection+0x82>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	11 f1       	breq	.+68     	; 0x158 <DIO_udtSetPinDirection+0xae>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	71 f5       	brne	.+92     	; 0x174 <DIO_udtSetPinDirection+0xca>
			                  udtReturnValue = E_OK;
			                  break;
			case PORTC_INDEX: CLR_BIT(DIO->DDRC, udtPin);
			                  udtReturnValue = E_OK;
			                  break;
			case PORTD_INDEX: CLR_BIT(DIO->DDRD, udtPin);
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	01 c0       	rjmp	.+2      	; 0x120 <DIO_udtSetPinDirection+0x76>
 11e:	88 0f       	add	r24, r24
 120:	6a 95       	dec	r22
 122:	ea f7       	brpl	.-6      	; 0x11e <DIO_udtSetPinDirection+0x74>
 124:	80 95       	com	r24
 126:	91 b3       	in	r25, 0x11	; 17
 128:	89 23       	and	r24, r25
 12a:	21 c0       	rjmp	.+66     	; 0x16e <DIO_udtSetPinDirection+0xc4>
	}
	else if (udtDirection == (DIO_DIRECTION_INPUT))
	{
		switch(udtPort)
		{
			case PORTA_INDEX: CLR_BIT(DIO->DDRA, udtPin);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 c0       	rjmp	.+2      	; 0x134 <DIO_udtSetPinDirection+0x8a>
 132:	88 0f       	add	r24, r24
 134:	6a 95       	dec	r22
 136:	ea f7       	brpl	.-6      	; 0x132 <DIO_udtSetPinDirection+0x88>
 138:	80 95       	com	r24
 13a:	9a b3       	in	r25, 0x1a	; 26
 13c:	89 23       	and	r24, r25
 13e:	8a bb       	out	0x1a, r24	; 26
 140:	17 c0       	rjmp	.+46     	; 0x170 <DIO_udtSetPinDirection+0xc6>
			                  udtReturnValue = E_OK;
			                  break;
			case PORTB_INDEX: CLR_BIT(DIO->DDRB, udtPin);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	01 c0       	rjmp	.+2      	; 0x14a <DIO_udtSetPinDirection+0xa0>
 148:	88 0f       	add	r24, r24
 14a:	6a 95       	dec	r22
 14c:	ea f7       	brpl	.-6      	; 0x148 <DIO_udtSetPinDirection+0x9e>
 14e:	80 95       	com	r24
 150:	97 b3       	in	r25, 0x17	; 23
 152:	89 23       	and	r24, r25
 154:	87 bb       	out	0x17, r24	; 23
 156:	0c c0       	rjmp	.+24     	; 0x170 <DIO_udtSetPinDirection+0xc6>
			                  udtReturnValue = E_OK;
			                  break;
			case PORTC_INDEX: CLR_BIT(DIO->DDRC, udtPin);
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	01 c0       	rjmp	.+2      	; 0x160 <DIO_udtSetPinDirection+0xb6>
 15e:	88 0f       	add	r24, r24
 160:	6a 95       	dec	r22
 162:	ea f7       	brpl	.-6      	; 0x15e <DIO_udtSetPinDirection+0xb4>
 164:	80 95       	com	r24
 166:	94 b3       	in	r25, 0x14	; 20
 168:	89 23       	and	r24, r25
 16a:	84 bb       	out	0x14, r24	; 20
 16c:	01 c0       	rjmp	.+2      	; 0x170 <DIO_udtSetPinDirection+0xc6>
			                  udtReturnValue = E_OK;
			                  break;
			case PORTD_INDEX: CLR_BIT(DIO->DDRD, udtPin);
 16e:	81 bb       	out	0x11, r24	; 17
			                  udtReturnValue = E_OK;
 170:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 172:	08 95       	ret
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	direction_t 	udtDirection
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
 174:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		/*	!Comment: Do nothing	*/
	}
	return udtReturnValue;
}
 176:	08 95       	ret

00000178 <DIO_udtSetPinValue>:
	logic_t 		udtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	if (udtValue == DIO_HIGH)
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	61 f5       	brne	.+88     	; 0x1d4 <DIO_udtSetPinValue+0x5c>
	{
		switch(udtPort)
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	c1 f0       	breq	.+48     	; 0x1b0 <DIO_udtSetPinValue+0x38>
 180:	70 f0       	brcs	.+28     	; 0x19e <DIO_udtSetPinValue+0x26>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	f1 f0       	breq	.+60     	; 0x1c2 <DIO_udtSetPinValue+0x4a>
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	09 f0       	breq	.+2      	; 0x18c <DIO_udtSetPinValue+0x14>
 18a:	5b c0       	rjmp	.+182    	; 0x242 <DIO_udtSetPinValue+0xca>
			                  udtReturnValue = E_OK;
			                  break;
			case PORTC_INDEX: SET_BIT(DIO->PORTC, udtPin);
			                  udtReturnValue = E_OK;
			                  break;
			case PORTD_INDEX: SET_BIT(DIO->PORTD, udtPin);
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	01 c0       	rjmp	.+2      	; 0x194 <DIO_udtSetPinValue+0x1c>
 192:	88 0f       	add	r24, r24
 194:	6a 95       	dec	r22
 196:	ea f7       	brpl	.-6      	; 0x192 <DIO_udtSetPinValue+0x1a>
 198:	92 b3       	in	r25, 0x12	; 18
 19a:	89 2b       	or	r24, r25
 19c:	4f c0       	rjmp	.+158    	; 0x23c <DIO_udtSetPinValue+0xc4>
	
	if (udtValue == DIO_HIGH)
	{
		switch(udtPort)
		{
			case PORTA_INDEX: SET_BIT(DIO->PORTA, udtPin);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <DIO_udtSetPinValue+0x2e>
 1a4:	88 0f       	add	r24, r24
 1a6:	6a 95       	dec	r22
 1a8:	ea f7       	brpl	.-6      	; 0x1a4 <DIO_udtSetPinValue+0x2c>
 1aa:	9b b3       	in	r25, 0x1b	; 27
 1ac:	89 2b       	or	r24, r25
 1ae:	2e c0       	rjmp	.+92     	; 0x20c <DIO_udtSetPinValue+0x94>
			                  udtReturnValue = E_OK;
			                  break;
			case PORTB_INDEX: SET_BIT(DIO->PORTB, udtPin);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <DIO_udtSetPinValue+0x40>
 1b6:	88 0f       	add	r24, r24
 1b8:	6a 95       	dec	r22
 1ba:	ea f7       	brpl	.-6      	; 0x1b6 <DIO_udtSetPinValue+0x3e>
 1bc:	98 b3       	in	r25, 0x18	; 24
 1be:	89 2b       	or	r24, r25
 1c0:	30 c0       	rjmp	.+96     	; 0x222 <DIO_udtSetPinValue+0xaa>
			                  udtReturnValue = E_OK;
			                  break;
			case PORTC_INDEX: SET_BIT(DIO->PORTC, udtPin);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <DIO_udtSetPinValue+0x52>
 1c8:	88 0f       	add	r24, r24
 1ca:	6a 95       	dec	r22
 1cc:	ea f7       	brpl	.-6      	; 0x1c8 <DIO_udtSetPinValue+0x50>
 1ce:	95 b3       	in	r25, 0x15	; 21
 1d0:	89 2b       	or	r24, r25
 1d2:	32 c0       	rjmp	.+100    	; 0x238 <DIO_udtSetPinValue+0xc0>
			default:          /* !Comment: Do nothing */
			                  break;
		}
		
	}
	else if(udtValue == DIO_LOW)
 1d4:	41 11       	cpse	r20, r1
 1d6:	35 c0       	rjmp	.+106    	; 0x242 <DIO_udtSetPinValue+0xca>
	{
		switch(udtPort)
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	d1 f0       	breq	.+52     	; 0x210 <DIO_udtSetPinValue+0x98>
 1dc:	70 f0       	brcs	.+28     	; 0x1fa <DIO_udtSetPinValue+0x82>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	11 f1       	breq	.+68     	; 0x226 <DIO_udtSetPinValue+0xae>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	71 f5       	brne	.+92     	; 0x242 <DIO_udtSetPinValue+0xca>
							  udtReturnValue = E_OK;
							  break;
			case PORTC_INDEX: CLR_BIT(DIO->PORTC, udtPin);
						      udtReturnValue = E_OK;
							  break;
			case PORTD_INDEX: CLR_BIT(DIO->PORTD, udtPin);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <DIO_udtSetPinValue+0x76>
 1ec:	88 0f       	add	r24, r24
 1ee:	6a 95       	dec	r22
 1f0:	ea f7       	brpl	.-6      	; 0x1ec <DIO_udtSetPinValue+0x74>
 1f2:	80 95       	com	r24
 1f4:	92 b3       	in	r25, 0x12	; 18
 1f6:	89 23       	and	r24, r25
 1f8:	21 c0       	rjmp	.+66     	; 0x23c <DIO_udtSetPinValue+0xc4>
	}
	else if(udtValue == DIO_LOW)
	{
		switch(udtPort)
		{
			case PORTA_INDEX: CLR_BIT(DIO->PORTA, udtPin);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <DIO_udtSetPinValue+0x8a>
 200:	88 0f       	add	r24, r24
 202:	6a 95       	dec	r22
 204:	ea f7       	brpl	.-6      	; 0x200 <DIO_udtSetPinValue+0x88>
 206:	80 95       	com	r24
 208:	9b b3       	in	r25, 0x1b	; 27
 20a:	89 23       	and	r24, r25
 20c:	8b bb       	out	0x1b, r24	; 27
 20e:	17 c0       	rjmp	.+46     	; 0x23e <DIO_udtSetPinValue+0xc6>
							  udtReturnValue = E_OK;
							  break;
			case PORTB_INDEX: CLR_BIT(DIO->PORTB, udtPin);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	01 c0       	rjmp	.+2      	; 0x218 <DIO_udtSetPinValue+0xa0>
 216:	88 0f       	add	r24, r24
 218:	6a 95       	dec	r22
 21a:	ea f7       	brpl	.-6      	; 0x216 <DIO_udtSetPinValue+0x9e>
 21c:	80 95       	com	r24
 21e:	98 b3       	in	r25, 0x18	; 24
 220:	89 23       	and	r24, r25
 222:	88 bb       	out	0x18, r24	; 24
 224:	0c c0       	rjmp	.+24     	; 0x23e <DIO_udtSetPinValue+0xc6>
							  udtReturnValue = E_OK;
							  break;
			case PORTC_INDEX: CLR_BIT(DIO->PORTC, udtPin);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	01 c0       	rjmp	.+2      	; 0x22e <DIO_udtSetPinValue+0xb6>
 22c:	88 0f       	add	r24, r24
 22e:	6a 95       	dec	r22
 230:	ea f7       	brpl	.-6      	; 0x22c <DIO_udtSetPinValue+0xb4>
 232:	80 95       	com	r24
 234:	95 b3       	in	r25, 0x15	; 21
 236:	89 23       	and	r24, r25
 238:	85 bb       	out	0x15, r24	; 21
 23a:	01 c0       	rjmp	.+2      	; 0x23e <DIO_udtSetPinValue+0xc6>
						      udtReturnValue = E_OK;
							  break;
			case PORTD_INDEX: CLR_BIT(DIO->PORTD, udtPin);
 23c:	82 bb       	out	0x12, r24	; 18
							  udtReturnValue = E_OK;
 23e:	80 e0       	ldi	r24, 0x00	; 0
							  break;
 240:	08 95       	ret
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	logic_t 		udtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
 242:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		/* !Comment: Do nothing */
	}
	return udtReturnValue;
}
 244:	08 95       	ret

00000246 <DIO_udtGetPinValue>:
(
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	logic_t* 		pudtValue
)
{
 246:	fa 01       	movw	r30, r20
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	switch(udtPort)
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	49 f0       	breq	.+18     	; 0x25e <DIO_udtGetPinValue+0x18>
 24c:	30 f0       	brcs	.+12     	; 0x25a <DIO_udtGetPinValue+0x14>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	41 f0       	breq	.+16     	; 0x262 <DIO_udtGetPinValue+0x1c>
 252:	83 30       	cpi	r24, 0x03	; 3
 254:	89 f4       	brne	.+34     	; 0x278 <DIO_udtGetPinValue+0x32>
						  udtReturnValue = E_OK;
						  break;
		case PORTC_INDEX: *pudtValue = GET_BIT(DIO->PINC, udtPin);
						  udtReturnValue = E_OK;
						  break;
		case PORTD_INDEX: *pudtValue = GET_BIT(DIO->PIND, udtPin);
 256:	80 b3       	in	r24, 0x10	; 16
 258:	05 c0       	rjmp	.+10     	; 0x264 <DIO_udtGetPinValue+0x1e>
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	switch(udtPort)
	{
		case PORTA_INDEX: *pudtValue = GET_BIT(DIO->PINA, udtPin);
 25a:	89 b3       	in	r24, 0x19	; 25
 25c:	03 c0       	rjmp	.+6      	; 0x264 <DIO_udtGetPinValue+0x1e>
						  udtReturnValue = E_OK;
						  break;
		case PORTB_INDEX: *pudtValue = GET_BIT(DIO->PINB, udtPin);
 25e:	86 b3       	in	r24, 0x16	; 22
 260:	01 c0       	rjmp	.+2      	; 0x264 <DIO_udtGetPinValue+0x1e>
						  udtReturnValue = E_OK;
						  break;
		case PORTC_INDEX: *pudtValue = GET_BIT(DIO->PINC, udtPin);
 262:	83 b3       	in	r24, 0x13	; 19
						  udtReturnValue = E_OK;
						  break;
		case PORTD_INDEX: *pudtValue = GET_BIT(DIO->PIND, udtPin);
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_udtGetPinValue+0x26>
 268:	95 95       	asr	r25
 26a:	87 95       	ror	r24
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_udtGetPinValue+0x22>
 270:	81 70       	andi	r24, 0x01	; 1
 272:	80 83       	st	Z, r24
					      udtReturnValue = E_OK;
 274:	80 e0       	ldi	r24, 0x00	; 0
					      break;
 276:	08 95       	ret
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	logic_t* 		pudtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
 278:	81 e0       	ldi	r24, 0x01	; 1
		default:		  /* !Comment: Do nothing */
					      break;
		
	}
	return udtReturnValue;
}
 27a:	08 95       	ret

0000027c <DISPLAY_udtUltrasonicLcdInit>:
Std_ReturnType DISPLAY_udtUltrasonicLcdInit
(
const ULTRASONIC_obj_t* ULTRASONIC_pudtconfig,
uint8 u8NumOfUltrasonic
)
{
 27c:	df 92       	push	r13
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	7c 01       	movw	r14, r24
 28c:	c6 2f       	mov	r28, r22
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	/* 1- Init LCD */
	udtReturnValue = LCD_udt4BitInitialize();
 28e:	8f d1       	rcall	.+798    	; 0x5ae <LCD_udt4BitInitialize>
 290:	d8 2e       	mov	r13, r24
	
	/* 2- Init ULTRASONIC SENSORS */
	for (int i = 0 ; i < u8NumOfUltrasonic ; i++)
 292:	00 e0       	ldi	r16, 0x00	; 0
 294:	10 e0       	ldi	r17, 0x00	; 0
 296:	d0 e0       	ldi	r29, 0x00	; 0
 298:	0c 17       	cp	r16, r28
 29a:	1d 07       	cpc	r17, r29
 29c:	4c f4       	brge	.+18     	; 0x2b0 <DISPLAY_udtUltrasonicLcdInit+0x34>
	{
		udtReturnValue = Ultrasonic_udtInit(ULTRASONIC_pudtconfig);	
 29e:	c7 01       	movw	r24, r14
 2a0:	2b d3       	rcall	.+1622   	; 0x8f8 <Ultrasonic_udtInit>
 2a2:	d8 2e       	mov	r13, r24
		++ULTRASONIC_pudtconfig;
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	e8 0e       	add	r14, r24
 2a8:	f1 1c       	adc	r15, r1
	
	/* 1- Init LCD */
	udtReturnValue = LCD_udt4BitInitialize();
	
	/* 2- Init ULTRASONIC SENSORS */
	for (int i = 0 ; i < u8NumOfUltrasonic ; i++)
 2aa:	0f 5f       	subi	r16, 0xFF	; 255
 2ac:	1f 4f       	sbci	r17, 0xFF	; 255
 2ae:	f4 cf       	rjmp	.-24     	; 0x298 <DISPLAY_udtUltrasonicLcdInit+0x1c>
			for the capture unit.	
		*/
		/*
			No Prescaler +  Normal Mode + 8MHZ + ICU + Rising ----->  .125 Sec for 1 Tick		
		*/
	TIMER1_vdInit();
 2b0:	c5 d1       	rcall	.+906    	; 0x63c <TIMER1_vdInit>
	
	
	
	return udtReturnValue;		
}
 2b2:	8d 2d       	mov	r24, r13
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	df 90       	pop	r13
 2c2:	08 95       	ret

000002c4 <DISPLAY_udtUltrasonicDispLcd>:
/***********************************************************************************************************/
Std_ReturnType DISPLAY_udtUltrasonicDispLcd
(
const ULTRASONIC_obj_t* ULTRASONIC_pudtconfig
)
{
 2c4:	af 92       	push	r10
 2c6:	bf 92       	push	r11
 2c8:	cf 92       	push	r12
 2ca:	df 92       	push	r13
 2cc:	ff 92       	push	r15
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	28 97       	sbiw	r28, 0x08	; 8
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	6c 01       	movw	r12, r24
	Std_ReturnType udtReturnValue = E_NOT_OK;
	uint16 ULTRASONIC_LocalDistance[4]= {0};
 2e8:	fe 01       	movw	r30, r28
 2ea:	31 96       	adiw	r30, 0x01	; 1
 2ec:	88 e0       	ldi	r24, 0x08	; 8
 2ee:	df 01       	movw	r26, r30
 2f0:	1d 92       	st	X+, r1
 2f2:	8a 95       	dec	r24
 2f4:	e9 f7       	brne	.-6      	; 0x2f0 <DISPLAY_udtUltrasonicDispLcd+0x2c>
 2f6:	8f 01       	movw	r16, r30
	
	uint8 u8Row = ROW1 ;
	uint8 u8Column = COLUMN1 ;
 2f8:	f1 2c       	mov	r15, r1
			can be used for defining the counter TOP value
		*/
	
	for (uint8 i = 0 ; i < 4 ; i++)
	{
		udtReturnValue = Ultrasonic_udtCalculateDistance(ULTRASONIC_pudtconfig, 
 2fa:	b8 01       	movw	r22, r16
 2fc:	c6 01       	movw	r24, r12
 2fe:	2b d3       	rcall	.+1622   	; 0x956 <Ultrasonic_udtCalculateDistance>
			udtReturnValue = LCD_udtGoTo( , );
		
			udtReturnValue = LCD_udt4BitSendData((uint8)ULTRASONIC_LocalDistance[i]);
		}
	*/
		udtReturnValue = LCD_udtGoTo(u8Row, u8Column);
 300:	6f 2d       	mov	r22, r15
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	40 d1       	rcall	.+640    	; 0x586 <LCD_udtGoTo>
		
		udtReturnValue = LCD_udtSendNumber(ULTRASONIC_LocalDistance[i]);
 306:	f8 01       	movw	r30, r16
 308:	40 81       	ld	r20, Z
 30a:	51 81       	ldd	r21, Z+1	; 0x01
 30c:	0e 5f       	subi	r16, 0xFE	; 254
 30e:	1f 4f       	sbci	r17, 0xFF	; 255
 310:	9a 01       	movw	r18, r20
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	61 d0       	rcall	.+194    	; 0x3e2 <LCD_udtSendNumber>
			
		u8Column += COLUMN5;		
 320:	b4 e0       	ldi	r27, 0x04	; 4
 322:	fb 0e       	add	r15, r27
		++ULTRASONIC_pudtconfig;
 324:	92 e0       	ldi	r25, 0x02	; 2
 326:	c9 0e       	add	r12, r25
 328:	d1 1c       	adc	r13, r1
			event occurs on the ICP1 pin (or
			optionally on the analog comparator output for Timer/Counter1). The Input Capture 
			can be used for defining the counter TOP value
		*/
	
	for (uint8 i = 0 ; i < 4 ; i++)
 32a:	a0 e1       	ldi	r26, 0x10	; 16
 32c:	fa 12       	cpse	r15, r26
 32e:	e5 cf       	rjmp	.-54     	; 0x2fa <DISPLAY_udtUltrasonicDispLcd+0x36>
		++ULTRASONIC_pudtconfig;
	}

	return udtReturnValue;	
	
}
 330:	28 96       	adiw	r28, 0x08	; 8
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	df 90       	pop	r13
 348:	cf 90       	pop	r12
 34a:	bf 90       	pop	r11
 34c:	af 90       	pop	r10
 34e:	08 95       	ret

00000350 <LCD_udt4bit_send_enable_signal>:
(
void
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	udtReturnValue = DIO_udtSetPinValue(LCD_E, DIO_HIGH);
 350:	41 e0       	ldi	r20, 0x01	; 1
 352:	67 e0       	ldi	r22, 0x07	; 7
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	10 df       	rcall	.-480    	; 0x178 <DIO_udtSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 358:	8f ec       	ldi	r24, 0xCF	; 207
 35a:	97 e0       	ldi	r25, 0x07	; 7
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_udt4bit_send_enable_signal+0xc>
 360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_udt4bit_send_enable_signal+0x12>
 362:	00 00       	nop
	_delay_ms(1);
	udtReturnValue = DIO_udtSetPinValue(LCD_E, DIO_LOW);
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	67 e0       	ldi	r22, 0x07	; 7
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	06 df       	rcall	.-500    	; 0x178 <DIO_udtSetPinValue>
 36c:	ef ec       	ldi	r30, 0xCF	; 207
 36e:	f7 e0       	ldi	r31, 0x07	; 7
 370:	31 97       	sbiw	r30, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_udt4bit_send_enable_signal+0x20>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_udt4bit_send_enable_signal+0x26>
 376:	00 00       	nop
	_delay_ms(1);
	return udtReturnValue;
}
 378:	08 95       	ret

0000037a <LCD_udt4BitSendCommand>:
#if LCD_4_BIT_MODE_CONFIGURATIONS==CONFIG_ENABLE
extern Std_ReturnType LCD_udt4BitSendCommand
(
uint8 u8Command
)
{
 37a:	cf 93       	push	r28
 37c:	c8 2f       	mov	r28, r24
	Std_ReturnType udtReturnValue = E_NOT_OK;
	/* !Comment: Clearing Rs to send command */
	udtReturnValue = DIO_udtSetPinValue(LCD_RS, DIO_LOW);
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	65 e0       	ldi	r22, 0x05	; 5
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	f9 de       	rcall	.-526    	; 0x178 <DIO_udtSetPinValue>
	
	/* !Comment: Clearing Rw to write data */
	udtReturnValue = DIO_udtSetPinValue(LCD_RW, DIO_LOW);
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	66 e0       	ldi	r22, 0x06	; 6
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	f5 de       	rcall	.-534    	; 0x178 <DIO_udtSetPinValue>
	
	/* !Comment: Writing the data on the data pins */
	LCD_DATA_PORT = u8Command & 0xF0;
 38e:	8c 2f       	mov	r24, r28
 390:	80 7f       	andi	r24, 0xF0	; 240
 392:	8b bb       	out	0x1b, r24	; 27
	
	/* !Comment: Generate pulse on En pin */
	udtReturnValue = LCD_udt4bit_send_enable_signal();
 394:	dd df       	rcall	.-70     	; 0x350 <LCD_udt4bit_send_enable_signal>
	
	/* !Comment: Writing the data on the data pins */
	LCD_DATA_PORT = u8Command << 4;
 396:	c2 95       	swap	r28
 398:	c0 7f       	andi	r28, 0xF0	; 240
 39a:	cb bb       	out	0x1b, r28	; 27
	
	/* !Comment: Generate pulse on En pin */
	udtReturnValue = LCD_udt4bit_send_enable_signal();
 39c:	d9 df       	rcall	.-78     	; 0x350 <LCD_udt4bit_send_enable_signal>
 39e:	ef ec       	ldi	r30, 0xCF	; 207
 3a0:	f7 e0       	ldi	r31, 0x07	; 7
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_udt4BitSendCommand+0x28>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_udt4BitSendCommand+0x2e>
 3a8:	00 00       	nop

	_delay_ms(1);	
	return udtReturnValue;
}
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <LCD_udt4BitSendData>:
#if LCD_4_BIT_MODE_CONFIGURATIONS==CONFIG_ENABLE
extern Std_ReturnType LCD_udt4BitSendData
(
uint8 u8Data
)
{
 3ae:	cf 93       	push	r28
 3b0:	c8 2f       	mov	r28, r24
	Std_ReturnType udtReturnValue = E_NOT_OK;
	/* !Comment: Clearing Rs to send command */
	udtReturnValue = DIO_udtSetPinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_HIGH);
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	65 e0       	ldi	r22, 0x05	; 5
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	df de       	rcall	.-578    	; 0x178 <DIO_udtSetPinValue>
	
	/* !Comment: Clearing Rw to write data */
	udtReturnValue = DIO_udtSetPinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_LOW);
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	66 e0       	ldi	r22, 0x06	; 6
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	db de       	rcall	.-586    	; 0x178 <DIO_udtSetPinValue>
	
	/* !Comment: Writing the data on the data pins */
	LCD_DATA_PORT = u8Data & 0xF0;		// send the most 4 bits of data to high nibbles
 3c2:	8c 2f       	mov	r24, r28
 3c4:	80 7f       	andi	r24, 0xF0	; 240
 3c6:	8b bb       	out	0x1b, r24	; 27
	
	/* !Comment: Generate pulse on En pin */
	udtReturnValue = LCD_udt4bit_send_enable_signal();
 3c8:	c3 df       	rcall	.-122    	; 0x350 <LCD_udt4bit_send_enable_signal>

	/* !Comment: Writing the data on the data pins */
	LCD_DATA_PORT = u8Data << 4;		// send the least 4 bits of data to high nibbles
 3ca:	c2 95       	swap	r28
 3cc:	c0 7f       	andi	r28, 0xF0	; 240
 3ce:	cb bb       	out	0x1b, r28	; 27
	
	/* !Comment: Generate pulse on En pin */
	udtReturnValue = LCD_udt4bit_send_enable_signal();
 3d0:	bf df       	rcall	.-130    	; 0x350 <LCD_udt4bit_send_enable_signal>
 3d2:	ef ec       	ldi	r30, 0xCF	; 207
 3d4:	f7 e0       	ldi	r31, 0x07	; 7
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <LCD_udt4BitSendData+0x28>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <LCD_udt4BitSendData+0x2e>
 3dc:	00 00       	nop
	
	_delay_ms(1);	
	return udtReturnValue;	
}
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <LCD_udtSendNumber>:
/********************************************************************************************/
extern Std_ReturnType LCD_udtSendNumber
(
uint64 Copy_u64Number
)
{
 3e2:	2f 92       	push	r2
 3e4:	3f 92       	push	r3
 3e6:	4f 92       	push	r4
 3e8:	5f 92       	push	r5
 3ea:	6f 92       	push	r6
 3ec:	7f 92       	push	r7
 3ee:	8f 92       	push	r8
 3f0:	9f 92       	push	r9
 3f2:	af 92       	push	r10
 3f4:	bf 92       	push	r11
 3f6:	cf 92       	push	r12
 3f8:	df 92       	push	r13
 3fa:	ef 92       	push	r14
 3fc:	ff 92       	push	r15
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	28 97       	sbiw	r28, 0x08	; 8
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	de bf       	out	0x3e, r29	; 62
 412:	0f be       	out	0x3f, r0	; 63
 414:	cd bf       	out	0x3d, r28	; 61
 416:	29 83       	std	Y+1, r18	; 0x01
 418:	3a 83       	std	Y+2, r19	; 0x02
 41a:	4b 83       	std	Y+3, r20	; 0x03
 41c:	5c 83       	std	Y+4, r21	; 0x04
 41e:	6d 83       	std	Y+5, r22	; 0x05
 420:	7e 83       	std	Y+6, r23	; 0x06
 422:	1c 01       	movw	r2, r24
	Std_ReturnType udtReturnValue = E_OK;
	
	uint64 LOC_u64Reversed = 1 ;

	if( Copy_u64Number == 0 )
 424:	a0 e0       	ldi	r26, 0x00	; 0
 426:	bc d3       	rcall	.+1912   	; 0xba0 <__cmpdi2_s8>
 428:	d1 f4       	brne	.+52     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
	{ 
		udtReturnValue = LCD_udt4BitSendData('0'); 
 42a:	80 e3       	ldi	r24, 0x30	; 48
		}

	}
		
	return udtReturnValue;	
}
 42c:	28 96       	adiw	r28, 0x08	; 8
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	df 90       	pop	r13
 446:	cf 90       	pop	r12
 448:	bf 90       	pop	r11
 44a:	af 90       	pop	r10
 44c:	9f 90       	pop	r9
 44e:	8f 90       	pop	r8
 450:	7f 90       	pop	r7
 452:	6f 90       	pop	r6
 454:	5f 90       	pop	r5
 456:	4f 90       	pop	r4
 458:	3f 90       	pop	r3
 45a:	2f 90       	pop	r2
	
	uint64 LOC_u64Reversed = 1 ;

	if( Copy_u64Number == 0 )
	{ 
		udtReturnValue = LCD_udt4BitSendData('0'); 
 45c:	a8 cf       	rjmp	.-176    	; 0x3ae <LCD_udt4BitSendData>
 45e:	66 24       	eor	r6, r6
 460:	63 94       	inc	r6
 462:	71 2c       	mov	r7, r1
 464:	81 2c       	mov	r8, r1
 466:	91 2c       	mov	r9, r1
 468:	18 86       	std	Y+8, r1	; 0x08
 46a:	1f 82       	std	Y+7, r1	; 0x07
 46c:	41 2c       	mov	r4, r1
 46e:	51 2c       	mov	r5, r1
	else{

		while( Copy_u64Number != 0 )
		{

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
 470:	9a e0       	ldi	r25, 0x0A	; 10
 472:	a9 2e       	mov	r10, r25
 474:	b1 2c       	mov	r11, r1
 476:	c1 2c       	mov	r12, r1
 478:	d1 2c       	mov	r13, r1
 47a:	e1 2c       	mov	r14, r1
 47c:	f1 2c       	mov	r15, r1
 47e:	00 e0       	ldi	r16, 0x00	; 0
 480:	10 e0       	ldi	r17, 0x00	; 0
 482:	93 01       	movw	r18, r6
 484:	a4 01       	movw	r20, r8
 486:	68 85       	ldd	r22, Y+8	; 0x08
 488:	7f 81       	ldd	r23, Y+7	; 0x07
 48a:	c2 01       	movw	r24, r4
 48c:	d1 d2       	rcall	.+1442   	; 0xa30 <__muldi3>
 48e:	28 87       	std	Y+8, r18	; 0x08
 490:	3f 83       	std	Y+7, r19	; 0x07
 492:	94 2e       	mov	r9, r20
 494:	85 2e       	mov	r8, r21
 496:	76 2e       	mov	r7, r22
 498:	67 2e       	mov	r6, r23
 49a:	58 2e       	mov	r5, r24
 49c:	49 2e       	mov	r4, r25
 49e:	29 81       	ldd	r18, Y+1	; 0x01
 4a0:	3a 81       	ldd	r19, Y+2	; 0x02
 4a2:	4b 81       	ldd	r20, Y+3	; 0x03
 4a4:	5c 81       	ldd	r21, Y+4	; 0x04
 4a6:	6d 81       	ldd	r22, Y+5	; 0x05
 4a8:	7e 81       	ldd	r23, Y+6	; 0x06
 4aa:	c1 01       	movw	r24, r2
 4ac:	12 d3       	rcall	.+1572   	; 0xad2 <__umoddi3>
 4ae:	a8 84       	ldd	r10, Y+8	; 0x08
 4b0:	bf 80       	ldd	r11, Y+7	; 0x07
 4b2:	c9 2c       	mov	r12, r9
 4b4:	d8 2c       	mov	r13, r8
 4b6:	e7 2c       	mov	r14, r7
 4b8:	f6 2c       	mov	r15, r6
 4ba:	05 2d       	mov	r16, r5
 4bc:	14 2d       	mov	r17, r4
 4be:	67 d3       	rcall	.+1742   	; 0xb8e <__adddi3>
 4c0:	39 01       	movw	r6, r18
 4c2:	4a 01       	movw	r8, r20
 4c4:	68 87       	std	Y+8, r22	; 0x08
 4c6:	7f 83       	std	Y+7, r23	; 0x07
 4c8:	2c 01       	movw	r4, r24
			Copy_u64Number /= 10 ;
 4ca:	2a e0       	ldi	r18, 0x0A	; 10
 4cc:	a2 2e       	mov	r10, r18
 4ce:	b1 2c       	mov	r11, r1
 4d0:	c1 2c       	mov	r12, r1
 4d2:	d1 2c       	mov	r13, r1
 4d4:	e1 2c       	mov	r14, r1
 4d6:	f1 2c       	mov	r15, r1
 4d8:	00 e0       	ldi	r16, 0x00	; 0
 4da:	10 e0       	ldi	r17, 0x00	; 0
 4dc:	29 81       	ldd	r18, Y+1	; 0x01
 4de:	3a 81       	ldd	r19, Y+2	; 0x02
 4e0:	4b 81       	ldd	r20, Y+3	; 0x03
 4e2:	5c 81       	ldd	r21, Y+4	; 0x04
 4e4:	6d 81       	ldd	r22, Y+5	; 0x05
 4e6:	7e 81       	ldd	r23, Y+6	; 0x06
 4e8:	c1 01       	movw	r24, r2
 4ea:	f5 d2       	rcall	.+1514   	; 0xad6 <__udivdi3>
 4ec:	29 83       	std	Y+1, r18	; 0x01
 4ee:	3a 83       	std	Y+2, r19	; 0x02
 4f0:	4b 83       	std	Y+3, r20	; 0x03
 4f2:	5c 83       	std	Y+4, r21	; 0x04
 4f4:	6d 83       	std	Y+5, r22	; 0x05
 4f6:	7e 83       	std	Y+6, r23	; 0x06
 4f8:	1c 01       	movw	r2, r24
		udtReturnValue = LCD_udt4BitSendData('0'); 
	}

	else{

		while( Copy_u64Number != 0 )
 4fa:	a0 e0       	ldi	r26, 0x00	; 0
 4fc:	51 d3       	rcall	.+1698   	; 0xba0 <__cmpdi2_s8>
 4fe:	09 f0       	breq	.+2      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 500:	b7 cf       	rjmp	.-146    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 502:	31 2c       	mov	r3, r1

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 )
 504:	93 01       	movw	r18, r6
 506:	a4 01       	movw	r20, r8
 508:	68 85       	ldd	r22, Y+8	; 0x08
 50a:	7f 81       	ldd	r23, Y+7	; 0x07
 50c:	c2 01       	movw	r24, r4
 50e:	a1 e0       	ldi	r26, 0x01	; 1
 510:	47 d3       	rcall	.+1678   	; 0xba0 <__cmpdi2_s8>
 512:	f9 f0       	breq	.+62     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
		{

			udtReturnValue = LCD_udt4BitSendData( ( LOC_u64Reversed % 10 ) + 48 );
 514:	8a e0       	ldi	r24, 0x0A	; 10
 516:	a8 2e       	mov	r10, r24
 518:	b1 2c       	mov	r11, r1
 51a:	c1 2c       	mov	r12, r1
 51c:	d1 2c       	mov	r13, r1
 51e:	e1 2c       	mov	r14, r1
 520:	f1 2c       	mov	r15, r1
 522:	00 e0       	ldi	r16, 0x00	; 0
 524:	10 e0       	ldi	r17, 0x00	; 0
 526:	93 01       	movw	r18, r6
 528:	a4 01       	movw	r20, r8
 52a:	68 85       	ldd	r22, Y+8	; 0x08
 52c:	7f 81       	ldd	r23, Y+7	; 0x07
 52e:	c2 01       	movw	r24, r4
 530:	d0 d2       	rcall	.+1440   	; 0xad2 <__umoddi3>
 532:	80 e3       	ldi	r24, 0x30	; 48
 534:	82 0f       	add	r24, r18
 536:	3b df       	rcall	.-394    	; 0x3ae <LCD_udt4BitSendData>
 538:	38 2e       	mov	r3, r24
			LOC_u64Reversed /= 10 ;
 53a:	93 01       	movw	r18, r6
 53c:	a4 01       	movw	r20, r8
 53e:	68 85       	ldd	r22, Y+8	; 0x08
 540:	7f 81       	ldd	r23, Y+7	; 0x07
 542:	c2 01       	movw	r24, r4
 544:	c8 d2       	rcall	.+1424   	; 0xad6 <__udivdi3>
 546:	39 01       	movw	r6, r18
 548:	4a 01       	movw	r8, r20
 54a:	68 87       	std	Y+8, r22	; 0x08
 54c:	7f 83       	std	Y+7, r23	; 0x07
 54e:	2c 01       	movw	r4, r24
 550:	d9 cf       	rjmp	.-78     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
		}

	}
		
	return udtReturnValue;	
}
 552:	83 2d       	mov	r24, r3
 554:	28 96       	adiw	r28, 0x08	; 8
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	cd bf       	out	0x3d, r28	; 61
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	ff 90       	pop	r15
 56a:	ef 90       	pop	r14
 56c:	df 90       	pop	r13
 56e:	cf 90       	pop	r12
 570:	bf 90       	pop	r11
 572:	af 90       	pop	r10
 574:	9f 90       	pop	r9
 576:	8f 90       	pop	r8
 578:	7f 90       	pop	r7
 57a:	6f 90       	pop	r6
 57c:	5f 90       	pop	r5
 57e:	4f 90       	pop	r4
 580:	3f 90       	pop	r3
 582:	2f 90       	pop	r2
 584:	08 95       	ret

00000586 <LCD_udtGoTo>:
uint8 u8Row, 
uint8 u8Column
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	if(u8Row == 0)
 586:	81 11       	cpse	r24, r1
 588:	02 c0       	rjmp	.+4      	; 0x58e <LCD_udtGoTo+0x8>
	{
		udtReturnValue = LCD_udt4BitSendCommand(u8Column + (LCD_BIT7_SET_DDRAM_ADDRESS));
 58a:	80 e8       	ldi	r24, 0x80	; 128
 58c:	03 c0       	rjmp	.+6      	; 0x594 <LCD_udtGoTo+0xe>
	}
	else if(u8Row == 1)
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	19 f4       	brne	.+6      	; 0x598 <LCD_udtGoTo+0x12>
	{
		udtReturnValue = LCD_udt4BitSendCommand((u8Column + (LCD_START_ADDRESS_COL_TWO)) + (LCD_BIT7_SET_DDRAM_ADDRESS));
 592:	80 ec       	ldi	r24, 0xC0	; 192
 594:	86 0f       	add	r24, r22
 596:	f1 ce       	rjmp	.-542    	; 0x37a <LCD_udt4BitSendCommand>
	else
	{
		udtReturnValue = E_PENDING;
	}
	return udtReturnValue;
}
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	08 95       	ret

0000059c <LCD_udtClearScreen>:
void
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;

	udtReturnValue = LCD_udt4BitSendCommand(LCD_CLEAR_DISPLAY);
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	ed de       	rcall	.-550    	; 0x37a <LCD_udt4BitSendCommand>
 5a0:	ef ea       	ldi	r30, 0xAF	; 175
 5a2:	f6 e3       	ldi	r31, 0x36	; 54
 5a4:	31 97       	sbiw	r30, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <LCD_udtClearScreen+0x8>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <LCD_udtClearScreen+0xe>
 5aa:	00 00       	nop
	_delay_ms(7); //wait more than 1.53 ms
	
	return udtReturnValue;
}
 5ac:	08 95       	ret

000005ae <LCD_udt4BitInitialize>:
 5ae:	2f ef       	ldi	r18, 0xFF	; 255
 5b0:	89 ef       	ldi	r24, 0xF9	; 249
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	21 50       	subi	r18, 0x01	; 1
 5b6:	80 40       	sbci	r24, 0x00	; 0
 5b8:	90 40       	sbci	r25, 0x00	; 0
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <LCD_udt4BitInitialize+0x6>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <LCD_udt4BitInitialize+0x10>
 5be:	00 00       	nop
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	/* !Comment: initialization of data pins control pins */
	//LCD_DATA_DIRECTION = 0xFF;
	_delay_ms(40);	
	udtReturnValue = DIO_udtSetPinDirection(CLCD_DATA_PORT, CLCD_D4, DIO_DIR_OUTPUT);
 5c0:	41 e0       	ldi	r20, 0x01	; 1
 5c2:	64 e0       	ldi	r22, 0x04	; 4
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	71 dd       	rcall	.-1310   	; 0xaa <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_DATA_PORT, CLCD_D5, DIO_DIR_OUTPUT);
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	65 e0       	ldi	r22, 0x05	; 5
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	6d dd       	rcall	.-1318   	; 0xaa <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_DATA_PORT, CLCD_D6, DIO_DIR_OUTPUT);
 5d0:	41 e0       	ldi	r20, 0x01	; 1
 5d2:	66 e0       	ldi	r22, 0x06	; 6
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	69 dd       	rcall	.-1326   	; 0xaa <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_DATA_PORT, CLCD_D7, DIO_DIR_OUTPUT);
 5d8:	41 e0       	ldi	r20, 0x01	; 1
 5da:	67 e0       	ldi	r22, 0x07	; 7
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	65 dd       	rcall	.-1334   	; 0xaa <DIO_udtSetPinDirection>
	
	udtReturnValue = DIO_udtSetPinDirection(CLCD_CONTROL_PORT, CLCD_RS, DIO_DIR_OUTPUT);
 5e0:	41 e0       	ldi	r20, 0x01	; 1
 5e2:	65 e0       	ldi	r22, 0x05	; 5
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	61 dd       	rcall	.-1342   	; 0xaa <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_CONTROL_PORT, CLCD_RW, DIO_DIR_OUTPUT);
 5e8:	41 e0       	ldi	r20, 0x01	; 1
 5ea:	66 e0       	ldi	r22, 0x06	; 6
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	5d dd       	rcall	.-1350   	; 0xaa <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_CONTROL_PORT, CLCD_EN, DIO_DIR_OUTPUT);
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	67 e0       	ldi	r22, 0x07	; 7
 5f4:	82 e0       	ldi	r24, 0x02	; 2
 5f6:	59 dd       	rcall	.-1358   	; 0xaa <DIO_udtSetPinDirection>
	
	/* !Comment: initialization of some command from data sheet */	
		//udtReturnValue = LCD_udt4BitSendCommand(0x33);
		//udtReturnValue = LCD_udt4BitSendCommand(0x32);
	udtReturnValue = LCD_udt4BitSendCommand(LCD_RETURN_HOME);
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	bf de       	rcall	.-642    	; 0x37a <LCD_udt4BitSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5fc:	ef ec       	ldi	r30, 0xCF	; 207
 5fe:	f7 e0       	ldi	r31, 0x07	; 7
 600:	31 97       	sbiw	r30, 0x01	; 1
 602:	f1 f7       	brne	.-4      	; 0x600 <LCD_udt4BitInitialize+0x52>
 604:	00 c0       	rjmp	.+0      	; 0x606 <LCD_udt4BitInitialize+0x58>
 606:	00 00       	nop
	_delay_us(1000);
	
	udtReturnValue = LCD_udt4BitSendCommand(LCD_4BIT_MODE_2_LINE_5_IN_7);
 608:	88 e2       	ldi	r24, 0x28	; 40
 60a:	b7 de       	rcall	.-658    	; 0x37a <LCD_udt4BitSendCommand>
 60c:	8f ec       	ldi	r24, 0xCF	; 207
 60e:	97 e0       	ldi	r25, 0x07	; 7
 610:	01 97       	sbiw	r24, 0x01	; 1
 612:	f1 f7       	brne	.-4      	; 0x610 <LCD_udt4BitInitialize+0x62>
 614:	00 c0       	rjmp	.+0      	; 0x616 <LCD_udt4BitInitialize+0x68>
 616:	00 00       	nop
	_delay_us(1000);
	
	udtReturnValue = LCD_udt4BitSendCommand(LCD_DISPLAY_ON_UNDERLINE_ON_CURSOR_OFF); 
 618:	8c e0       	ldi	r24, 0x0C	; 12
 61a:	af de       	rcall	.-674    	; 0x37a <LCD_udt4BitSendCommand>
 61c:	ef ec       	ldi	r30, 0xCF	; 207
 61e:	f7 e0       	ldi	r31, 0x07	; 7
 620:	31 97       	sbiw	r30, 0x01	; 1
 622:	f1 f7       	brne	.-4      	; 0x620 <LCD_udt4BitInitialize+0x72>
 624:	00 c0       	rjmp	.+0      	; 0x626 <LCD_udt4BitInitialize+0x78>
 626:	00 00       	nop
	_delay_us(1000);
	
	udtReturnValue = LCD_udtClearScreen();
 628:	b9 df       	rcall	.-142    	; 0x59c <LCD_udtClearScreen>
	
	udtReturnValue = LCD_udt4BitSendCommand(LCD_ENTRY_MODE_INC_SHIFT_OFF);
 62a:	86 e0       	ldi	r24, 0x06	; 6
 62c:	a6 de       	rcall	.-692    	; 0x37a <LCD_udt4BitSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 62e:	ef ec       	ldi	r30, 0xCF	; 207
 630:	f7 e0       	ldi	r31, 0x07	; 7
 632:	31 97       	sbiw	r30, 0x01	; 1
 634:	f1 f7       	brne	.-4      	; 0x632 <LCD_udt4BitInitialize+0x84>
 636:	00 c0       	rjmp	.+0      	; 0x638 <LCD_udt4BitInitialize+0x8a>
 638:	00 00       	nop
	_delay_ms(1);	
	
	return udtReturnValue;	
}	
 63a:	08 95       	ret

0000063c <TIMER1_vdInit>:
						 Set Configurable Modes & Set the Required Prescaler */
	/*Set Configurable Modes*/
	#if   TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_NORMAL_MODE
		/* 1-Setting Normal Mode*/	
			CLR_BIT(TIMER1->TCCR1A, TCCR1A_WGM10);
			CLR_BIT(TIMER1->TCCR1A, TCCR1A_WGM11);
 63c:	8f b5       	in	r24, 0x2f	; 47
 63e:	8c 7f       	andi	r24, 0xFC	; 252
 640:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TIMER1->TCCR1B, TCCR1B_WGM12);
			CLR_BIT(TIMER1->TCCR1B, TCCR1B_WGM13);
 642:	8e b5       	in	r24, 0x2e	; 46
 644:	98 2f       	mov	r25, r24
 646:	97 7e       	andi	r25, 0xE7	; 231
 648:	9e bd       	out	0x2e, r25	; 46
		/* 2-Setting Preload value*/	
			TCNT1 = TIMER1_PRELOAD_VAL;
 64a:	1d bc       	out	0x2d, r1	; 45
 64c:	1c bc       	out	0x2c, r1	; 44
		/* 3-Timer1 Overflow Interrupt Enable*/	
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK, TIMER1_TIMSK_TOIE1);
 64e:	99 b7       	in	r25, 0x39	; 57
 650:	9b 7f       	andi	r25, 0xFB	; 251
 652:	99 bf       	out	0x39, r25	; 57
	#else
		#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
	#endif	
	/*Set the Required Prescaler*/	
	((TIMER1->TCCR1B)) &= TIMER01_PRESCALER_MASK;
	((TIMER1->TCCR1B)) |= TIMER01_PRESCALER;
 654:	80 7e       	andi	r24, 0xE0	; 224
 656:	81 60       	ori	r24, 0x01	; 1
 658:	8e bd       	out	0x2e, r24	; 46
 65a:	08 95       	ret

0000065c <TIMER1_vdSetPreload>:
void TIMER1_vdSetPreload 
(
uint16 Copy_u16Preload
)
{
	TCNT1 = Copy_u16Preload ;	
 65c:	9d bd       	out	0x2d, r25	; 45
 65e:	8c bd       	out	0x2c, r24	; 44
 660:	08 95       	ret

00000662 <TIMER_u16GetICR>:
(
void
)
{
	/* this register is 16 bit register */
	return ICR1;	
 662:	86 b5       	in	r24, 0x26	; 38
 664:	97 b5       	in	r25, 0x27	; 39
}
 666:	08 95       	ret

00000668 <__vector_4>:
	return udtReturnValue;
}
/* TIMER2 COMP ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
 668:	1f 92       	push	r1
 66a:	0f 92       	push	r0
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	0f 92       	push	r0
 670:	11 24       	eor	r1, r1
 672:	2f 93       	push	r18
 674:	3f 93       	push	r19
 676:	4f 93       	push	r20
 678:	5f 93       	push	r21
 67a:	6f 93       	push	r22
 67c:	7f 93       	push	r23
 67e:	8f 93       	push	r24
 680:	9f 93       	push	r25
 682:	af 93       	push	r26
 684:	bf 93       	push	r27
 686:	ef 93       	push	r30
 688:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
 68a:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <__data_end>
 68e:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <__data_end+0x1>
 692:	30 97       	sbiw	r30, 0x00	; 0
 694:	09 f0       	breq	.+2      	; 0x698 <__vector_4+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]();
 696:	09 95       	icall
	}	
}
 698:	ff 91       	pop	r31
 69a:	ef 91       	pop	r30
 69c:	bf 91       	pop	r27
 69e:	af 91       	pop	r26
 6a0:	9f 91       	pop	r25
 6a2:	8f 91       	pop	r24
 6a4:	7f 91       	pop	r23
 6a6:	6f 91       	pop	r22
 6a8:	5f 91       	pop	r21
 6aa:	4f 91       	pop	r20
 6ac:	3f 91       	pop	r19
 6ae:	2f 91       	pop	r18
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <__vector_5>:
/* TIMER2 OVF ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
 6ba:	1f 92       	push	r1
 6bc:	0f 92       	push	r0
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	0f 92       	push	r0
 6c2:	11 24       	eor	r1, r1
 6c4:	2f 93       	push	r18
 6c6:	3f 93       	push	r19
 6c8:	4f 93       	push	r20
 6ca:	5f 93       	push	r21
 6cc:	6f 93       	push	r22
 6ce:	7f 93       	push	r23
 6d0:	8f 93       	push	r24
 6d2:	9f 93       	push	r25
 6d4:	af 93       	push	r26
 6d6:	bf 93       	push	r27
 6d8:	ef 93       	push	r30
 6da:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
 6dc:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end+0x2>
 6e0:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x3>
 6e4:	30 97       	sbiw	r30, 0x00	; 0
 6e6:	09 f0       	breq	.+2      	; 0x6ea <__vector_5+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]();
 6e8:	09 95       	icall
	}	
}
 6ea:	ff 91       	pop	r31
 6ec:	ef 91       	pop	r30
 6ee:	bf 91       	pop	r27
 6f0:	af 91       	pop	r26
 6f2:	9f 91       	pop	r25
 6f4:	8f 91       	pop	r24
 6f6:	7f 91       	pop	r23
 6f8:	6f 91       	pop	r22
 6fa:	5f 91       	pop	r21
 6fc:	4f 91       	pop	r20
 6fe:	3f 91       	pop	r19
 700:	2f 91       	pop	r18
 702:	0f 90       	pop	r0
 704:	0f be       	out	0x3f, r0	; 63
 706:	0f 90       	pop	r0
 708:	1f 90       	pop	r1
 70a:	18 95       	reti

0000070c <__vector_6>:
/* TIMER1 CAPT ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
 716:	2f 93       	push	r18
 718:	3f 93       	push	r19
 71a:	4f 93       	push	r20
 71c:	5f 93       	push	r21
 71e:	6f 93       	push	r22
 720:	7f 93       	push	r23
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
 726:	af 93       	push	r26
 728:	bf 93       	push	r27
 72a:	ef 93       	push	r30
 72c:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
 72e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end+0x4>
 732:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x5>
 736:	30 97       	sbiw	r30, 0x00	; 0
 738:	09 f0       	breq	.+2      	; 0x73c <__vector_6+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]();
 73a:	09 95       	icall
	}	
}
 73c:	ff 91       	pop	r31
 73e:	ef 91       	pop	r30
 740:	bf 91       	pop	r27
 742:	af 91       	pop	r26
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	7f 91       	pop	r23
 74a:	6f 91       	pop	r22
 74c:	5f 91       	pop	r21
 74e:	4f 91       	pop	r20
 750:	3f 91       	pop	r19
 752:	2f 91       	pop	r18
 754:	0f 90       	pop	r0
 756:	0f be       	out	0x3f, r0	; 63
 758:	0f 90       	pop	r0
 75a:	1f 90       	pop	r1
 75c:	18 95       	reti

0000075e <__vector_7>:
/* TIMER1 COMPA ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
 75e:	1f 92       	push	r1
 760:	0f 92       	push	r0
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	0f 92       	push	r0
 766:	11 24       	eor	r1, r1
 768:	2f 93       	push	r18
 76a:	3f 93       	push	r19
 76c:	4f 93       	push	r20
 76e:	5f 93       	push	r21
 770:	6f 93       	push	r22
 772:	7f 93       	push	r23
 774:	8f 93       	push	r24
 776:	9f 93       	push	r25
 778:	af 93       	push	r26
 77a:	bf 93       	push	r27
 77c:	ef 93       	push	r30
 77e:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
 780:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end+0x6>
 784:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x7>
 788:	30 97       	sbiw	r30, 0x00	; 0
 78a:	09 f0       	breq	.+2      	; 0x78e <__vector_7+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]();
 78c:	09 95       	icall
	}	
}
 78e:	ff 91       	pop	r31
 790:	ef 91       	pop	r30
 792:	bf 91       	pop	r27
 794:	af 91       	pop	r26
 796:	9f 91       	pop	r25
 798:	8f 91       	pop	r24
 79a:	7f 91       	pop	r23
 79c:	6f 91       	pop	r22
 79e:	5f 91       	pop	r21
 7a0:	4f 91       	pop	r20
 7a2:	3f 91       	pop	r19
 7a4:	2f 91       	pop	r18
 7a6:	0f 90       	pop	r0
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	0f 90       	pop	r0
 7ac:	1f 90       	pop	r1
 7ae:	18 95       	reti

000007b0 <__vector_8>:
/* TIMER1 COMPB ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
 7b0:	1f 92       	push	r1
 7b2:	0f 92       	push	r0
 7b4:	0f b6       	in	r0, 0x3f	; 63
 7b6:	0f 92       	push	r0
 7b8:	11 24       	eor	r1, r1
 7ba:	2f 93       	push	r18
 7bc:	3f 93       	push	r19
 7be:	4f 93       	push	r20
 7c0:	5f 93       	push	r21
 7c2:	6f 93       	push	r22
 7c4:	7f 93       	push	r23
 7c6:	8f 93       	push	r24
 7c8:	9f 93       	push	r25
 7ca:	af 93       	push	r26
 7cc:	bf 93       	push	r27
 7ce:	ef 93       	push	r30
 7d0:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
 7d2:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end+0x8>
 7d6:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x9>
 7da:	30 97       	sbiw	r30, 0x00	; 0
 7dc:	09 f0       	breq	.+2      	; 0x7e0 <__vector_8+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]();
 7de:	09 95       	icall
	}	
}
 7e0:	ff 91       	pop	r31
 7e2:	ef 91       	pop	r30
 7e4:	bf 91       	pop	r27
 7e6:	af 91       	pop	r26
 7e8:	9f 91       	pop	r25
 7ea:	8f 91       	pop	r24
 7ec:	7f 91       	pop	r23
 7ee:	6f 91       	pop	r22
 7f0:	5f 91       	pop	r21
 7f2:	4f 91       	pop	r20
 7f4:	3f 91       	pop	r19
 7f6:	2f 91       	pop	r18
 7f8:	0f 90       	pop	r0
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	0f 90       	pop	r0
 7fe:	1f 90       	pop	r1
 800:	18 95       	reti

00000802 <__vector_9>:
/* TIMER1 OVF ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
 802:	1f 92       	push	r1
 804:	0f 92       	push	r0
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	0f 92       	push	r0
 80a:	11 24       	eor	r1, r1
 80c:	2f 93       	push	r18
 80e:	3f 93       	push	r19
 810:	4f 93       	push	r20
 812:	5f 93       	push	r21
 814:	6f 93       	push	r22
 816:	7f 93       	push	r23
 818:	8f 93       	push	r24
 81a:	9f 93       	push	r25
 81c:	af 93       	push	r26
 81e:	bf 93       	push	r27
 820:	ef 93       	push	r30
 822:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
 824:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end+0xa>
 828:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__data_end+0xb>
 82c:	30 97       	sbiw	r30, 0x00	; 0
 82e:	09 f0       	breq	.+2      	; 0x832 <__vector_9+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]();
 830:	09 95       	icall
	}	
}
 832:	ff 91       	pop	r31
 834:	ef 91       	pop	r30
 836:	bf 91       	pop	r27
 838:	af 91       	pop	r26
 83a:	9f 91       	pop	r25
 83c:	8f 91       	pop	r24
 83e:	7f 91       	pop	r23
 840:	6f 91       	pop	r22
 842:	5f 91       	pop	r21
 844:	4f 91       	pop	r20
 846:	3f 91       	pop	r19
 848:	2f 91       	pop	r18
 84a:	0f 90       	pop	r0
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	0f 90       	pop	r0
 850:	1f 90       	pop	r1
 852:	18 95       	reti

00000854 <__vector_10>:
/* TIMER0 COMP ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
 854:	1f 92       	push	r1
 856:	0f 92       	push	r0
 858:	0f b6       	in	r0, 0x3f	; 63
 85a:	0f 92       	push	r0
 85c:	11 24       	eor	r1, r1
 85e:	2f 93       	push	r18
 860:	3f 93       	push	r19
 862:	4f 93       	push	r20
 864:	5f 93       	push	r21
 866:	6f 93       	push	r22
 868:	7f 93       	push	r23
 86a:	8f 93       	push	r24
 86c:	9f 93       	push	r25
 86e:	af 93       	push	r26
 870:	bf 93       	push	r27
 872:	ef 93       	push	r30
 874:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
 876:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__data_end+0xc>
 87a:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__data_end+0xd>
 87e:	30 97       	sbiw	r30, 0x00	; 0
 880:	09 f0       	breq	.+2      	; 0x884 <__stack+0x25>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]();
 882:	09 95       	icall
	}	
}
 884:	ff 91       	pop	r31
 886:	ef 91       	pop	r30
 888:	bf 91       	pop	r27
 88a:	af 91       	pop	r26
 88c:	9f 91       	pop	r25
 88e:	8f 91       	pop	r24
 890:	7f 91       	pop	r23
 892:	6f 91       	pop	r22
 894:	5f 91       	pop	r21
 896:	4f 91       	pop	r20
 898:	3f 91       	pop	r19
 89a:	2f 91       	pop	r18
 89c:	0f 90       	pop	r0
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	0f 90       	pop	r0
 8a2:	1f 90       	pop	r1
 8a4:	18 95       	reti

000008a6 <__vector_11>:
/* TIMER0 OVF ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
 8a6:	1f 92       	push	r1
 8a8:	0f 92       	push	r0
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	0f 92       	push	r0
 8ae:	11 24       	eor	r1, r1
 8b0:	2f 93       	push	r18
 8b2:	3f 93       	push	r19
 8b4:	4f 93       	push	r20
 8b6:	5f 93       	push	r21
 8b8:	6f 93       	push	r22
 8ba:	7f 93       	push	r23
 8bc:	8f 93       	push	r24
 8be:	9f 93       	push	r25
 8c0:	af 93       	push	r26
 8c2:	bf 93       	push	r27
 8c4:	ef 93       	push	r30
 8c6:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
 8c8:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__bss_end>
 8cc:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <__bss_end+0x1>
 8d0:	30 97       	sbiw	r30, 0x00	; 0
 8d2:	09 f0       	breq	.+2      	; 0x8d6 <__vector_11+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]();
 8d4:	09 95       	icall
	}
 8d6:	ff 91       	pop	r31
 8d8:	ef 91       	pop	r30
 8da:	bf 91       	pop	r27
 8dc:	af 91       	pop	r26
 8de:	9f 91       	pop	r25
 8e0:	8f 91       	pop	r24
 8e2:	7f 91       	pop	r23
 8e4:	6f 91       	pop	r22
 8e6:	5f 91       	pop	r21
 8e8:	4f 91       	pop	r20
 8ea:	3f 91       	pop	r19
 8ec:	2f 91       	pop	r18
 8ee:	0f 90       	pop	r0
 8f0:	0f be       	out	0x3f, r0	; 63
 8f2:	0f 90       	pop	r0
 8f4:	1f 90       	pop	r1
 8f6:	18 95       	reti

000008f8 <Ultrasonic_udtInit>:
/***********************************************************************************************************/
Std_ReturnType Ultrasonic_udtInit
(
const ULTRASONIC_obj_t* ULTRASONIC_pudtobj
)
{
 8f8:	cf 93       	push	r28
 8fa:	df 93       	push	r29
	*/

	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	
	if (NULL == ULTRASONIC_pudtobj)
 8fc:	00 97       	sbiw	r24, 0x00	; 0
 8fe:	39 f1       	breq	.+78     	; 0x94e <Ultrasonic_udtInit+0x56>
 900:	ec 01       	movw	r28, r24
		udtReturnValue = E_NOT_OK;
	}
	else
	{
	udtReturnValue = DIO_udtSetPinDirection(ULTRASONIC_pudtobj->udtTriggerPin.port,
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
 902:	88 81       	ld	r24, Y
 904:	68 2f       	mov	r22, r24
 906:	66 95       	lsr	r22
 908:	66 95       	lsr	r22
 90a:	66 95       	lsr	r22
 90c:	67 70       	andi	r22, 0x07	; 7
	{
		udtReturnValue = E_NOT_OK;
	}
	else
	{
	udtReturnValue = DIO_udtSetPinDirection(ULTRASONIC_pudtobj->udtTriggerPin.port,
 90e:	41 e0       	ldi	r20, 0x01	; 1
 910:	87 70       	andi	r24, 0x07	; 7
 912:	cb db       	rcall	.-2154   	; 0xaa <DIO_udtSetPinDirection>
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
											ULTRASONIC_TRIG_OUTPUT
											);
	udtReturnValue = DIO_udtSetPinDirection(ULTRASONIC_pudtobj->udtEchoPin.port,
											ULTRASONIC_pudtobj->udtEchoPin.pin,
 914:	89 81       	ldd	r24, Y+1	; 0x01
 916:	68 2f       	mov	r22, r24
 918:	66 95       	lsr	r22
 91a:	66 95       	lsr	r22
 91c:	66 95       	lsr	r22
 91e:	67 70       	andi	r22, 0x07	; 7
	{
	udtReturnValue = DIO_udtSetPinDirection(ULTRASONIC_pudtobj->udtTriggerPin.port,
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
											ULTRASONIC_TRIG_OUTPUT
											);
	udtReturnValue = DIO_udtSetPinDirection(ULTRASONIC_pudtobj->udtEchoPin.port,
 920:	40 e0       	ldi	r20, 0x00	; 0
 922:	87 70       	andi	r24, 0x07	; 7
 924:	c2 db       	rcall	.-2172   	; 0xaa <DIO_udtSetPinDirection>
											);



	udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
										ULTRASONIC_pudtobj->udtTriggerPin.pin,
 926:	88 81       	ld	r24, Y
 928:	68 2f       	mov	r22, r24
 92a:	66 95       	lsr	r22
 92c:	66 95       	lsr	r22
 92e:	66 95       	lsr	r22
 930:	67 70       	andi	r22, 0x07	; 7
											ULTRASONIC_ECHO_INPUT											
											);



	udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
 932:	40 e0       	ldi	r20, 0x00	; 0
 934:	87 70       	andi	r24, 0x07	; 7
 936:	20 dc       	rcall	.-1984   	; 0x178 <DIO_udtSetPinValue>
										ULTRASONIC_pudtobj->udtTriggerPin.pin,
										ULTRASONIC_TRIG_LOW
										);

	udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
										ULTRASONIC_pudtobj->udtEchoPin.pin,
 938:	89 81       	ldd	r24, Y+1	; 0x01
 93a:	68 2f       	mov	r22, r24
 93c:	66 95       	lsr	r22
 93e:	66 95       	lsr	r22
 940:	66 95       	lsr	r22
 942:	67 70       	andi	r22, 0x07	; 7
	udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
										ULTRASONIC_pudtobj->udtTriggerPin.pin,
										ULTRASONIC_TRIG_LOW
										);

	udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
 944:	40 e0       	ldi	r20, 0x00	; 0
 946:	87 70       	andi	r24, 0x07	; 7
										ULTRASONIC_TRIG_LOW
										);											
	}
	
	return udtReturnValue;	
}
 948:	df 91       	pop	r29
 94a:	cf 91       	pop	r28
	udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
										ULTRASONIC_pudtobj->udtTriggerPin.pin,
										ULTRASONIC_TRIG_LOW
										);

	udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
 94c:	15 cc       	rjmp	.-2006   	; 0x178 <DIO_udtSetPinValue>
										ULTRASONIC_TRIG_LOW
										);											
	}
	
	return udtReturnValue;	
}
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	df 91       	pop	r29
 952:	cf 91       	pop	r28
 954:	08 95       	ret

00000956 <Ultrasonic_udtCalculateDistance>:
Std_ReturnType Ultrasonic_udtCalculateDistance
(
const ULTRASONIC_obj_t* ULTRASONIC_pudtobj, 
uint16* ULTRASONIC_pu16Distance
)
{
 956:	cf 92       	push	r12
 958:	df 92       	push	r13
 95a:	ff 92       	push	r15
 95c:	0f 93       	push	r16
 95e:	1f 93       	push	r17
 960:	cf 93       	push	r28
 962:	df 93       	push	r29
 964:	1f 92       	push	r1
 966:	cd b7       	in	r28, 0x3d	; 61
 968:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType udtReturnValue = E_NOT_OK;
    logic_t EchoPinLogic = DIO_LOW;
 96a:	19 82       	std	Y+1, r1	; 0x01
	uint16 Timers_u16IcuValue = 0;
	
	if (NULL == ULTRASONIC_pudtobj)
 96c:	00 97       	sbiw	r24, 0x00	; 0
 96e:	09 f4       	brne	.+2      	; 0x972 <Ultrasonic_udtCalculateDistance+0x1c>
 970:	53 c0       	rjmp	.+166    	; 0xa18 <Ultrasonic_udtCalculateDistance+0xc2>
 972:	6b 01       	movw	r12, r22
 974:	8c 01       	movw	r16, r24
	}
	else
	{
        /* Send Trigger Signal to the Ultrasonic Trigger Pin */
		udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
 976:	fc 01       	movw	r30, r24
 978:	80 81       	ld	r24, Z
 97a:	68 2f       	mov	r22, r24
 97c:	66 95       	lsr	r22
 97e:	66 95       	lsr	r22
 980:	66 95       	lsr	r22
 982:	67 70       	andi	r22, 0x07	; 7
		udtReturnValue = E_NOT_OK;
	}
	else
	{
        /* Send Trigger Signal to the Ultrasonic Trigger Pin */
		udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
 984:	41 e0       	ldi	r20, 0x01	; 1
 986:	87 70       	andi	r24, 0x07	; 7
 988:	f7 db       	rcall	.-2066   	; 0x178 <DIO_udtSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 98a:	fa e1       	ldi	r31, 0x1A	; 26
 98c:	fa 95       	dec	r31
 98e:	f1 f7       	brne	.-4      	; 0x98c <Ultrasonic_udtCalculateDistance+0x36>
 990:	00 c0       	rjmp	.+0      	; 0x992 <Ultrasonic_udtCalculateDistance+0x3c>
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
											ULTRASONIC_TRIG_HIGH
											);
		_delay_us(10);
		udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
 992:	f8 01       	movw	r30, r16
 994:	80 81       	ld	r24, Z
 996:	68 2f       	mov	r22, r24
 998:	66 95       	lsr	r22
 99a:	66 95       	lsr	r22
 99c:	66 95       	lsr	r22
 99e:	67 70       	andi	r22, 0x07	; 7
		udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
											ULTRASONIC_TRIG_HIGH
											);
		_delay_us(10);
		udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
 9a0:	40 e0       	ldi	r20, 0x00	; 0
 9a2:	87 70       	andi	r24, 0x07	; 7
 9a4:	e9 db       	rcall	.-2094   	; 0x178 <DIO_udtSetPinValue>
											);		
	
        /* Wait the Echo pin to be High */
		while (DIO_LOW == EchoPinLogic)
		{
			udtReturnValue = DIO_udtGetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
 9a6:	f8 2e       	mov	r15, r24
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
											ULTRASONIC_TRIG_LOW
											);		
	
        /* Wait the Echo pin to be High */
		while (DIO_LOW == EchoPinLogic)
 9a8:	89 81       	ldd	r24, Y+1	; 0x01
 9aa:	81 11       	cpse	r24, r1
 9ac:	0d c0       	rjmp	.+26     	; 0x9c8 <Ultrasonic_udtCalculateDistance+0x72>
		{
			udtReturnValue = DIO_udtGetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
												ULTRASONIC_pudtobj->udtEchoPin.pin,
 9ae:	f8 01       	movw	r30, r16
 9b0:	81 81       	ldd	r24, Z+1	; 0x01
 9b2:	68 2f       	mov	r22, r24
 9b4:	66 95       	lsr	r22
 9b6:	66 95       	lsr	r22
 9b8:	66 95       	lsr	r22
 9ba:	67 70       	andi	r22, 0x07	; 7
											);		
	
        /* Wait the Echo pin to be High */
		while (DIO_LOW == EchoPinLogic)
		{
			udtReturnValue = DIO_udtGetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
 9bc:	ae 01       	movw	r20, r28
 9be:	4f 5f       	subi	r20, 0xFF	; 255
 9c0:	5f 4f       	sbci	r21, 0xFF	; 255
 9c2:	87 70       	andi	r24, 0x07	; 7
 9c4:	40 dc       	rcall	.-1920   	; 0x246 <DIO_udtGetPinValue>
 9c6:	ef cf       	rjmp	.-34     	; 0x9a6 <Ultrasonic_udtCalculateDistance+0x50>
												&EchoPinLogic);
		}


        /* Clear Timer1 Ticks TCNT1 */
		TIMER1_vdSetPreload(Timers_u16IcuValue);
 9c8:	80 e0       	ldi	r24, 0x00	; 0
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	47 de       	rcall	.-882    	; 0x65c <TIMER1_vdSetPreload>
		
        /* Wait the Echo pin to be Low */
		while (DIO_HIGH == EchoPinLogic)
 9ce:	89 81       	ldd	r24, Y+1	; 0x01
 9d0:	81 30       	cpi	r24, 0x01	; 1
 9d2:	71 f4       	brne	.+28     	; 0x9f0 <Ultrasonic_udtCalculateDistance+0x9a>
		{
			udtReturnValue = DIO_udtGetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
												ULTRASONIC_pudtobj->udtEchoPin.pin,
 9d4:	f8 01       	movw	r30, r16
 9d6:	81 81       	ldd	r24, Z+1	; 0x01
 9d8:	68 2f       	mov	r22, r24
 9da:	66 95       	lsr	r22
 9dc:	66 95       	lsr	r22
 9de:	66 95       	lsr	r22
 9e0:	67 70       	andi	r22, 0x07	; 7
		TIMER1_vdSetPreload(Timers_u16IcuValue);
		
        /* Wait the Echo pin to be Low */
		while (DIO_HIGH == EchoPinLogic)
		{
			udtReturnValue = DIO_udtGetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
 9e2:	ae 01       	movw	r20, r28
 9e4:	4f 5f       	subi	r20, 0xFF	; 255
 9e6:	5f 4f       	sbci	r21, 0xFF	; 255
 9e8:	87 70       	andi	r24, 0x07	; 7
 9ea:	2d dc       	rcall	.-1958   	; 0x246 <DIO_udtGetPinValue>
 9ec:	f8 2e       	mov	r15, r24
 9ee:	ef cf       	rjmp	.-34     	; 0x9ce <Ultrasonic_udtCalculateDistance+0x78>
		}

        /* Read the time */
        //ret = Timer0_Read_Value(&timer0_timer_obj, &Timer_Value);
        
		Timers_u16IcuValue = TIMER_u16GetICR();
 9f0:	38 de       	rcall	.-912    	; 0x662 <TIMER_u16GetICR>
			from data sheet 
							distance = time / 58 where where us & 58us/cm
		*/
		
		//*ULTRASONIC_pu8Distance = (uint16)((f32)Timers_u16IcuValue*(4.25f/1000));
		*ULTRASONIC_pu16Distance = (uint16)(((d64)Timers_u16IcuValue*ULTRASONIC_TIME_TICK)/58.3);
 9f2:	bc 01       	movw	r22, r24
 9f4:	80 e0       	ldi	r24, 0x00	; 0
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	82 d1       	rcall	.+772    	; 0xcfe <__floatunsisf>
 9fa:	20 e0       	ldi	r18, 0x00	; 0
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	40 e0       	ldi	r20, 0x00	; 0
 a00:	5e e3       	ldi	r21, 0x3E	; 62
 a02:	0b d2       	rcall	.+1046   	; 0xe1a <__mulsf3>
 a04:	23 e3       	ldi	r18, 0x33	; 51
 a06:	33 e3       	ldi	r19, 0x33	; 51
 a08:	49 e6       	ldi	r20, 0x69	; 105
 a0a:	52 e4       	ldi	r21, 0x42	; 66
 a0c:	e4 d0       	rcall	.+456    	; 0xbd6 <__divsf3>
 a0e:	4b d1       	rcall	.+662    	; 0xca6 <__fixunssfsi>
 a10:	f6 01       	movw	r30, r12
 a12:	71 83       	std	Z+1, r23	; 0x01
 a14:	60 83       	st	Z, r22
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <Ultrasonic_udtCalculateDistance+0xc6>
    logic_t EchoPinLogic = DIO_LOW;
	uint16 Timers_u16IcuValue = 0;
	
	if (NULL == ULTRASONIC_pudtobj)
	{
		udtReturnValue = E_NOT_OK;
 a18:	ff 24       	eor	r15, r15
 a1a:	f3 94       	inc	r15
		*ULTRASONIC_pu16Distance = (uint16)(((d64)Timers_u16IcuValue*ULTRASONIC_TIME_TICK)/58.3);
		
	}
	
	return udtReturnValue;	
}
 a1c:	8f 2d       	mov	r24, r15
 a1e:	0f 90       	pop	r0
 a20:	df 91       	pop	r29
 a22:	cf 91       	pop	r28
 a24:	1f 91       	pop	r17
 a26:	0f 91       	pop	r16
 a28:	ff 90       	pop	r15
 a2a:	df 90       	pop	r13
 a2c:	cf 90       	pop	r12
 a2e:	08 95       	ret

00000a30 <__muldi3>:
 a30:	df 93       	push	r29
 a32:	cf 93       	push	r28
 a34:	1f 93       	push	r17
 a36:	0f 93       	push	r16
 a38:	9a 9d       	mul	r25, r10
 a3a:	f0 2d       	mov	r31, r0
 a3c:	21 9f       	mul	r18, r17
 a3e:	f0 0d       	add	r31, r0
 a40:	8b 9d       	mul	r24, r11
 a42:	f0 0d       	add	r31, r0
 a44:	8a 9d       	mul	r24, r10
 a46:	e0 2d       	mov	r30, r0
 a48:	f1 0d       	add	r31, r1
 a4a:	03 9f       	mul	r16, r19
 a4c:	f0 0d       	add	r31, r0
 a4e:	02 9f       	mul	r16, r18
 a50:	e0 0d       	add	r30, r0
 a52:	f1 1d       	adc	r31, r1
 a54:	4e 9d       	mul	r20, r14
 a56:	e0 0d       	add	r30, r0
 a58:	f1 1d       	adc	r31, r1
 a5a:	5e 9d       	mul	r21, r14
 a5c:	f0 0d       	add	r31, r0
 a5e:	4f 9d       	mul	r20, r15
 a60:	f0 0d       	add	r31, r0
 a62:	7f 93       	push	r23
 a64:	6f 93       	push	r22
 a66:	bf 92       	push	r11
 a68:	af 92       	push	r10
 a6a:	5f 93       	push	r21
 a6c:	4f 93       	push	r20
 a6e:	d5 01       	movw	r26, r10
 a70:	a3 d0       	rcall	.+326    	; 0xbb8 <__umulhisi3>
 a72:	8b 01       	movw	r16, r22
 a74:	ac 01       	movw	r20, r24
 a76:	d7 01       	movw	r26, r14
 a78:	9f d0       	rcall	.+318    	; 0xbb8 <__umulhisi3>
 a7a:	eb 01       	movw	r28, r22
 a7c:	e8 0f       	add	r30, r24
 a7e:	f9 1f       	adc	r31, r25
 a80:	d6 01       	movw	r26, r12
 a82:	1f d0       	rcall	.+62     	; 0xac2 <__muldi3_6>
 a84:	2f 91       	pop	r18
 a86:	3f 91       	pop	r19
 a88:	d6 01       	movw	r26, r12
 a8a:	96 d0       	rcall	.+300    	; 0xbb8 <__umulhisi3>
 a8c:	c6 0f       	add	r28, r22
 a8e:	d7 1f       	adc	r29, r23
 a90:	e8 1f       	adc	r30, r24
 a92:	f9 1f       	adc	r31, r25
 a94:	af 91       	pop	r26
 a96:	bf 91       	pop	r27
 a98:	14 d0       	rcall	.+40     	; 0xac2 <__muldi3_6>
 a9a:	2f 91       	pop	r18
 a9c:	3f 91       	pop	r19
 a9e:	8c d0       	rcall	.+280    	; 0xbb8 <__umulhisi3>
 aa0:	c6 0f       	add	r28, r22
 aa2:	d7 1f       	adc	r29, r23
 aa4:	e8 1f       	adc	r30, r24
 aa6:	f9 1f       	adc	r31, r25
 aa8:	d6 01       	movw	r26, r12
 aaa:	86 d0       	rcall	.+268    	; 0xbb8 <__umulhisi3>
 aac:	e6 0f       	add	r30, r22
 aae:	f7 1f       	adc	r31, r23
 ab0:	98 01       	movw	r18, r16
 ab2:	be 01       	movw	r22, r28
 ab4:	cf 01       	movw	r24, r30
 ab6:	11 24       	eor	r1, r1
 ab8:	0f 91       	pop	r16
 aba:	1f 91       	pop	r17
 abc:	cf 91       	pop	r28
 abe:	df 91       	pop	r29
 ac0:	08 95       	ret

00000ac2 <__muldi3_6>:
 ac2:	7a d0       	rcall	.+244    	; 0xbb8 <__umulhisi3>
 ac4:	46 0f       	add	r20, r22
 ac6:	57 1f       	adc	r21, r23
 ac8:	c8 1f       	adc	r28, r24
 aca:	d9 1f       	adc	r29, r25
 acc:	08 f4       	brcc	.+2      	; 0xad0 <__muldi3_6+0xe>
 ace:	31 96       	adiw	r30, 0x01	; 1
 ad0:	08 95       	ret

00000ad2 <__umoddi3>:
 ad2:	68 94       	set
 ad4:	01 c0       	rjmp	.+2      	; 0xad8 <__udivdi3_umoddi3>

00000ad6 <__udivdi3>:
 ad6:	e8 94       	clt

00000ad8 <__udivdi3_umoddi3>:
 ad8:	8f 92       	push	r8
 ada:	9f 92       	push	r9
 adc:	cf 93       	push	r28
 ade:	df 93       	push	r29
 ae0:	05 d0       	rcall	.+10     	; 0xaec <__udivmod64>
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	9f 90       	pop	r9
 ae8:	8f 90       	pop	r8
 aea:	08 95       	ret

00000aec <__udivmod64>:
 aec:	88 24       	eor	r8, r8
 aee:	99 24       	eor	r9, r9
 af0:	f4 01       	movw	r30, r8
 af2:	e4 01       	movw	r28, r8
 af4:	b0 e4       	ldi	r27, 0x40	; 64
 af6:	9f 93       	push	r25
 af8:	aa 27       	eor	r26, r26
 afa:	9a 15       	cp	r25, r10
 afc:	8b 04       	cpc	r8, r11
 afe:	9c 04       	cpc	r9, r12
 b00:	ed 05       	cpc	r30, r13
 b02:	fe 05       	cpc	r31, r14
 b04:	cf 05       	cpc	r28, r15
 b06:	d0 07       	cpc	r29, r16
 b08:	a1 07       	cpc	r26, r17
 b0a:	98 f4       	brcc	.+38     	; 0xb32 <__udivmod64+0x46>
 b0c:	ad 2f       	mov	r26, r29
 b0e:	dc 2f       	mov	r29, r28
 b10:	cf 2f       	mov	r28, r31
 b12:	fe 2f       	mov	r31, r30
 b14:	e9 2d       	mov	r30, r9
 b16:	98 2c       	mov	r9, r8
 b18:	89 2e       	mov	r8, r25
 b1a:	98 2f       	mov	r25, r24
 b1c:	87 2f       	mov	r24, r23
 b1e:	76 2f       	mov	r23, r22
 b20:	65 2f       	mov	r22, r21
 b22:	54 2f       	mov	r21, r20
 b24:	43 2f       	mov	r20, r19
 b26:	32 2f       	mov	r19, r18
 b28:	22 27       	eor	r18, r18
 b2a:	b8 50       	subi	r27, 0x08	; 8
 b2c:	31 f7       	brne	.-52     	; 0xafa <__udivmod64+0xe>
 b2e:	bf 91       	pop	r27
 b30:	27 c0       	rjmp	.+78     	; 0xb80 <__udivmod64+0x94>
 b32:	1b 2e       	mov	r1, r27
 b34:	bf 91       	pop	r27
 b36:	bb 27       	eor	r27, r27
 b38:	22 0f       	add	r18, r18
 b3a:	33 1f       	adc	r19, r19
 b3c:	44 1f       	adc	r20, r20
 b3e:	55 1f       	adc	r21, r21
 b40:	66 1f       	adc	r22, r22
 b42:	77 1f       	adc	r23, r23
 b44:	88 1f       	adc	r24, r24
 b46:	99 1f       	adc	r25, r25
 b48:	88 1c       	adc	r8, r8
 b4a:	99 1c       	adc	r9, r9
 b4c:	ee 1f       	adc	r30, r30
 b4e:	ff 1f       	adc	r31, r31
 b50:	cc 1f       	adc	r28, r28
 b52:	dd 1f       	adc	r29, r29
 b54:	aa 1f       	adc	r26, r26
 b56:	bb 1f       	adc	r27, r27
 b58:	8a 14       	cp	r8, r10
 b5a:	9b 04       	cpc	r9, r11
 b5c:	ec 05       	cpc	r30, r12
 b5e:	fd 05       	cpc	r31, r13
 b60:	ce 05       	cpc	r28, r14
 b62:	df 05       	cpc	r29, r15
 b64:	a0 07       	cpc	r26, r16
 b66:	b1 07       	cpc	r27, r17
 b68:	48 f0       	brcs	.+18     	; 0xb7c <__udivmod64+0x90>
 b6a:	8a 18       	sub	r8, r10
 b6c:	9b 08       	sbc	r9, r11
 b6e:	ec 09       	sbc	r30, r12
 b70:	fd 09       	sbc	r31, r13
 b72:	ce 09       	sbc	r28, r14
 b74:	df 09       	sbc	r29, r15
 b76:	a0 0b       	sbc	r26, r16
 b78:	b1 0b       	sbc	r27, r17
 b7a:	21 60       	ori	r18, 0x01	; 1
 b7c:	1a 94       	dec	r1
 b7e:	e1 f6       	brne	.-72     	; 0xb38 <__udivmod64+0x4c>
 b80:	2e f4       	brtc	.+10     	; 0xb8c <__udivmod64+0xa0>
 b82:	94 01       	movw	r18, r8
 b84:	af 01       	movw	r20, r30
 b86:	be 01       	movw	r22, r28
 b88:	cd 01       	movw	r24, r26
 b8a:	00 0c       	add	r0, r0
 b8c:	08 95       	ret

00000b8e <__adddi3>:
 b8e:	2a 0d       	add	r18, r10
 b90:	3b 1d       	adc	r19, r11
 b92:	4c 1d       	adc	r20, r12
 b94:	5d 1d       	adc	r21, r13
 b96:	6e 1d       	adc	r22, r14
 b98:	7f 1d       	adc	r23, r15
 b9a:	80 1f       	adc	r24, r16
 b9c:	91 1f       	adc	r25, r17
 b9e:	08 95       	ret

00000ba0 <__cmpdi2_s8>:
 ba0:	00 24       	eor	r0, r0
 ba2:	a7 fd       	sbrc	r26, 7
 ba4:	00 94       	com	r0
 ba6:	2a 17       	cp	r18, r26
 ba8:	30 05       	cpc	r19, r0
 baa:	40 05       	cpc	r20, r0
 bac:	50 05       	cpc	r21, r0
 bae:	60 05       	cpc	r22, r0
 bb0:	70 05       	cpc	r23, r0
 bb2:	80 05       	cpc	r24, r0
 bb4:	90 05       	cpc	r25, r0
 bb6:	08 95       	ret

00000bb8 <__umulhisi3>:
 bb8:	a2 9f       	mul	r26, r18
 bba:	b0 01       	movw	r22, r0
 bbc:	b3 9f       	mul	r27, r19
 bbe:	c0 01       	movw	r24, r0
 bc0:	a3 9f       	mul	r26, r19
 bc2:	70 0d       	add	r23, r0
 bc4:	81 1d       	adc	r24, r1
 bc6:	11 24       	eor	r1, r1
 bc8:	91 1d       	adc	r25, r1
 bca:	b2 9f       	mul	r27, r18
 bcc:	70 0d       	add	r23, r0
 bce:	81 1d       	adc	r24, r1
 bd0:	11 24       	eor	r1, r1
 bd2:	91 1d       	adc	r25, r1
 bd4:	08 95       	ret

00000bd6 <__divsf3>:
 bd6:	0c d0       	rcall	.+24     	; 0xbf0 <__divsf3x>
 bd8:	e6 c0       	rjmp	.+460    	; 0xda6 <__fp_round>
 bda:	de d0       	rcall	.+444    	; 0xd98 <__fp_pscB>
 bdc:	40 f0       	brcs	.+16     	; 0xbee <__divsf3+0x18>
 bde:	d5 d0       	rcall	.+426    	; 0xd8a <__fp_pscA>
 be0:	30 f0       	brcs	.+12     	; 0xbee <__divsf3+0x18>
 be2:	21 f4       	brne	.+8      	; 0xbec <__divsf3+0x16>
 be4:	5f 3f       	cpi	r21, 0xFF	; 255
 be6:	19 f0       	breq	.+6      	; 0xbee <__divsf3+0x18>
 be8:	c7 c0       	rjmp	.+398    	; 0xd78 <__fp_inf>
 bea:	51 11       	cpse	r21, r1
 bec:	10 c1       	rjmp	.+544    	; 0xe0e <__fp_szero>
 bee:	ca c0       	rjmp	.+404    	; 0xd84 <__fp_nan>

00000bf0 <__divsf3x>:
 bf0:	eb d0       	rcall	.+470    	; 0xdc8 <__fp_split3>
 bf2:	98 f3       	brcs	.-26     	; 0xbda <__divsf3+0x4>

00000bf4 <__divsf3_pse>:
 bf4:	99 23       	and	r25, r25
 bf6:	c9 f3       	breq	.-14     	; 0xbea <__divsf3+0x14>
 bf8:	55 23       	and	r21, r21
 bfa:	b1 f3       	breq	.-20     	; 0xbe8 <__divsf3+0x12>
 bfc:	95 1b       	sub	r25, r21
 bfe:	55 0b       	sbc	r21, r21
 c00:	bb 27       	eor	r27, r27
 c02:	aa 27       	eor	r26, r26
 c04:	62 17       	cp	r22, r18
 c06:	73 07       	cpc	r23, r19
 c08:	84 07       	cpc	r24, r20
 c0a:	38 f0       	brcs	.+14     	; 0xc1a <__divsf3_pse+0x26>
 c0c:	9f 5f       	subi	r25, 0xFF	; 255
 c0e:	5f 4f       	sbci	r21, 0xFF	; 255
 c10:	22 0f       	add	r18, r18
 c12:	33 1f       	adc	r19, r19
 c14:	44 1f       	adc	r20, r20
 c16:	aa 1f       	adc	r26, r26
 c18:	a9 f3       	breq	.-22     	; 0xc04 <__divsf3_pse+0x10>
 c1a:	33 d0       	rcall	.+102    	; 0xc82 <__divsf3_pse+0x8e>
 c1c:	0e 2e       	mov	r0, r30
 c1e:	3a f0       	brmi	.+14     	; 0xc2e <__divsf3_pse+0x3a>
 c20:	e0 e8       	ldi	r30, 0x80	; 128
 c22:	30 d0       	rcall	.+96     	; 0xc84 <__divsf3_pse+0x90>
 c24:	91 50       	subi	r25, 0x01	; 1
 c26:	50 40       	sbci	r21, 0x00	; 0
 c28:	e6 95       	lsr	r30
 c2a:	00 1c       	adc	r0, r0
 c2c:	ca f7       	brpl	.-14     	; 0xc20 <__divsf3_pse+0x2c>
 c2e:	29 d0       	rcall	.+82     	; 0xc82 <__divsf3_pse+0x8e>
 c30:	fe 2f       	mov	r31, r30
 c32:	27 d0       	rcall	.+78     	; 0xc82 <__divsf3_pse+0x8e>
 c34:	66 0f       	add	r22, r22
 c36:	77 1f       	adc	r23, r23
 c38:	88 1f       	adc	r24, r24
 c3a:	bb 1f       	adc	r27, r27
 c3c:	26 17       	cp	r18, r22
 c3e:	37 07       	cpc	r19, r23
 c40:	48 07       	cpc	r20, r24
 c42:	ab 07       	cpc	r26, r27
 c44:	b0 e8       	ldi	r27, 0x80	; 128
 c46:	09 f0       	breq	.+2      	; 0xc4a <__divsf3_pse+0x56>
 c48:	bb 0b       	sbc	r27, r27
 c4a:	80 2d       	mov	r24, r0
 c4c:	bf 01       	movw	r22, r30
 c4e:	ff 27       	eor	r31, r31
 c50:	93 58       	subi	r25, 0x83	; 131
 c52:	5f 4f       	sbci	r21, 0xFF	; 255
 c54:	2a f0       	brmi	.+10     	; 0xc60 <__divsf3_pse+0x6c>
 c56:	9e 3f       	cpi	r25, 0xFE	; 254
 c58:	51 05       	cpc	r21, r1
 c5a:	68 f0       	brcs	.+26     	; 0xc76 <__divsf3_pse+0x82>
 c5c:	8d c0       	rjmp	.+282    	; 0xd78 <__fp_inf>
 c5e:	d7 c0       	rjmp	.+430    	; 0xe0e <__fp_szero>
 c60:	5f 3f       	cpi	r21, 0xFF	; 255
 c62:	ec f3       	brlt	.-6      	; 0xc5e <__divsf3_pse+0x6a>
 c64:	98 3e       	cpi	r25, 0xE8	; 232
 c66:	dc f3       	brlt	.-10     	; 0xc5e <__divsf3_pse+0x6a>
 c68:	86 95       	lsr	r24
 c6a:	77 95       	ror	r23
 c6c:	67 95       	ror	r22
 c6e:	b7 95       	ror	r27
 c70:	f7 95       	ror	r31
 c72:	9f 5f       	subi	r25, 0xFF	; 255
 c74:	c9 f7       	brne	.-14     	; 0xc68 <__divsf3_pse+0x74>
 c76:	88 0f       	add	r24, r24
 c78:	91 1d       	adc	r25, r1
 c7a:	96 95       	lsr	r25
 c7c:	87 95       	ror	r24
 c7e:	97 f9       	bld	r25, 7
 c80:	08 95       	ret
 c82:	e1 e0       	ldi	r30, 0x01	; 1
 c84:	66 0f       	add	r22, r22
 c86:	77 1f       	adc	r23, r23
 c88:	88 1f       	adc	r24, r24
 c8a:	bb 1f       	adc	r27, r27
 c8c:	62 17       	cp	r22, r18
 c8e:	73 07       	cpc	r23, r19
 c90:	84 07       	cpc	r24, r20
 c92:	ba 07       	cpc	r27, r26
 c94:	20 f0       	brcs	.+8      	; 0xc9e <__divsf3_pse+0xaa>
 c96:	62 1b       	sub	r22, r18
 c98:	73 0b       	sbc	r23, r19
 c9a:	84 0b       	sbc	r24, r20
 c9c:	ba 0b       	sbc	r27, r26
 c9e:	ee 1f       	adc	r30, r30
 ca0:	88 f7       	brcc	.-30     	; 0xc84 <__divsf3_pse+0x90>
 ca2:	e0 95       	com	r30
 ca4:	08 95       	ret

00000ca6 <__fixunssfsi>:
 ca6:	98 d0       	rcall	.+304    	; 0xdd8 <__fp_splitA>
 ca8:	88 f0       	brcs	.+34     	; 0xccc <__fixunssfsi+0x26>
 caa:	9f 57       	subi	r25, 0x7F	; 127
 cac:	90 f0       	brcs	.+36     	; 0xcd2 <__fixunssfsi+0x2c>
 cae:	b9 2f       	mov	r27, r25
 cb0:	99 27       	eor	r25, r25
 cb2:	b7 51       	subi	r27, 0x17	; 23
 cb4:	a0 f0       	brcs	.+40     	; 0xcde <__fixunssfsi+0x38>
 cb6:	d1 f0       	breq	.+52     	; 0xcec <__fixunssfsi+0x46>
 cb8:	66 0f       	add	r22, r22
 cba:	77 1f       	adc	r23, r23
 cbc:	88 1f       	adc	r24, r24
 cbe:	99 1f       	adc	r25, r25
 cc0:	1a f0       	brmi	.+6      	; 0xcc8 <__fixunssfsi+0x22>
 cc2:	ba 95       	dec	r27
 cc4:	c9 f7       	brne	.-14     	; 0xcb8 <__fixunssfsi+0x12>
 cc6:	12 c0       	rjmp	.+36     	; 0xcec <__fixunssfsi+0x46>
 cc8:	b1 30       	cpi	r27, 0x01	; 1
 cca:	81 f0       	breq	.+32     	; 0xcec <__fixunssfsi+0x46>
 ccc:	9f d0       	rcall	.+318    	; 0xe0c <__fp_zero>
 cce:	b1 e0       	ldi	r27, 0x01	; 1
 cd0:	08 95       	ret
 cd2:	9c c0       	rjmp	.+312    	; 0xe0c <__fp_zero>
 cd4:	67 2f       	mov	r22, r23
 cd6:	78 2f       	mov	r23, r24
 cd8:	88 27       	eor	r24, r24
 cda:	b8 5f       	subi	r27, 0xF8	; 248
 cdc:	39 f0       	breq	.+14     	; 0xcec <__fixunssfsi+0x46>
 cde:	b9 3f       	cpi	r27, 0xF9	; 249
 ce0:	cc f3       	brlt	.-14     	; 0xcd4 <__fixunssfsi+0x2e>
 ce2:	86 95       	lsr	r24
 ce4:	77 95       	ror	r23
 ce6:	67 95       	ror	r22
 ce8:	b3 95       	inc	r27
 cea:	d9 f7       	brne	.-10     	; 0xce2 <__fixunssfsi+0x3c>
 cec:	3e f4       	brtc	.+14     	; 0xcfc <__fixunssfsi+0x56>
 cee:	90 95       	com	r25
 cf0:	80 95       	com	r24
 cf2:	70 95       	com	r23
 cf4:	61 95       	neg	r22
 cf6:	7f 4f       	sbci	r23, 0xFF	; 255
 cf8:	8f 4f       	sbci	r24, 0xFF	; 255
 cfa:	9f 4f       	sbci	r25, 0xFF	; 255
 cfc:	08 95       	ret

00000cfe <__floatunsisf>:
 cfe:	e8 94       	clt
 d00:	09 c0       	rjmp	.+18     	; 0xd14 <__floatsisf+0x12>

00000d02 <__floatsisf>:
 d02:	97 fb       	bst	r25, 7
 d04:	3e f4       	brtc	.+14     	; 0xd14 <__floatsisf+0x12>
 d06:	90 95       	com	r25
 d08:	80 95       	com	r24
 d0a:	70 95       	com	r23
 d0c:	61 95       	neg	r22
 d0e:	7f 4f       	sbci	r23, 0xFF	; 255
 d10:	8f 4f       	sbci	r24, 0xFF	; 255
 d12:	9f 4f       	sbci	r25, 0xFF	; 255
 d14:	99 23       	and	r25, r25
 d16:	a9 f0       	breq	.+42     	; 0xd42 <__floatsisf+0x40>
 d18:	f9 2f       	mov	r31, r25
 d1a:	96 e9       	ldi	r25, 0x96	; 150
 d1c:	bb 27       	eor	r27, r27
 d1e:	93 95       	inc	r25
 d20:	f6 95       	lsr	r31
 d22:	87 95       	ror	r24
 d24:	77 95       	ror	r23
 d26:	67 95       	ror	r22
 d28:	b7 95       	ror	r27
 d2a:	f1 11       	cpse	r31, r1
 d2c:	f8 cf       	rjmp	.-16     	; 0xd1e <__floatsisf+0x1c>
 d2e:	fa f4       	brpl	.+62     	; 0xd6e <__floatsisf+0x6c>
 d30:	bb 0f       	add	r27, r27
 d32:	11 f4       	brne	.+4      	; 0xd38 <__floatsisf+0x36>
 d34:	60 ff       	sbrs	r22, 0
 d36:	1b c0       	rjmp	.+54     	; 0xd6e <__floatsisf+0x6c>
 d38:	6f 5f       	subi	r22, 0xFF	; 255
 d3a:	7f 4f       	sbci	r23, 0xFF	; 255
 d3c:	8f 4f       	sbci	r24, 0xFF	; 255
 d3e:	9f 4f       	sbci	r25, 0xFF	; 255
 d40:	16 c0       	rjmp	.+44     	; 0xd6e <__floatsisf+0x6c>
 d42:	88 23       	and	r24, r24
 d44:	11 f0       	breq	.+4      	; 0xd4a <__floatsisf+0x48>
 d46:	96 e9       	ldi	r25, 0x96	; 150
 d48:	11 c0       	rjmp	.+34     	; 0xd6c <__floatsisf+0x6a>
 d4a:	77 23       	and	r23, r23
 d4c:	21 f0       	breq	.+8      	; 0xd56 <__floatsisf+0x54>
 d4e:	9e e8       	ldi	r25, 0x8E	; 142
 d50:	87 2f       	mov	r24, r23
 d52:	76 2f       	mov	r23, r22
 d54:	05 c0       	rjmp	.+10     	; 0xd60 <__floatsisf+0x5e>
 d56:	66 23       	and	r22, r22
 d58:	71 f0       	breq	.+28     	; 0xd76 <__floatsisf+0x74>
 d5a:	96 e8       	ldi	r25, 0x86	; 134
 d5c:	86 2f       	mov	r24, r22
 d5e:	70 e0       	ldi	r23, 0x00	; 0
 d60:	60 e0       	ldi	r22, 0x00	; 0
 d62:	2a f0       	brmi	.+10     	; 0xd6e <__floatsisf+0x6c>
 d64:	9a 95       	dec	r25
 d66:	66 0f       	add	r22, r22
 d68:	77 1f       	adc	r23, r23
 d6a:	88 1f       	adc	r24, r24
 d6c:	da f7       	brpl	.-10     	; 0xd64 <__floatsisf+0x62>
 d6e:	88 0f       	add	r24, r24
 d70:	96 95       	lsr	r25
 d72:	87 95       	ror	r24
 d74:	97 f9       	bld	r25, 7
 d76:	08 95       	ret

00000d78 <__fp_inf>:
 d78:	97 f9       	bld	r25, 7
 d7a:	9f 67       	ori	r25, 0x7F	; 127
 d7c:	80 e8       	ldi	r24, 0x80	; 128
 d7e:	70 e0       	ldi	r23, 0x00	; 0
 d80:	60 e0       	ldi	r22, 0x00	; 0
 d82:	08 95       	ret

00000d84 <__fp_nan>:
 d84:	9f ef       	ldi	r25, 0xFF	; 255
 d86:	80 ec       	ldi	r24, 0xC0	; 192
 d88:	08 95       	ret

00000d8a <__fp_pscA>:
 d8a:	00 24       	eor	r0, r0
 d8c:	0a 94       	dec	r0
 d8e:	16 16       	cp	r1, r22
 d90:	17 06       	cpc	r1, r23
 d92:	18 06       	cpc	r1, r24
 d94:	09 06       	cpc	r0, r25
 d96:	08 95       	ret

00000d98 <__fp_pscB>:
 d98:	00 24       	eor	r0, r0
 d9a:	0a 94       	dec	r0
 d9c:	12 16       	cp	r1, r18
 d9e:	13 06       	cpc	r1, r19
 da0:	14 06       	cpc	r1, r20
 da2:	05 06       	cpc	r0, r21
 da4:	08 95       	ret

00000da6 <__fp_round>:
 da6:	09 2e       	mov	r0, r25
 da8:	03 94       	inc	r0
 daa:	00 0c       	add	r0, r0
 dac:	11 f4       	brne	.+4      	; 0xdb2 <__fp_round+0xc>
 dae:	88 23       	and	r24, r24
 db0:	52 f0       	brmi	.+20     	; 0xdc6 <__fp_round+0x20>
 db2:	bb 0f       	add	r27, r27
 db4:	40 f4       	brcc	.+16     	; 0xdc6 <__fp_round+0x20>
 db6:	bf 2b       	or	r27, r31
 db8:	11 f4       	brne	.+4      	; 0xdbe <__fp_round+0x18>
 dba:	60 ff       	sbrs	r22, 0
 dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <__fp_round+0x20>
 dbe:	6f 5f       	subi	r22, 0xFF	; 255
 dc0:	7f 4f       	sbci	r23, 0xFF	; 255
 dc2:	8f 4f       	sbci	r24, 0xFF	; 255
 dc4:	9f 4f       	sbci	r25, 0xFF	; 255
 dc6:	08 95       	ret

00000dc8 <__fp_split3>:
 dc8:	57 fd       	sbrc	r21, 7
 dca:	90 58       	subi	r25, 0x80	; 128
 dcc:	44 0f       	add	r20, r20
 dce:	55 1f       	adc	r21, r21
 dd0:	59 f0       	breq	.+22     	; 0xde8 <__fp_splitA+0x10>
 dd2:	5f 3f       	cpi	r21, 0xFF	; 255
 dd4:	71 f0       	breq	.+28     	; 0xdf2 <__fp_splitA+0x1a>
 dd6:	47 95       	ror	r20

00000dd8 <__fp_splitA>:
 dd8:	88 0f       	add	r24, r24
 dda:	97 fb       	bst	r25, 7
 ddc:	99 1f       	adc	r25, r25
 dde:	61 f0       	breq	.+24     	; 0xdf8 <__fp_splitA+0x20>
 de0:	9f 3f       	cpi	r25, 0xFF	; 255
 de2:	79 f0       	breq	.+30     	; 0xe02 <__fp_splitA+0x2a>
 de4:	87 95       	ror	r24
 de6:	08 95       	ret
 de8:	12 16       	cp	r1, r18
 dea:	13 06       	cpc	r1, r19
 dec:	14 06       	cpc	r1, r20
 dee:	55 1f       	adc	r21, r21
 df0:	f2 cf       	rjmp	.-28     	; 0xdd6 <__fp_split3+0xe>
 df2:	46 95       	lsr	r20
 df4:	f1 df       	rcall	.-30     	; 0xdd8 <__fp_splitA>
 df6:	08 c0       	rjmp	.+16     	; 0xe08 <__fp_splitA+0x30>
 df8:	16 16       	cp	r1, r22
 dfa:	17 06       	cpc	r1, r23
 dfc:	18 06       	cpc	r1, r24
 dfe:	99 1f       	adc	r25, r25
 e00:	f1 cf       	rjmp	.-30     	; 0xde4 <__fp_splitA+0xc>
 e02:	86 95       	lsr	r24
 e04:	71 05       	cpc	r23, r1
 e06:	61 05       	cpc	r22, r1
 e08:	08 94       	sec
 e0a:	08 95       	ret

00000e0c <__fp_zero>:
 e0c:	e8 94       	clt

00000e0e <__fp_szero>:
 e0e:	bb 27       	eor	r27, r27
 e10:	66 27       	eor	r22, r22
 e12:	77 27       	eor	r23, r23
 e14:	cb 01       	movw	r24, r22
 e16:	97 f9       	bld	r25, 7
 e18:	08 95       	ret

00000e1a <__mulsf3>:
 e1a:	0b d0       	rcall	.+22     	; 0xe32 <__mulsf3x>
 e1c:	c4 cf       	rjmp	.-120    	; 0xda6 <__fp_round>
 e1e:	b5 df       	rcall	.-150    	; 0xd8a <__fp_pscA>
 e20:	28 f0       	brcs	.+10     	; 0xe2c <__mulsf3+0x12>
 e22:	ba df       	rcall	.-140    	; 0xd98 <__fp_pscB>
 e24:	18 f0       	brcs	.+6      	; 0xe2c <__mulsf3+0x12>
 e26:	95 23       	and	r25, r21
 e28:	09 f0       	breq	.+2      	; 0xe2c <__mulsf3+0x12>
 e2a:	a6 cf       	rjmp	.-180    	; 0xd78 <__fp_inf>
 e2c:	ab cf       	rjmp	.-170    	; 0xd84 <__fp_nan>
 e2e:	11 24       	eor	r1, r1
 e30:	ee cf       	rjmp	.-36     	; 0xe0e <__fp_szero>

00000e32 <__mulsf3x>:
 e32:	ca df       	rcall	.-108    	; 0xdc8 <__fp_split3>
 e34:	a0 f3       	brcs	.-24     	; 0xe1e <__mulsf3+0x4>

00000e36 <__mulsf3_pse>:
 e36:	95 9f       	mul	r25, r21
 e38:	d1 f3       	breq	.-12     	; 0xe2e <__mulsf3+0x14>
 e3a:	95 0f       	add	r25, r21
 e3c:	50 e0       	ldi	r21, 0x00	; 0
 e3e:	55 1f       	adc	r21, r21
 e40:	62 9f       	mul	r22, r18
 e42:	f0 01       	movw	r30, r0
 e44:	72 9f       	mul	r23, r18
 e46:	bb 27       	eor	r27, r27
 e48:	f0 0d       	add	r31, r0
 e4a:	b1 1d       	adc	r27, r1
 e4c:	63 9f       	mul	r22, r19
 e4e:	aa 27       	eor	r26, r26
 e50:	f0 0d       	add	r31, r0
 e52:	b1 1d       	adc	r27, r1
 e54:	aa 1f       	adc	r26, r26
 e56:	64 9f       	mul	r22, r20
 e58:	66 27       	eor	r22, r22
 e5a:	b0 0d       	add	r27, r0
 e5c:	a1 1d       	adc	r26, r1
 e5e:	66 1f       	adc	r22, r22
 e60:	82 9f       	mul	r24, r18
 e62:	22 27       	eor	r18, r18
 e64:	b0 0d       	add	r27, r0
 e66:	a1 1d       	adc	r26, r1
 e68:	62 1f       	adc	r22, r18
 e6a:	73 9f       	mul	r23, r19
 e6c:	b0 0d       	add	r27, r0
 e6e:	a1 1d       	adc	r26, r1
 e70:	62 1f       	adc	r22, r18
 e72:	83 9f       	mul	r24, r19
 e74:	a0 0d       	add	r26, r0
 e76:	61 1d       	adc	r22, r1
 e78:	22 1f       	adc	r18, r18
 e7a:	74 9f       	mul	r23, r20
 e7c:	33 27       	eor	r19, r19
 e7e:	a0 0d       	add	r26, r0
 e80:	61 1d       	adc	r22, r1
 e82:	23 1f       	adc	r18, r19
 e84:	84 9f       	mul	r24, r20
 e86:	60 0d       	add	r22, r0
 e88:	21 1d       	adc	r18, r1
 e8a:	82 2f       	mov	r24, r18
 e8c:	76 2f       	mov	r23, r22
 e8e:	6a 2f       	mov	r22, r26
 e90:	11 24       	eor	r1, r1
 e92:	9f 57       	subi	r25, 0x7F	; 127
 e94:	50 40       	sbci	r21, 0x00	; 0
 e96:	8a f0       	brmi	.+34     	; 0xeba <__mulsf3_pse+0x84>
 e98:	e1 f0       	breq	.+56     	; 0xed2 <__mulsf3_pse+0x9c>
 e9a:	88 23       	and	r24, r24
 e9c:	4a f0       	brmi	.+18     	; 0xeb0 <__mulsf3_pse+0x7a>
 e9e:	ee 0f       	add	r30, r30
 ea0:	ff 1f       	adc	r31, r31
 ea2:	bb 1f       	adc	r27, r27
 ea4:	66 1f       	adc	r22, r22
 ea6:	77 1f       	adc	r23, r23
 ea8:	88 1f       	adc	r24, r24
 eaa:	91 50       	subi	r25, 0x01	; 1
 eac:	50 40       	sbci	r21, 0x00	; 0
 eae:	a9 f7       	brne	.-22     	; 0xe9a <__mulsf3_pse+0x64>
 eb0:	9e 3f       	cpi	r25, 0xFE	; 254
 eb2:	51 05       	cpc	r21, r1
 eb4:	70 f0       	brcs	.+28     	; 0xed2 <__mulsf3_pse+0x9c>
 eb6:	60 cf       	rjmp	.-320    	; 0xd78 <__fp_inf>
 eb8:	aa cf       	rjmp	.-172    	; 0xe0e <__fp_szero>
 eba:	5f 3f       	cpi	r21, 0xFF	; 255
 ebc:	ec f3       	brlt	.-6      	; 0xeb8 <__mulsf3_pse+0x82>
 ebe:	98 3e       	cpi	r25, 0xE8	; 232
 ec0:	dc f3       	brlt	.-10     	; 0xeb8 <__mulsf3_pse+0x82>
 ec2:	86 95       	lsr	r24
 ec4:	77 95       	ror	r23
 ec6:	67 95       	ror	r22
 ec8:	b7 95       	ror	r27
 eca:	f7 95       	ror	r31
 ecc:	e7 95       	ror	r30
 ece:	9f 5f       	subi	r25, 0xFF	; 255
 ed0:	c1 f7       	brne	.-16     	; 0xec2 <__mulsf3_pse+0x8c>
 ed2:	fe 2b       	or	r31, r30
 ed4:	88 0f       	add	r24, r24
 ed6:	91 1d       	adc	r25, r1
 ed8:	96 95       	lsr	r25
 eda:	87 95       	ror	r24
 edc:	97 f9       	bld	r25, 7
 ede:	08 95       	ret

00000ee0 <_exit>:
 ee0:	f8 94       	cli

00000ee2 <__stop_program>:
 ee2:	ff cf       	rjmp	.-2      	; 0xee2 <__stop_program>
