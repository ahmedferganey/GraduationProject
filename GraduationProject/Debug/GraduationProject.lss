
GraduationProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000632  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000632  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080007a  0080007a  000006e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000710  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000170d  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d0  00000000  00000000  00001f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6c  00000000  00000000  00002909  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00003378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e6  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000120d  00000000  00000000  00003d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004f5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 17 03 	jmp	0x62e	; 0x62e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
uint8 var;
Std_ReturnType udtReturnValue = E_PENDING;

int main(void)
{
	udtReturnValue = LCD_udt4BitInitialize();
  92:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_udt4BitInitialize>
  96:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	udtReturnValue = KEYPAD_udtInit(&udtKeypadTarget);
  9a:	81 e6       	ldi	r24, 0x61	; 97
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 a1 01 	call	0x342	; 0x342 <KEYPAD_udtInit>
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

	while (1)
	{
		udtReturnValue = KEYPAD_udtGetPressedKey(&udtKeypadTarget, &var);
  a6:	6a e7       	ldi	r22, 0x7A	; 122
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	81 e6       	ldi	r24, 0x61	; 97
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <KEYPAD_udtGetPressedKey>
  b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		while (var == KPD_NO_PRESSED_VALUE)
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <main+0x36>
		{
			udtReturnValue = KEYPAD_udtGetPressedKey(&udtKeypadTarget, &var);
  b8:	6a e7       	ldi	r22, 0x7A	; 122
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	81 e6       	ldi	r24, 0x61	; 97
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <KEYPAD_udtGetPressedKey>
  c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	udtReturnValue = KEYPAD_udtInit(&udtKeypadTarget);

	while (1)
	{
		udtReturnValue = KEYPAD_udtGetPressedKey(&udtKeypadTarget, &var);
		while (var == KPD_NO_PRESSED_VALUE)
  c8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
  cc:	8f 3f       	cpi	r24, 0xFF	; 255
  ce:	a1 f3       	breq	.-24     	; 0xb8 <main+0x26>
		{
			udtReturnValue = KEYPAD_udtGetPressedKey(&udtKeypadTarget, &var);
		}
		LCD_udt4BitSendData(var);
  d0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LCD_udt4BitSendData>
	}
  d4:	e8 cf       	rjmp	.-48     	; 0xa6 <main+0x14>

000000d6 <DIO_udtSetPinDirection>:
	direction_t 	udtDirection
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	if (udtDirection == (DIO_DIRECTION_OUTPUT))
  d6:	41 30       	cpi	r20, 0x01	; 1
  d8:	c1 f5       	brne	.+112    	; 0x14a <DIO_udtSetPinDirection+0x74>
	{
		switch(udtPort)
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	91 f0       	breq	.+36     	; 0x102 <DIO_udtSetPinDirection+0x2c>
  de:	28 f0       	brcs	.+10     	; 0xea <DIO_udtSetPinDirection+0x14>
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	d9 f0       	breq	.+54     	; 0x11a <DIO_udtSetPinDirection+0x44>
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	29 f1       	breq	.+74     	; 0x132 <DIO_udtSetPinDirection+0x5c>
  e8:	6e c0       	rjmp	.+220    	; 0x1c6 <DIO_udtSetPinDirection+0xf0>
		{
			case PORTA_INDEX: SET_BIT(DIO->DDRA, udtPin);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_udtSetPinDirection+0x1e>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_udtSetPinDirection+0x1a>
  f8:	9a b3       	in	r25, 0x1a	; 26
  fa:	89 2b       	or	r24, r25
  fc:	8a bb       	out	0x1a, r24	; 26
			                  udtReturnValue = E_OK;
  fe:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 100:	08 95       	ret
			case PORTB_INDEX: SET_BIT(DIO->DDRB, udtPin);
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_udtSetPinDirection+0x36>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_udtSetPinDirection+0x32>
 110:	97 b3       	in	r25, 0x17	; 23
 112:	89 2b       	or	r24, r25
 114:	87 bb       	out	0x17, r24	; 23
			                  udtReturnValue = E_OK;
 116:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 118:	08 95       	ret
			case PORTC_INDEX: SET_BIT(DIO->DDRC, udtPin);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_udtSetPinDirection+0x4e>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_udtSetPinDirection+0x4a>
 128:	94 b3       	in	r25, 0x14	; 20
 12a:	89 2b       	or	r24, r25
 12c:	84 bb       	out	0x14, r24	; 20
			                  udtReturnValue = E_OK;
 12e:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 130:	08 95       	ret
			case PORTD_INDEX: SET_BIT(DIO->DDRD, udtPin);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_udtSetPinDirection+0x66>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_udtSetPinDirection+0x62>
 140:	91 b3       	in	r25, 0x11	; 17
 142:	89 2b       	or	r24, r25
 144:	81 bb       	out	0x11, r24	; 17
			                  udtReturnValue = E_OK;
 146:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 148:	08 95       	ret
			default:		  /*	!Comment: Do nothing	*/
			                  break;
		}
	}
	else if (udtDirection == (DIO_DIRECTION_INPUT))
 14a:	41 11       	cpse	r20, r1
 14c:	3e c0       	rjmp	.+124    	; 0x1ca <DIO_udtSetPinDirection+0xf4>
	{
		switch(udtPort)
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	99 f0       	breq	.+38     	; 0x178 <DIO_udtSetPinDirection+0xa2>
 152:	28 f0       	brcs	.+10     	; 0x15e <DIO_udtSetPinDirection+0x88>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	e9 f0       	breq	.+58     	; 0x192 <DIO_udtSetPinDirection+0xbc>
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	41 f1       	breq	.+80     	; 0x1ac <DIO_udtSetPinDirection+0xd6>
 15c:	38 c0       	rjmp	.+112    	; 0x1ce <DIO_udtSetPinDirection+0xf8>
		{
			case PORTA_INDEX: CLR_BIT(DIO->DDRA, udtPin);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_udtSetPinDirection+0x92>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_udtSetPinDirection+0x8e>
 16c:	80 95       	com	r24
 16e:	9a b3       	in	r25, 0x1a	; 26
 170:	89 23       	and	r24, r25
 172:	8a bb       	out	0x1a, r24	; 26
			                  udtReturnValue = E_OK;
 174:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 176:	08 95       	ret
			case PORTB_INDEX: CLR_BIT(DIO->DDRB, udtPin);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_udtSetPinDirection+0xac>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_udtSetPinDirection+0xa8>
 186:	80 95       	com	r24
 188:	97 b3       	in	r25, 0x17	; 23
 18a:	89 23       	and	r24, r25
 18c:	87 bb       	out	0x17, r24	; 23
			                  udtReturnValue = E_OK;
 18e:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 190:	08 95       	ret
			case PORTC_INDEX: CLR_BIT(DIO->DDRC, udtPin);
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_udtSetPinDirection+0xc6>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_udtSetPinDirection+0xc2>
 1a0:	80 95       	com	r24
 1a2:	94 b3       	in	r25, 0x14	; 20
 1a4:	89 23       	and	r24, r25
 1a6:	84 bb       	out	0x14, r24	; 20
			                  udtReturnValue = E_OK;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 1aa:	08 95       	ret
			case PORTD_INDEX: CLR_BIT(DIO->DDRD, udtPin);
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_udtSetPinDirection+0xe0>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_udtSetPinDirection+0xdc>
 1ba:	80 95       	com	r24
 1bc:	91 b3       	in	r25, 0x11	; 17
 1be:	89 23       	and	r24, r25
 1c0:	81 bb       	out	0x11, r24	; 17
			                  udtReturnValue = E_OK;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 1c4:	08 95       	ret
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	direction_t 	udtDirection
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	08 95       	ret
 1ce:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		/*	!Comment: Do nothing	*/
	}
	return udtReturnValue;
}
 1d0:	08 95       	ret

000001d2 <DIO_udtSetPinValue>:
	logic_t 		udtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	if (udtValue == DIO_HIGH)
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	c1 f5       	brne	.+112    	; 0x246 <DIO_udtSetPinValue+0x74>
	{
		switch(udtPort)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 f0       	breq	.+36     	; 0x1fe <DIO_udtSetPinValue+0x2c>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <DIO_udtSetPinValue+0x14>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	d9 f0       	breq	.+54     	; 0x216 <DIO_udtSetPinValue+0x44>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	29 f1       	breq	.+74     	; 0x22e <DIO_udtSetPinValue+0x5c>
 1e4:	6e c0       	rjmp	.+220    	; 0x2c2 <DIO_udtSetPinValue+0xf0>
		{
			case PORTA_INDEX: SET_BIT(DIO->PORTA, udtPin);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_udtSetPinValue+0x1e>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_udtSetPinValue+0x1a>
 1f4:	9b b3       	in	r25, 0x1b	; 27
 1f6:	89 2b       	or	r24, r25
 1f8:	8b bb       	out	0x1b, r24	; 27
			                  udtReturnValue = E_OK;
 1fa:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 1fc:	08 95       	ret
			case PORTB_INDEX: SET_BIT(DIO->PORTB, udtPin);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_udtSetPinValue+0x36>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_udtSetPinValue+0x32>
 20c:	98 b3       	in	r25, 0x18	; 24
 20e:	89 2b       	or	r24, r25
 210:	88 bb       	out	0x18, r24	; 24
			                  udtReturnValue = E_OK;
 212:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 214:	08 95       	ret
			case PORTC_INDEX: SET_BIT(DIO->PORTC, udtPin);
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_udtSetPinValue+0x4e>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_udtSetPinValue+0x4a>
 224:	95 b3       	in	r25, 0x15	; 21
 226:	89 2b       	or	r24, r25
 228:	85 bb       	out	0x15, r24	; 21
			                  udtReturnValue = E_OK;
 22a:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 22c:	08 95       	ret
			case PORTD_INDEX: SET_BIT(DIO->PORTD, udtPin);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_udtSetPinValue+0x66>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_udtSetPinValue+0x62>
 23c:	92 b3       	in	r25, 0x12	; 18
 23e:	89 2b       	or	r24, r25
 240:	82 bb       	out	0x12, r24	; 18
			                  udtReturnValue = E_OK;
 242:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 244:	08 95       	ret
			default:          /* !Comment: Do nothing */
			                  break;
		}
		
	}
	else if(udtValue == DIO_LOW)
 246:	41 11       	cpse	r20, r1
 248:	3e c0       	rjmp	.+124    	; 0x2c6 <DIO_udtSetPinValue+0xf4>
	{
		switch(udtPort)
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	99 f0       	breq	.+38     	; 0x274 <DIO_udtSetPinValue+0xa2>
 24e:	28 f0       	brcs	.+10     	; 0x25a <DIO_udtSetPinValue+0x88>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	e9 f0       	breq	.+58     	; 0x28e <DIO_udtSetPinValue+0xbc>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	41 f1       	breq	.+80     	; 0x2a8 <DIO_udtSetPinValue+0xd6>
 258:	38 c0       	rjmp	.+112    	; 0x2ca <DIO_udtSetPinValue+0xf8>
		{
			case PORTA_INDEX: CLR_BIT(DIO->PORTA, udtPin);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_udtSetPinValue+0x92>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_udtSetPinValue+0x8e>
 268:	80 95       	com	r24
 26a:	9b b3       	in	r25, 0x1b	; 27
 26c:	89 23       	and	r24, r25
 26e:	8b bb       	out	0x1b, r24	; 27
							  udtReturnValue = E_OK;
 270:	80 e0       	ldi	r24, 0x00	; 0
							  break;
 272:	08 95       	ret
			case PORTB_INDEX: CLR_BIT(DIO->PORTB, udtPin);
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_udtSetPinValue+0xac>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_udtSetPinValue+0xa8>
 282:	80 95       	com	r24
 284:	98 b3       	in	r25, 0x18	; 24
 286:	89 23       	and	r24, r25
 288:	88 bb       	out	0x18, r24	; 24
							  udtReturnValue = E_OK;
 28a:	80 e0       	ldi	r24, 0x00	; 0
							  break;
 28c:	08 95       	ret
			case PORTC_INDEX: CLR_BIT(DIO->PORTC, udtPin);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_udtSetPinValue+0xc6>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_udtSetPinValue+0xc2>
 29c:	80 95       	com	r24
 29e:	95 b3       	in	r25, 0x15	; 21
 2a0:	89 23       	and	r24, r25
 2a2:	85 bb       	out	0x15, r24	; 21
						      udtReturnValue = E_OK;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
							  break;
 2a6:	08 95       	ret
			case PORTD_INDEX: CLR_BIT(DIO->PORTD, udtPin);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_udtSetPinValue+0xe0>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_udtSetPinValue+0xdc>
 2b6:	80 95       	com	r24
 2b8:	92 b3       	in	r25, 0x12	; 18
 2ba:	89 23       	and	r24, r25
 2bc:	82 bb       	out	0x12, r24	; 18
							  udtReturnValue = E_OK;
 2be:	80 e0       	ldi	r24, 0x00	; 0
							  break;
 2c0:	08 95       	ret
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	logic_t 		udtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	08 95       	ret
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	08 95       	ret
 2ca:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		/* !Comment: Do nothing */
	}
	return udtReturnValue;
}
 2cc:	08 95       	ret

000002ce <DIO_udtGetPinValue>:
	logic_t* 		pudtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	switch(udtPort)
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	91 f0       	breq	.+36     	; 0x2f6 <DIO_udtGetPinValue+0x28>
 2d2:	28 f0       	brcs	.+10     	; 0x2de <DIO_udtGetPinValue+0x10>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	d9 f0       	breq	.+54     	; 0x30e <DIO_udtGetPinValue+0x40>
 2d8:	83 30       	cpi	r24, 0x03	; 3
 2da:	29 f1       	breq	.+74     	; 0x326 <DIO_udtGetPinValue+0x58>
 2dc:	30 c0       	rjmp	.+96     	; 0x33e <DIO_udtGetPinValue+0x70>
	{
		case PORTA_INDEX: *pudtValue = GET_BIT(DIO->PINA, udtPin);
 2de:	89 b3       	in	r24, 0x19	; 25
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_udtGetPinValue+0x1a>
 2e4:	95 95       	asr	r25
 2e6:	87 95       	ror	r24
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_udtGetPinValue+0x16>
 2ec:	81 70       	andi	r24, 0x01	; 1
 2ee:	fa 01       	movw	r30, r20
 2f0:	80 83       	st	Z, r24
						  udtReturnValue = E_OK;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
						  break;
 2f4:	08 95       	ret
		case PORTB_INDEX: *pudtValue = GET_BIT(DIO->PINB, udtPin);
 2f6:	86 b3       	in	r24, 0x16	; 22
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_udtGetPinValue+0x32>
 2fc:	95 95       	asr	r25
 2fe:	87 95       	ror	r24
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_udtGetPinValue+0x2e>
 304:	81 70       	andi	r24, 0x01	; 1
 306:	fa 01       	movw	r30, r20
 308:	80 83       	st	Z, r24
						  udtReturnValue = E_OK;
 30a:	80 e0       	ldi	r24, 0x00	; 0
						  break;
 30c:	08 95       	ret
		case PORTC_INDEX: *pudtValue = GET_BIT(DIO->PINC, udtPin);
 30e:	83 b3       	in	r24, 0x13	; 19
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_udtGetPinValue+0x4a>
 314:	95 95       	asr	r25
 316:	87 95       	ror	r24
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_udtGetPinValue+0x46>
 31c:	81 70       	andi	r24, 0x01	; 1
 31e:	fa 01       	movw	r30, r20
 320:	80 83       	st	Z, r24
						  udtReturnValue = E_OK;
 322:	80 e0       	ldi	r24, 0x00	; 0
						  break;
 324:	08 95       	ret
		case PORTD_INDEX: *pudtValue = GET_BIT(DIO->PIND, udtPin);
 326:	80 b3       	in	r24, 0x10	; 16
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_udtGetPinValue+0x62>
 32c:	95 95       	asr	r25
 32e:	87 95       	ror	r24
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_udtGetPinValue+0x5e>
 334:	81 70       	andi	r24, 0x01	; 1
 336:	fa 01       	movw	r30, r20
 338:	80 83       	st	Z, r24
					      udtReturnValue = E_OK;
 33a:	80 e0       	ldi	r24, 0x00	; 0
					      break;
 33c:	08 95       	ret
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	logic_t* 		pudtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
 33e:	81 e0       	ldi	r24, 0x01	; 1
		default:		  /* !Comment: Do nothing */
					      break;
		
	}
	return udtReturnValue;
}
 340:	08 95       	ret

00000342 <KEYPAD_udtInit>:
/********************************************************************************************/
Std_ReturnType KEYPAD_udtInit
(
const keypad_t * pudtKeypadTarget
)
{
 342:	ef 92       	push	r14
 344:	ff 92       	push	r15
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
	Std_ReturnType udtReturnValue = E_OK;
    uint8 rows_counter		= ZERO_INIT; 
	uint8 columns_counter	= ZERO_INIT;
	
	if(NULL == pudtKeypadTarget)
 34c:	00 97       	sbiw	r24, 0x00	; 0
 34e:	d9 f1       	breq	.+118    	; 0x3c6 <KEYPAD_udtInit+0x84>
 350:	ec 01       	movw	r28, r24
 352:	10 e0       	ldi	r17, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	18 c0       	rjmp	.+48     	; 0x388 <KEYPAD_udtInit+0x46>
	else
	{
        for(rows_counter=ZERO_INIT; rows_counter<ROW_NUM; rows_counter++)
		{
			udtReturnValue = DIO_udtSetPinDirection(KEYPAD_PORT,
													((pudtKeypadTarget->keypad_row_pins[rows_counter].pin)),
 358:	7e 01       	movw	r14, r28
 35a:	e1 0e       	add	r14, r17
 35c:	f1 1c       	adc	r15, r1
 35e:	f7 01       	movw	r30, r14
 360:	60 81       	ld	r22, Z
 362:	66 95       	lsr	r22
 364:	66 95       	lsr	r22
 366:	66 95       	lsr	r22
 368:	67 70       	andi	r22, 0x07	; 7
	}
	else
	{
        for(rows_counter=ZERO_INIT; rows_counter<ROW_NUM; rows_counter++)
		{
			udtReturnValue = DIO_udtSetPinDirection(KEYPAD_PORT,
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_udtSetPinDirection>
													((pudtKeypadTarget->keypad_row_pins[rows_counter].pin)),
													DIO_DIRECTION_INPUT);	
			udtReturnValue = DIO_udtSetPinValue(KEYPAD_PORT, 
												((pudtKeypadTarget->keypad_row_pins[rows_counter].pin)), 
 372:	f7 01       	movw	r30, r14
 374:	60 81       	ld	r22, Z
 376:	66 95       	lsr	r22
 378:	66 95       	lsr	r22
 37a:	66 95       	lsr	r22
 37c:	67 70       	andi	r22, 0x07	; 7
        for(rows_counter=ZERO_INIT; rows_counter<ROW_NUM; rows_counter++)
		{
			udtReturnValue = DIO_udtSetPinDirection(KEYPAD_PORT,
													((pudtKeypadTarget->keypad_row_pins[rows_counter].pin)),
													DIO_DIRECTION_INPUT);	
			udtReturnValue = DIO_udtSetPinValue(KEYPAD_PORT, 
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	83 e0       	ldi	r24, 0x03	; 3
 382:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_udtSetPinValue>
	{
		udtReturnValue = E_NOT_OK;
	}
	else
	{
        for(rows_counter=ZERO_INIT; rows_counter<ROW_NUM; rows_counter++)
 386:	1f 5f       	subi	r17, 0xFF	; 255
 388:	14 30       	cpi	r17, 0x04	; 4
 38a:	30 f3       	brcs	.-52     	; 0x358 <KEYPAD_udtInit+0x16>
 38c:	10 e0       	ldi	r17, 0x00	; 0
 38e:	18 c0       	rjmp	.+48     	; 0x3c0 <KEYPAD_udtInit+0x7e>
												DIO_HIGH);
		}
        for(columns_counter=ZERO_INIT; columns_counter<COL_NUM; columns_counter++)
        {
	        udtReturnValue = DIO_udtSetPinDirection(KEYPAD_PORT,
													((pudtKeypadTarget->keypad_columns_pins[columns_counter].pin)),
 390:	7e 01       	movw	r14, r28
 392:	e1 0e       	add	r14, r17
 394:	f1 1c       	adc	r15, r1
 396:	f7 01       	movw	r30, r14
 398:	64 81       	ldd	r22, Z+4	; 0x04
 39a:	66 95       	lsr	r22
 39c:	66 95       	lsr	r22
 39e:	66 95       	lsr	r22
 3a0:	67 70       	andi	r22, 0x07	; 7
												((pudtKeypadTarget->keypad_row_pins[rows_counter].pin)), 
												DIO_HIGH);
		}
        for(columns_counter=ZERO_INIT; columns_counter<COL_NUM; columns_counter++)
        {
	        udtReturnValue = DIO_udtSetPinDirection(KEYPAD_PORT,
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_udtSetPinDirection>
													((pudtKeypadTarget->keypad_columns_pins[columns_counter].pin)),
													DIO_DIRECTION_OUTPUT);
	        udtReturnValue = DIO_udtSetPinValue(KEYPAD_PORT,
											    ((pudtKeypadTarget->keypad_columns_pins[columns_counter].pin)),
 3aa:	f7 01       	movw	r30, r14
 3ac:	64 81       	ldd	r22, Z+4	; 0x04
 3ae:	66 95       	lsr	r22
 3b0:	66 95       	lsr	r22
 3b2:	66 95       	lsr	r22
 3b4:	67 70       	andi	r22, 0x07	; 7
        for(columns_counter=ZERO_INIT; columns_counter<COL_NUM; columns_counter++)
        {
	        udtReturnValue = DIO_udtSetPinDirection(KEYPAD_PORT,
													((pudtKeypadTarget->keypad_columns_pins[columns_counter].pin)),
													DIO_DIRECTION_OUTPUT);
	        udtReturnValue = DIO_udtSetPinValue(KEYPAD_PORT,
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	83 e0       	ldi	r24, 0x03	; 3
 3ba:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_udtSetPinValue>
													DIO_DIRECTION_INPUT);	
			udtReturnValue = DIO_udtSetPinValue(KEYPAD_PORT, 
												((pudtKeypadTarget->keypad_row_pins[rows_counter].pin)), 
												DIO_HIGH);
		}
        for(columns_counter=ZERO_INIT; columns_counter<COL_NUM; columns_counter++)
 3be:	1f 5f       	subi	r17, 0xFF	; 255
 3c0:	14 30       	cpi	r17, 0x04	; 4
 3c2:	30 f3       	brcs	.-52     	; 0x390 <KEYPAD_udtInit+0x4e>
 3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <KEYPAD_udtInit+0x86>
    uint8 rows_counter		= ZERO_INIT; 
	uint8 columns_counter	= ZERO_INIT;
	
	if(NULL == pudtKeypadTarget)
	{
		udtReturnValue = E_NOT_OK;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
											    ((pudtKeypadTarget->keypad_columns_pins[columns_counter].pin)),
											    DIO_HIGH);
        }	
	}
	return udtReturnValue;
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	08 95       	ret

000003d4 <KEYPAD_udtGetPressedKey>:
Std_ReturnType KEYPAD_udtGetPressedKey
(
const keypad_t *pudtKeypadTarget, 
uint8 *value
)
{
 3d4:	7f 92       	push	r7
 3d6:	8f 92       	push	r8
 3d8:	9f 92       	push	r9
 3da:	af 92       	push	r10
 3dc:	bf 92       	push	r11
 3de:	cf 92       	push	r12
 3e0:	df 92       	push	r13
 3e2:	ef 92       	push	r14
 3e4:	ff 92       	push	r15
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	61 97       	sbiw	r28, 0x11	; 17
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
 3fe:	8c 01       	movw	r16, r24
	Std_ReturnType udtReturnValue = E_OK;
	uint8 u8ColumnID = ZERO_INIT;
	uint8 u8RowID	 = ZERO_INIT;
	logic_t udtPinValue;
	uint8 u8PressedKey = KPD_NO_PRESSED_VALUE;				/* !Comment: KPD_NO_PRESSED_VALUE = 0xff */
	uint8 u8KpdMatrix[ROW_NUM][COL_NUM]	=  KPD_BUTTONS;		/* !Comment: Actual values of KPD Button */
 400:	90 e1       	ldi	r25, 0x10	; 16
 402:	e9 e6       	ldi	r30, 0x69	; 105
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	de 01       	movw	r26, r28
 408:	12 96       	adiw	r26, 0x02	; 2
 40a:	01 90       	ld	r0, Z+
 40c:	0d 92       	st	X+, r0
 40e:	9a 95       	dec	r25
 410:	e1 f7       	brne	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	uint8 u8LocalCounter = ZERO_INIT;
	
	if((NULL == pudtKeypadTarget) || (NULL == value))
 412:	01 15       	cp	r16, r1
 414:	11 05       	cpc	r17, r1
 416:	09 f4       	brne	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	69 c0       	rjmp	.+210    	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 41a:	61 15       	cp	r22, r1
 41c:	71 05       	cpc	r23, r1
 41e:	09 f4       	brne	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 420:	67 c0       	rjmp	.+206    	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 422:	5b 01       	movw	r10, r22
 424:	81 2c       	mov	r8, r1
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	5c c0       	rjmp	.+184    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
		{
			/* !comment: logic high by default for input pins of columns*/			
			for(u8LocalCounter = ZERO_INIT; u8LocalCounter < COL_NUM; u8LocalCounter++)
			{
				udtReturnValue = DIO_udtSetPinValue(KEYPAD_PORT,
													((pudtKeypadTarget->keypad_columns_pins[u8LocalCounter].pin)),
 42a:	f8 01       	movw	r30, r16
 42c:	ef 0d       	add	r30, r15
 42e:	f1 1d       	adc	r31, r1
 430:	64 81       	ldd	r22, Z+4	; 0x04
 432:	66 95       	lsr	r22
 434:	66 95       	lsr	r22
 436:	66 95       	lsr	r22
 438:	67 70       	andi	r22, 0x07	; 7
		for (u8ColumnID = 0u; u8ColumnID < COL_NUM; u8ColumnID++)
		{
			/* !comment: logic high by default for input pins of columns*/			
			for(u8LocalCounter = ZERO_INIT; u8LocalCounter < COL_NUM; u8LocalCounter++)
			{
				udtReturnValue = DIO_udtSetPinValue(KEYPAD_PORT,
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_udtSetPinValue>
	else
	{
		for (u8ColumnID = 0u; u8ColumnID < COL_NUM; u8ColumnID++)
		{
			/* !comment: logic high by default for input pins of columns*/			
			for(u8LocalCounter = ZERO_INIT; u8LocalCounter < COL_NUM; u8LocalCounter++)
 442:	f3 94       	inc	r15
 444:	01 c0       	rjmp	.+2      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 446:	f1 2c       	mov	r15, r1
 448:	23 e0       	ldi	r18, 0x03	; 3
 44a:	2f 15       	cp	r18, r15
 44c:	70 f7       	brcc	.-36     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
													((pudtKeypadTarget->keypad_columns_pins[u8LocalCounter].pin)),
													DIO_HIGH);				
			}
			/* !comment: enable column X, it is logic high by default */
			udtReturnValue = DIO_udtSetPinValue(KEYPAD_PORT, 
												((pudtKeypadTarget->keypad_columns_pins[u8ColumnID].pin)), 
 44e:	c8 2c       	mov	r12, r8
 450:	d1 2c       	mov	r13, r1
 452:	f8 01       	movw	r30, r16
 454:	ec 0d       	add	r30, r12
 456:	fd 1d       	adc	r31, r13
 458:	64 81       	ldd	r22, Z+4	; 0x04
 45a:	66 95       	lsr	r22
 45c:	66 95       	lsr	r22
 45e:	66 95       	lsr	r22
 460:	67 70       	andi	r22, 0x07	; 7
				udtReturnValue = DIO_udtSetPinValue(KEYPAD_PORT,
													((pudtKeypadTarget->keypad_columns_pins[u8LocalCounter].pin)),
													DIO_HIGH);				
			}
			/* !comment: enable column X, it is logic high by default */
			udtReturnValue = DIO_udtSetPinValue(KEYPAD_PORT, 
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	83 e0       	ldi	r24, 0x03	; 3
 466:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_udtSetPinValue>
												((pudtKeypadTarget->keypad_columns_pins[u8ColumnID].pin)), 
												DIO_LOW);			
			/* !comment: iterate on the rows to get the pressed button */
			for(u8RowID = 0u; u8RowID < ROW_NUM; u8RowID++)
 46a:	91 2c       	mov	r9, r1
 46c:	36 c0       	rjmp	.+108    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
			{
				/* !comment: read row y */
				udtReturnValue = DIO_udtGetPinValue(KEYPAD_PORT,
													((pudtKeypadTarget->keypad_row_pins[u8RowID].pin)),
 46e:	e9 2c       	mov	r14, r9
 470:	f1 2c       	mov	r15, r1
 472:	f8 01       	movw	r30, r16
 474:	ee 0d       	add	r30, r14
 476:	ff 1d       	adc	r31, r15
 478:	60 81       	ld	r22, Z
 47a:	66 95       	lsr	r22
 47c:	66 95       	lsr	r22
 47e:	66 95       	lsr	r22
 480:	67 70       	andi	r22, 0x07	; 7
												DIO_LOW);			
			/* !comment: iterate on the rows to get the pressed button */
			for(u8RowID = 0u; u8RowID < ROW_NUM; u8RowID++)
			{
				/* !comment: read row y */
				udtReturnValue = DIO_udtGetPinValue(KEYPAD_PORT,
 482:	ae 01       	movw	r20, r28
 484:	4f 5f       	subi	r20, 0xFF	; 255
 486:	5f 4f       	sbci	r21, 0xFF	; 255
 488:	83 e0       	ldi	r24, 0x03	; 3
 48a:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_udtGetPinValue>
													((pudtKeypadTarget->keypad_row_pins[u8RowID].pin)),
													&udtPinValue);
				/* !comment: if row pin value is low */
				if(0 == udtPinValue)
 48e:	99 81       	ldd	r25, Y+1	; 0x01
 490:	91 11       	cpse	r25, r1
 492:	22 c0       	rjmp	.+68     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
				{
					/* !comment: Our key is found Row and column  */
					u8PressedKey = u8KpdMatrix[u8RowID][u8ColumnID];
 494:	f7 01       	movw	r30, r14
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	ee 0f       	add	r30, r30
 49c:	ff 1f       	adc	r31, r31
 49e:	21 e0       	ldi	r18, 0x01	; 1
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	2c 0f       	add	r18, r28
 4a4:	3d 1f       	adc	r19, r29
 4a6:	e2 0f       	add	r30, r18
 4a8:	f3 1f       	adc	r31, r19
 4aa:	ec 0d       	add	r30, r12
 4ac:	fd 1d       	adc	r31, r13
 4ae:	71 80       	ldd	r7, Z+1	; 0x01
					/* !comment: Key is found, to prevent printing selected number a lot of 
								 times so we wait here until released button & debouncing */
					while(0 == udtPinValue)
 4b0:	0e c0       	rjmp	.+28     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
					{
						udtReturnValue =  DIO_udtGetPinValue(KEYPAD_PORT,
															 ((pudtKeypadTarget->keypad_row_pins[u8RowID].pin)),
 4b2:	f8 01       	movw	r30, r16
 4b4:	ee 0d       	add	r30, r14
 4b6:	ff 1d       	adc	r31, r15
 4b8:	60 81       	ld	r22, Z
 4ba:	66 95       	lsr	r22
 4bc:	66 95       	lsr	r22
 4be:	66 95       	lsr	r22
 4c0:	67 70       	andi	r22, 0x07	; 7
					u8PressedKey = u8KpdMatrix[u8RowID][u8ColumnID];
					/* !comment: Key is found, to prevent printing selected number a lot of 
								 times so we wait here until released button & debouncing */
					while(0 == udtPinValue)
					{
						udtReturnValue =  DIO_udtGetPinValue(KEYPAD_PORT,
 4c2:	ae 01       	movw	r20, r28
 4c4:	4f 5f       	subi	r20, 0xFF	; 255
 4c6:	5f 4f       	sbci	r21, 0xFF	; 255
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_udtGetPinValue>
				{
					/* !comment: Our key is found Row and column  */
					u8PressedKey = u8KpdMatrix[u8RowID][u8ColumnID];
					/* !comment: Key is found, to prevent printing selected number a lot of 
								 times so we wait here until released button & debouncing */
					while(0 == udtPinValue)
 4ce:	99 81       	ldd	r25, Y+1	; 0x01
 4d0:	99 23       	and	r25, r25
 4d2:	79 f3       	breq	.-34     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
						udtReturnValue =  DIO_udtGetPinValue(KEYPAD_PORT,
															 ((pudtKeypadTarget->keypad_row_pins[u8RowID].pin)),
															 &udtPinValue);
					}
					/* !comment:   */
					*(value) = (uint8)u8PressedKey;
 4d4:	f5 01       	movw	r30, r10
 4d6:	70 82       	st	Z, r7
			/* !comment: enable column X, it is logic high by default */
			udtReturnValue = DIO_udtSetPinValue(KEYPAD_PORT, 
												((pudtKeypadTarget->keypad_columns_pins[u8ColumnID].pin)), 
												DIO_LOW);			
			/* !comment: iterate on the rows to get the pressed button */
			for(u8RowID = 0u; u8RowID < ROW_NUM; u8RowID++)
 4d8:	93 94       	inc	r9
 4da:	f3 e0       	ldi	r31, 0x03	; 3
 4dc:	f9 15       	cp	r31, r9
 4de:	38 f6       	brcc	.-114    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
	{
		udtReturnValue = E_NOT_OK;		
	}
	else
	{
		for (u8ColumnID = 0u; u8ColumnID < COL_NUM; u8ColumnID++)
 4e0:	83 94       	inc	r8
 4e2:	23 e0       	ldi	r18, 0x03	; 3
 4e4:	28 15       	cp	r18, r8
 4e6:	08 f0       	brcs	.+2      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4e8:	ae cf       	rjmp	.-164    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
	uint8 u8KpdMatrix[ROW_NUM][COL_NUM]	=  KPD_BUTTONS;		/* !Comment: Actual values of KPD Button */
	uint8 u8LocalCounter = ZERO_INIT;
	
	if((NULL == pudtKeypadTarget) || (NULL == value))
	{
		udtReturnValue = E_NOT_OK;		
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4f0:	81 e0       	ldi	r24, 0x01	; 1
				}				
			}
		}
	}
	return udtReturnValue;	
}
 4f2:	61 96       	adiw	r28, 0x11	; 17
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	1f 91       	pop	r17
 504:	0f 91       	pop	r16
 506:	ff 90       	pop	r15
 508:	ef 90       	pop	r14
 50a:	df 90       	pop	r13
 50c:	cf 90       	pop	r12
 50e:	bf 90       	pop	r11
 510:	af 90       	pop	r10
 512:	9f 90       	pop	r9
 514:	8f 90       	pop	r8
 516:	7f 90       	pop	r7
 518:	08 95       	ret

0000051a <LCD_udt4bit_send_enable_signal>:
(
void
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	udtReturnValue = DIO_udtSetPinValue(LCD_E, DIO_HIGH);
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	63 e0       	ldi	r22, 0x03	; 3
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_udtSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 524:	85 e0       	ldi	r24, 0x05	; 5
 526:	8a 95       	dec	r24
 528:	f1 f7       	brne	.-4      	; 0x526 <LCD_udt4bit_send_enable_signal+0xc>
 52a:	00 00       	nop
	_delay_us(1);
	udtReturnValue = DIO_udtSetPinValue(LCD_E, DIO_LOW);
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	63 e0       	ldi	r22, 0x03	; 3
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_udtSetPinValue>
 536:	ef ee       	ldi	r30, 0xEF	; 239
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	31 97       	sbiw	r30, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <LCD_udt4bit_send_enable_signal+0x20>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <LCD_udt4bit_send_enable_signal+0x26>
 540:	00 00       	nop
	_delay_us(60);
	return udtReturnValue;
}
 542:	08 95       	ret

00000544 <LCD_udt4BitSendCommand>:
#if LCD_4_BIT_MODE_CONFIGURATIONS==CONFIG_ENABLE
extern Std_ReturnType LCD_udt4BitSendCommand
(
uint8 u8Command
)
{
 544:	cf 93       	push	r28
 546:	c8 2f       	mov	r28, r24
	Std_ReturnType udtReturnValue = E_NOT_OK;
	/* !Comment: Clearing Rs to send command */
	udtReturnValue = DIO_udtSetPinValue(LCD_RS, DIO_LOW);
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_udtSetPinValue>
	
	/* !Comment: Clearing Rw to write data */
	udtReturnValue = DIO_udtSetPinValue(LCD_RW, DIO_LOW);
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	62 e0       	ldi	r22, 0x02	; 2
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_udtSetPinValue>
	
	/* !Comment: Writing the data on the data pins */
	LCD_DATA_PORT = u8Command & 0xF0;
 55c:	8c 2f       	mov	r24, r28
 55e:	80 7f       	andi	r24, 0xF0	; 240
 560:	8b bb       	out	0x1b, r24	; 27
	
	/* !Comment: Generate pulse on En pin */
	udtReturnValue = LCD_udt4bit_send_enable_signal();
 562:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_udt4bit_send_enable_signal>
	
	/* !Comment: Writing the data on the data pins */
	LCD_DATA_PORT = u8Command << 4;
 566:	c2 95       	swap	r28
 568:	c0 7f       	andi	r28, 0xF0	; 240
 56a:	cb bb       	out	0x1b, r28	; 27
	
	/* !Comment: Generate pulse on En pin */
	udtReturnValue = LCD_udt4bit_send_enable_signal();
 56c:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_udt4bit_send_enable_signal>
 570:	ef ee       	ldi	r30, 0xEF	; 239
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	31 97       	sbiw	r30, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <LCD_udt4BitSendCommand+0x30>
 578:	00 c0       	rjmp	.+0      	; 0x57a <LCD_udt4BitSendCommand+0x36>
 57a:	00 00       	nop

	_delay_us(60);	
	return udtReturnValue;
}
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <LCD_udt4BitInitialize>:
void
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	/* !Comment: initialization of data pins control pins */
	LCD_DATA_DIRECTION = 0xFF;
 580:	8f ef       	ldi	r24, 0xFF	; 255
 582:	8a bb       	out	0x1a, r24	; 26
	udtReturnValue = DIO_udtSetPinDirection(LCD_RW, DIO_DIRECTION_OUTPUT);
 584:	41 e0       	ldi	r20, 0x01	; 1
 586:	62 e0       	ldi	r22, 0x02	; 2
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(LCD_RS, DIO_DIRECTION_OUTPUT);
 58e:	41 e0       	ldi	r20, 0x01	; 1
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(LCD_E, DIO_DIRECTION_OUTPUT);
 598:	41 e0       	ldi	r20, 0x01	; 1
 59a:	63 e0       	ldi	r22, 0x03	; 3
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_udtSetPinDirection>
	/* !Comment: initialization of some command from data sheet */	
	udtReturnValue = LCD_udt4BitSendCommand(0x33);
 5a2:	83 e3       	ldi	r24, 0x33	; 51
 5a4:	0e 94 a2 02 	call	0x544	; 0x544 <LCD_udt4BitSendCommand>
	udtReturnValue = LCD_udt4BitSendCommand(0x32);
 5a8:	82 e3       	ldi	r24, 0x32	; 50
 5aa:	0e 94 a2 02 	call	0x544	; 0x544 <LCD_udt4BitSendCommand>
	udtReturnValue = LCD_udt4BitSendCommand(LCD_4BIT_MODE_2_LINE_5_IN_7); 
 5ae:	88 e2       	ldi	r24, 0x28	; 40
 5b0:	0e 94 a2 02 	call	0x544	; 0x544 <LCD_udt4BitSendCommand>
	udtReturnValue = LCD_udt4BitSendCommand(LCD_DISPLAY_ON_CURSOR_BLINKING_OFF); 
 5b4:	8e e0       	ldi	r24, 0x0E	; 14
 5b6:	0e 94 a2 02 	call	0x544	; 0x544 <LCD_udt4BitSendCommand>
	udtReturnValue = LCD_udt4BitSendCommand(LCD_CLEAR_DISPLAY);
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	0e 94 a2 02 	call	0x544	; 0x544 <LCD_udt4BitSendCommand>
 5c0:	8f e9       	ldi	r24, 0x9F	; 159
 5c2:	9f e0       	ldi	r25, 0x0F	; 15
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <LCD_udt4BitInitialize+0x44>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <LCD_udt4BitInitialize+0x4a>
 5ca:	00 00       	nop
	_delay_us(1000);
	
	udtReturnValue = LCD_udt4BitSendCommand(LCD_ENTRY_MODE_INC_SHIFT_OFF);
 5cc:	86 e0       	ldi	r24, 0x06	; 6
 5ce:	0e 94 a2 02 	call	0x544	; 0x544 <LCD_udt4BitSendCommand>
 5d2:	e7 ec       	ldi	r30, 0xC7	; 199
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	31 97       	sbiw	r30, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <LCD_udt4BitInitialize+0x56>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <LCD_udt4BitInitialize+0x5c>
 5dc:	00 00       	nop
	_delay_us(50);	
	
	/* !Comment: cursor on blink off */
	udtReturnValue = LCD_udt4BitSendCommand(LCD_DISPLAY_ON_CURSOR_BLINKING_OFF);
 5de:	8e e0       	ldi	r24, 0x0E	; 14
 5e0:	0e 94 a2 02 	call	0x544	; 0x544 <LCD_udt4BitSendCommand>
 5e4:	e7 ec       	ldi	r30, 0xC7	; 199
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	31 97       	sbiw	r30, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <LCD_udt4BitInitialize+0x68>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <LCD_udt4BitInitialize+0x6e>
 5ee:	00 00       	nop
	_delay_us(50);
	
	return udtReturnValue;	
}	
 5f0:	08 95       	ret

000005f2 <LCD_udt4BitSendData>:
#if LCD_4_BIT_MODE_CONFIGURATIONS==CONFIG_ENABLE
extern Std_ReturnType LCD_udt4BitSendData
(
uint8 u8Data
)
{
 5f2:	cf 93       	push	r28
 5f4:	c8 2f       	mov	r28, r24
	Std_ReturnType udtReturnValue = E_NOT_OK;
	/* !Comment: Clearing Rs to send command */
	DIO_udtSetPinValue(LCD_RS, DIO_HIGH);
 5f6:	41 e0       	ldi	r20, 0x01	; 1
 5f8:	61 e0       	ldi	r22, 0x01	; 1
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_udtSetPinValue>
	
	/* !Comment: Clearing Rw to write data */
	DIO_udtSetPinValue(LCD_RW, DIO_LOW);
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	62 e0       	ldi	r22, 0x02	; 2
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_udtSetPinValue>
	
	/* !Comment: Writing the data on the data pins */
	LCD_DATA_PORT = u8Data & 0xF0;
 60a:	8c 2f       	mov	r24, r28
 60c:	80 7f       	andi	r24, 0xF0	; 240
 60e:	8b bb       	out	0x1b, r24	; 27
	
	/* !Comment: Generate pulse on En pin */
	udtReturnValue = LCD_udt4bit_send_enable_signal();
 610:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_udt4bit_send_enable_signal>

	/* !Comment: Writing the data on the data pins */
	LCD_DATA_PORT = u8Data << 4;
 614:	c2 95       	swap	r28
 616:	c0 7f       	andi	r28, 0xF0	; 240
 618:	cb bb       	out	0x1b, r28	; 27
	
	/* !Comment: Generate pulse on En pin */
	udtReturnValue = LCD_udt4bit_send_enable_signal();
 61a:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_udt4bit_send_enable_signal>
 61e:	ef ee       	ldi	r30, 0xEF	; 239
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	31 97       	sbiw	r30, 0x01	; 1
 624:	f1 f7       	brne	.-4      	; 0x622 <LCD_udt4BitSendData+0x30>
 626:	00 c0       	rjmp	.+0      	; 0x628 <LCD_udt4BitSendData+0x36>
 628:	00 00       	nop
	
	_delay_us(60);	
	return udtReturnValue;	
}
 62a:	cf 91       	pop	r28
 62c:	08 95       	ret

0000062e <_exit>:
 62e:	f8 94       	cli

00000630 <__stop_program>:
 630:	ff cf       	rjmp	.-2      	; 0x630 <__stop_program>
