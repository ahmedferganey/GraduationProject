
GraduationProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000476  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000476  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000050a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001372  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b1  00000000  00000000  000019a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000936  00000000  00000000  00002253  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00002b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006db  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ea9  00000000  00000000  000033d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000427c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 39 02 	jmp	0x472	; 0x472 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
uint8 arrayofarabicTwo[8] = {0b00000, 0b00000, 0b00000, 0b00000, 0b11100, 0b00010, 0b11110, 0b00000};
uint8 arrayofarabicThree[8] = {0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b11111, 0b01110};
uint8 arrayofarabicFour[8] = {0b00000, 0b00000, 0b00000, 0b00000, 0b00100, 0b00100, 0b11111, 0b00000};
	
int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType volatile udtReturnValue = E_NOT_OK;
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	89 83       	std	Y+1, r24	; 0x01
	LCD_udt4BitInitialize();
  90:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_udt4BitInitialize>

    while (1) 
	{
				udtReturnValue = LCD_udtCreateSpecialChar(arrayofarabicOne, LOCATION_ONE, ROW1, COLUMN16);
  94:	2f e0       	ldi	r18, 0x0F	; 15
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	88 e7       	ldi	r24, 0x78	; 120
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_udtCreateSpecialChar>
  a2:	89 83       	std	Y+1, r24	; 0x01
				udtReturnValue = LCD_udtCreateSpecialChar(arrayofarabicTwo, LOCATION_TWO, ROW1, COLUMN15);
  a4:	2e e0       	ldi	r18, 0x0E	; 14
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	80 e7       	ldi	r24, 0x70	; 112
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_udtCreateSpecialChar>
  b2:	89 83       	std	Y+1, r24	; 0x01
				udtReturnValue = LCD_udtCreateSpecialChar(arrayofarabicThree, LOCATION_THREE, ROW1, COLUMN14);
  b4:	2d e0       	ldi	r18, 0x0D	; 13
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	62 e0       	ldi	r22, 0x02	; 2
  ba:	88 e6       	ldi	r24, 0x68	; 104
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_udtCreateSpecialChar>
  c2:	89 83       	std	Y+1, r24	; 0x01
				udtReturnValue = LCD_udtCreateSpecialChar(arrayofarabicFour, LOCATION_FOUR, ROW1, COLUMN13);
  c4:	2c e0       	ldi	r18, 0x0C	; 12
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_udtCreateSpecialChar>
  d2:	89 83       	std	Y+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	81 e1       	ldi	r24, 0x11	; 17
  d8:	9a e7       	ldi	r25, 0x7A	; 122
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x58>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x62>
  e4:	00 00       	nop
  e6:	d6 cf       	rjmp	.-84     	; 0x94 <main+0x12>

000000e8 <DIO_udtSetPinDirection>:
	direction_t 	udtDirection
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	if (udtDirection == (DIO_DIRECTION_OUTPUT))
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	c1 f5       	brne	.+112    	; 0x15c <DIO_udtSetPinDirection+0x74>
	{
		switch(udtPort)
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	91 f0       	breq	.+36     	; 0x114 <DIO_udtSetPinDirection+0x2c>
  f0:	28 f0       	brcs	.+10     	; 0xfc <DIO_udtSetPinDirection+0x14>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	d9 f0       	breq	.+54     	; 0x12c <DIO_udtSetPinDirection+0x44>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	29 f1       	breq	.+74     	; 0x144 <DIO_udtSetPinDirection+0x5c>
  fa:	6e c0       	rjmp	.+220    	; 0x1d8 <DIO_udtSetPinDirection+0xf0>
		{
			case PORTA_INDEX: SET_BIT(DIO->DDRA, udtPin);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_udtSetPinDirection+0x1e>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_udtSetPinDirection+0x1a>
 10a:	9a b3       	in	r25, 0x1a	; 26
 10c:	89 2b       	or	r24, r25
 10e:	8a bb       	out	0x1a, r24	; 26
			                  udtReturnValue = E_OK;
 110:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 112:	08 95       	ret
			case PORTB_INDEX: SET_BIT(DIO->DDRB, udtPin);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_udtSetPinDirection+0x36>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_udtSetPinDirection+0x32>
 122:	97 b3       	in	r25, 0x17	; 23
 124:	89 2b       	or	r24, r25
 126:	87 bb       	out	0x17, r24	; 23
			                  udtReturnValue = E_OK;
 128:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 12a:	08 95       	ret
			case PORTC_INDEX: SET_BIT(DIO->DDRC, udtPin);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_udtSetPinDirection+0x4e>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_udtSetPinDirection+0x4a>
 13a:	94 b3       	in	r25, 0x14	; 20
 13c:	89 2b       	or	r24, r25
 13e:	84 bb       	out	0x14, r24	; 20
			                  udtReturnValue = E_OK;
 140:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 142:	08 95       	ret
			case PORTD_INDEX: SET_BIT(DIO->DDRD, udtPin);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_udtSetPinDirection+0x66>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_udtSetPinDirection+0x62>
 152:	91 b3       	in	r25, 0x11	; 17
 154:	89 2b       	or	r24, r25
 156:	81 bb       	out	0x11, r24	; 17
			                  udtReturnValue = E_OK;
 158:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 15a:	08 95       	ret
			default:		  /*	!Comment: Do nothing	*/
			                  break;
		}
	}
	else if (udtDirection == (DIO_DIRECTION_INPUT))
 15c:	41 11       	cpse	r20, r1
 15e:	3e c0       	rjmp	.+124    	; 0x1dc <DIO_udtSetPinDirection+0xf4>
	{
		switch(udtPort)
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	99 f0       	breq	.+38     	; 0x18a <DIO_udtSetPinDirection+0xa2>
 164:	28 f0       	brcs	.+10     	; 0x170 <DIO_udtSetPinDirection+0x88>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	e9 f0       	breq	.+58     	; 0x1a4 <DIO_udtSetPinDirection+0xbc>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	41 f1       	breq	.+80     	; 0x1be <DIO_udtSetPinDirection+0xd6>
 16e:	38 c0       	rjmp	.+112    	; 0x1e0 <DIO_udtSetPinDirection+0xf8>
		{
			case PORTA_INDEX: CLR_BIT(DIO->DDRA, udtPin);
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_udtSetPinDirection+0x92>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_udtSetPinDirection+0x8e>
 17e:	80 95       	com	r24
 180:	9a b3       	in	r25, 0x1a	; 26
 182:	89 23       	and	r24, r25
 184:	8a bb       	out	0x1a, r24	; 26
			                  udtReturnValue = E_OK;
 186:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 188:	08 95       	ret
			case PORTB_INDEX: CLR_BIT(DIO->DDRB, udtPin);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_udtSetPinDirection+0xac>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_udtSetPinDirection+0xa8>
 198:	80 95       	com	r24
 19a:	97 b3       	in	r25, 0x17	; 23
 19c:	89 23       	and	r24, r25
 19e:	87 bb       	out	0x17, r24	; 23
			                  udtReturnValue = E_OK;
 1a0:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 1a2:	08 95       	ret
			case PORTC_INDEX: CLR_BIT(DIO->DDRC, udtPin);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_udtSetPinDirection+0xc6>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_udtSetPinDirection+0xc2>
 1b2:	80 95       	com	r24
 1b4:	94 b3       	in	r25, 0x14	; 20
 1b6:	89 23       	and	r24, r25
 1b8:	84 bb       	out	0x14, r24	; 20
			                  udtReturnValue = E_OK;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 1bc:	08 95       	ret
			case PORTD_INDEX: CLR_BIT(DIO->DDRD, udtPin);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_udtSetPinDirection+0xe0>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_udtSetPinDirection+0xdc>
 1cc:	80 95       	com	r24
 1ce:	91 b3       	in	r25, 0x11	; 17
 1d0:	89 23       	and	r24, r25
 1d2:	81 bb       	out	0x11, r24	; 17
			                  udtReturnValue = E_OK;
 1d4:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 1d6:	08 95       	ret
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	direction_t 	udtDirection
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	08 95       	ret
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	08 95       	ret
 1e0:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		/*	!Comment: Do nothing	*/
	}
	return udtReturnValue;
}
 1e2:	08 95       	ret

000001e4 <DIO_udtSetPinValue>:
	logic_t 		udtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	if (udtValue == DIO_HIGH)
 1e4:	41 30       	cpi	r20, 0x01	; 1
 1e6:	c1 f5       	brne	.+112    	; 0x258 <DIO_udtSetPinValue+0x74>
	{
		switch(udtPort)
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	91 f0       	breq	.+36     	; 0x210 <DIO_udtSetPinValue+0x2c>
 1ec:	28 f0       	brcs	.+10     	; 0x1f8 <DIO_udtSetPinValue+0x14>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	d9 f0       	breq	.+54     	; 0x228 <DIO_udtSetPinValue+0x44>
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	29 f1       	breq	.+74     	; 0x240 <DIO_udtSetPinValue+0x5c>
 1f6:	6e c0       	rjmp	.+220    	; 0x2d4 <DIO_udtSetPinValue+0xf0>
		{
			case PORTA_INDEX: SET_BIT(DIO->PORTA, udtPin);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_udtSetPinValue+0x1e>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_udtSetPinValue+0x1a>
 206:	9b b3       	in	r25, 0x1b	; 27
 208:	89 2b       	or	r24, r25
 20a:	8b bb       	out	0x1b, r24	; 27
			                  udtReturnValue = E_OK;
 20c:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 20e:	08 95       	ret
			case PORTB_INDEX: SET_BIT(DIO->PORTB, udtPin);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_udtSetPinValue+0x36>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_udtSetPinValue+0x32>
 21e:	98 b3       	in	r25, 0x18	; 24
 220:	89 2b       	or	r24, r25
 222:	88 bb       	out	0x18, r24	; 24
			                  udtReturnValue = E_OK;
 224:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 226:	08 95       	ret
			case PORTC_INDEX: SET_BIT(DIO->PORTC, udtPin);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_udtSetPinValue+0x4e>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_udtSetPinValue+0x4a>
 236:	95 b3       	in	r25, 0x15	; 21
 238:	89 2b       	or	r24, r25
 23a:	85 bb       	out	0x15, r24	; 21
			                  udtReturnValue = E_OK;
 23c:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 23e:	08 95       	ret
			case PORTD_INDEX: SET_BIT(DIO->PORTD, udtPin);
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_udtSetPinValue+0x66>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_udtSetPinValue+0x62>
 24e:	92 b3       	in	r25, 0x12	; 18
 250:	89 2b       	or	r24, r25
 252:	82 bb       	out	0x12, r24	; 18
			                  udtReturnValue = E_OK;
 254:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 256:	08 95       	ret
			default:          /* !Comment: Do nothing */
			                  break;
		}
		
	}
	else if(udtValue == DIO_LOW)
 258:	41 11       	cpse	r20, r1
 25a:	3e c0       	rjmp	.+124    	; 0x2d8 <DIO_udtSetPinValue+0xf4>
	{
		switch(udtPort)
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	99 f0       	breq	.+38     	; 0x286 <DIO_udtSetPinValue+0xa2>
 260:	28 f0       	brcs	.+10     	; 0x26c <DIO_udtSetPinValue+0x88>
 262:	82 30       	cpi	r24, 0x02	; 2
 264:	e9 f0       	breq	.+58     	; 0x2a0 <DIO_udtSetPinValue+0xbc>
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	41 f1       	breq	.+80     	; 0x2ba <DIO_udtSetPinValue+0xd6>
 26a:	38 c0       	rjmp	.+112    	; 0x2dc <DIO_udtSetPinValue+0xf8>
		{
			case PORTA_INDEX: CLR_BIT(DIO->PORTA, udtPin);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_udtSetPinValue+0x92>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_udtSetPinValue+0x8e>
 27a:	80 95       	com	r24
 27c:	9b b3       	in	r25, 0x1b	; 27
 27e:	89 23       	and	r24, r25
 280:	8b bb       	out	0x1b, r24	; 27
							  udtReturnValue = E_OK;
 282:	80 e0       	ldi	r24, 0x00	; 0
							  break;
 284:	08 95       	ret
			case PORTB_INDEX: CLR_BIT(DIO->PORTB, udtPin);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_udtSetPinValue+0xac>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_udtSetPinValue+0xa8>
 294:	80 95       	com	r24
 296:	98 b3       	in	r25, 0x18	; 24
 298:	89 23       	and	r24, r25
 29a:	88 bb       	out	0x18, r24	; 24
							  udtReturnValue = E_OK;
 29c:	80 e0       	ldi	r24, 0x00	; 0
							  break;
 29e:	08 95       	ret
			case PORTC_INDEX: CLR_BIT(DIO->PORTC, udtPin);
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_udtSetPinValue+0xc6>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_udtSetPinValue+0xc2>
 2ae:	80 95       	com	r24
 2b0:	95 b3       	in	r25, 0x15	; 21
 2b2:	89 23       	and	r24, r25
 2b4:	85 bb       	out	0x15, r24	; 21
						      udtReturnValue = E_OK;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
							  break;
 2b8:	08 95       	ret
			case PORTD_INDEX: CLR_BIT(DIO->PORTD, udtPin);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_udtSetPinValue+0xe0>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_udtSetPinValue+0xdc>
 2c8:	80 95       	com	r24
 2ca:	92 b3       	in	r25, 0x12	; 18
 2cc:	89 23       	and	r24, r25
 2ce:	82 bb       	out	0x12, r24	; 18
							  udtReturnValue = E_OK;
 2d0:	80 e0       	ldi	r24, 0x00	; 0
							  break;
 2d2:	08 95       	ret
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	logic_t 		udtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	08 95       	ret
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	08 95       	ret
 2dc:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		/* !Comment: Do nothing */
	}
	return udtReturnValue;
}
 2de:	08 95       	ret

000002e0 <LCD_udt4bit_send_enable_signal>:
			udtReturnValue = LCD_udt4BitSendData(pu8Word[u8Counter]);
			u8Counter++;		
		} 
	}
	return udtReturnValue;
}
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	63 e0       	ldi	r22, 0x03	; 3
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_udtSetPinValue>
 2ea:	85 e0       	ldi	r24, 0x05	; 5
 2ec:	8a 95       	dec	r24
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_udt4bit_send_enable_signal+0xc>
 2f0:	00 00       	nop
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	63 e0       	ldi	r22, 0x03	; 3
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_udtSetPinValue>
 2fc:	ef ee       	ldi	r30, 0xEF	; 239
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <LCD_udt4bit_send_enable_signal+0x20>
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCD_udt4bit_send_enable_signal+0x26>
 306:	00 00       	nop
 308:	08 95       	ret

0000030a <LCD_udt4BitSendCommand>:
 30a:	cf 93       	push	r28
 30c:	c8 2f       	mov	r28, r24
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_udtSetPinValue>
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	62 e0       	ldi	r22, 0x02	; 2
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_udtSetPinValue>
 322:	8c 2f       	mov	r24, r28
 324:	80 7f       	andi	r24, 0xF0	; 240
 326:	8b bb       	out	0x1b, r24	; 27
 328:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_udt4bit_send_enable_signal>
 32c:	c2 95       	swap	r28
 32e:	c0 7f       	andi	r28, 0xF0	; 240
 330:	cb bb       	out	0x1b, r28	; 27
 332:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_udt4bit_send_enable_signal>
 336:	ef ee       	ldi	r30, 0xEF	; 239
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <LCD_udt4BitSendCommand+0x30>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD_udt4BitSendCommand+0x36>
 340:	00 00       	nop
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <LCD_udt4BitInitialize>:
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	8a bb       	out	0x1a, r24	; 26
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	62 e0       	ldi	r22, 0x02	; 2
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_udtSetPinDirection>
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_udtSetPinDirection>
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	63 e0       	ldi	r22, 0x03	; 3
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_udtSetPinDirection>
 368:	83 e3       	ldi	r24, 0x33	; 51
 36a:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_udt4BitSendCommand>
 36e:	82 e3       	ldi	r24, 0x32	; 50
 370:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_udt4BitSendCommand>
 374:	88 e2       	ldi	r24, 0x28	; 40
 376:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_udt4BitSendCommand>
 37a:	8e e0       	ldi	r24, 0x0E	; 14
 37c:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_udt4BitSendCommand>
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_udt4BitSendCommand>
 386:	8f e9       	ldi	r24, 0x9F	; 159
 388:	9f e0       	ldi	r25, 0x0F	; 15
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_udt4BitInitialize+0x44>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_udt4BitInitialize+0x4a>
 390:	00 00       	nop
 392:	86 e0       	ldi	r24, 0x06	; 6
 394:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_udt4BitSendCommand>
 398:	e7 ec       	ldi	r30, 0xC7	; 199
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <LCD_udt4BitInitialize+0x56>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <LCD_udt4BitInitialize+0x5c>
 3a2:	00 00       	nop
 3a4:	8e e0       	ldi	r24, 0x0E	; 14
 3a6:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_udt4BitSendCommand>
 3aa:	e7 ec       	ldi	r30, 0xC7	; 199
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	31 97       	sbiw	r30, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <LCD_udt4BitInitialize+0x68>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LCD_udt4BitInitialize+0x6e>
 3b4:	00 00       	nop
 3b6:	08 95       	ret

000003b8 <LCD_udt4BitSendData>:
 3b8:	cf 93       	push	r28
 3ba:	c8 2f       	mov	r28, r24
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_udtSetPinValue>
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	62 e0       	ldi	r22, 0x02	; 2
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_udtSetPinValue>
 3d0:	8c 2f       	mov	r24, r28
 3d2:	80 7f       	andi	r24, 0xF0	; 240
 3d4:	8b bb       	out	0x1b, r24	; 27
 3d6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_udt4bit_send_enable_signal>
 3da:	c2 95       	swap	r28
 3dc:	c0 7f       	andi	r28, 0xF0	; 240
 3de:	cb bb       	out	0x1b, r28	; 27
 3e0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_udt4bit_send_enable_signal>
 3e4:	ef ee       	ldi	r30, 0xEF	; 239
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	31 97       	sbiw	r30, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <LCD_udt4BitSendData+0x30>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <LCD_udt4BitSendData+0x36>
 3ee:	00 00       	nop
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <LCD_udtGoTo>:
uint8 u8Row, 
uint8 u8Column
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	if(u8Row == 0)
 3f4:	81 11       	cpse	r24, r1
 3f6:	05 c0       	rjmp	.+10     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
	{
		udtReturnValue = LCD_udt4BitSendCommand(u8Column + (LCD_BIT7_SET_DDRAM_ADDRESS));
 3f8:	80 e8       	ldi	r24, 0x80	; 128
 3fa:	86 0f       	add	r24, r22
 3fc:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_udt4BitSendCommand>
 400:	08 95       	ret
	}
	else if(u8Row == 1)
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	29 f4       	brne	.+10     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	{
		udtReturnValue = LCD_udt4BitSendCommand((u8Column + (LCD_START_ADDRESS_COL_TWO)) + (LCD_BIT7_SET_DDRAM_ADDRESS));
 406:	80 ec       	ldi	r24, 0xC0	; 192
 408:	86 0f       	add	r24, r22
 40a:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_udt4BitSendCommand>
 40e:	08 95       	ret
	}
	else
	{
		udtReturnValue = E_PENDING;
 410:	82 e0       	ldi	r24, 0x02	; 2
	}
	return udtReturnValue;
}
 412:	08 95       	ret

00000414 <LCD_udtCreateSpecialChar>:
uint8* pu8CharArr, 
uint8 u8CGRAMLocation, 
uint8 u8DDRAMRow, 
uint8 u8DDRAMColumn
)
{
 414:	ef 92       	push	r14
 416:	ff 92       	push	r15
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
	Std_ReturnType udtReturnValue = E_OK;
	uint8 u8Counter;
	if(NULL == pu8CharArr)
 420:	00 97       	sbiw	r24, 0x00	; 0
 422:	f9 f0       	breq	.+62     	; 0x462 <LCD_udtCreateSpecialChar+0x4e>
 424:	e2 2e       	mov	r14, r18
 426:	f4 2e       	mov	r15, r20
 428:	d6 2f       	mov	r29, r22
 42a:	8c 01       	movw	r16, r24
		udtReturnValue = E_NOT_OK;
	}
	else
	{
		/* !Comment: Switch to CGRAM */
		udtReturnValue = LCD_udt4BitSendCommand((u8CGRAMLocation*8) + (LCD_BIT6_SET_CGRAM_ADDRESS));
 42c:	86 2f       	mov	r24, r22
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	08 96       	adiw	r24, 0x08	; 8
 432:	88 0f       	add	r24, r24
 434:	88 0f       	add	r24, r24
 436:	88 0f       	add	r24, r24
 438:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_udt4BitSendCommand>
		/* !Comment: Write on CGRAM */
		for (u8Counter = 0; u8Counter < 8; u8Counter++)
 43c:	c0 e0       	ldi	r28, 0x00	; 0
 43e:	07 c0       	rjmp	.+14     	; 0x44e <LCD_udtCreateSpecialChar+0x3a>
		{
			udtReturnValue = LCD_udt4BitSendData(pu8CharArr[u8Counter]);
 440:	f8 01       	movw	r30, r16
 442:	ec 0f       	add	r30, r28
 444:	f1 1d       	adc	r31, r1
 446:	80 81       	ld	r24, Z
 448:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_udt4BitSendData>
	else
	{
		/* !Comment: Switch to CGRAM */
		udtReturnValue = LCD_udt4BitSendCommand((u8CGRAMLocation*8) + (LCD_BIT6_SET_CGRAM_ADDRESS));
		/* !Comment: Write on CGRAM */
		for (u8Counter = 0; u8Counter < 8; u8Counter++)
 44c:	cf 5f       	subi	r28, 0xFF	; 255
 44e:	c8 30       	cpi	r28, 0x08	; 8
 450:	b8 f3       	brcs	.-18     	; 0x440 <LCD_udtCreateSpecialChar+0x2c>
		{
			udtReturnValue = LCD_udt4BitSendData(pu8CharArr[u8Counter]);
		}
		/* !Comment: Go to DDRAM */
		udtReturnValue = LCD_udtGoTo(u8DDRAMRow, u8DDRAMColumn);
 452:	6e 2d       	mov	r22, r14
 454:	8f 2d       	mov	r24, r15
 456:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_udtGoTo>
		/* !Comment: Print CGRAM data */
		udtReturnValue = LCD_udt4BitSendData(u8CGRAMLocation);
 45a:	8d 2f       	mov	r24, r29
 45c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_udt4BitSendData>
 460:	01 c0       	rjmp	.+2      	; 0x464 <LCD_udtCreateSpecialChar+0x50>
{
	Std_ReturnType udtReturnValue = E_OK;
	uint8 u8Counter;
	if(NULL == pu8CharArr)
	{
		udtReturnValue = E_NOT_OK;
 462:	81 e0       	ldi	r24, 0x01	; 1
		udtReturnValue = LCD_udtGoTo(u8DDRAMRow, u8DDRAMColumn);
		/* !Comment: Print CGRAM data */
		udtReturnValue = LCD_udt4BitSendData(u8CGRAMLocation);
	}
	return udtReturnValue;
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	ff 90       	pop	r15
 46e:	ef 90       	pop	r14
 470:	08 95       	ret

00000472 <_exit>:
 472:	f8 94       	cli

00000474 <__stop_program>:
 474:	ff cf       	rjmp	.-2      	; 0x474 <__stop_program>
