
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000101e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000101e  000010b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006c  0080006c  000010be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021a7  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dbe  00000000  00000000  00003503  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000116a  00000000  00000000  000042c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000720  00000000  00000000  0000542c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c41  00000000  00000000  00005b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000210b  00000000  00000000  0000678d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00008898  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__vector_4>
      14:	0c 94 1b 04 	jmp	0x836	; 0x836 <__vector_5>
      18:	0c 94 44 04 	jmp	0x888	; 0x888 <__vector_6>
      1c:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__vector_7>
      20:	0c 94 96 04 	jmp	0x92c	; 0x92c <__vector_8>
      24:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__vector_9>
      28:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__vector_10>
      2c:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 0d 08 	jmp	0x101a	; 0x101a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int main(void)
{

		
	
	udtReturnValue = DISPLAY_udtUltrasonicLcdInit(ptr, NumOfUltrasonic);
      92:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <NumOfUltrasonic>
      96:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ptr>
      9a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ptr+0x1>
      9e:	0e 94 92 01 	call	0x324	; 0x324 <DISPLAY_udtUltrasonicLcdInit>
      a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	while (1)
	{
		
		
		udtReturnValue = DISPLAY_udtUltrasonicDispLcd(ptr);
      a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ptr>
      aa:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ptr+0x1>
      ae:	0e 94 b6 01 	call	0x36c	; 0x36c <DISPLAY_udtUltrasonicDispLcd>
      b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      b6:	f7 cf       	rjmp	.-18     	; 0xa6 <main+0x14>

000000b8 <DIO_udtSetPinDirection>:
	direction_t 	udtDirection
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	if (udtDirection == (DIO_DIRECTION_OUTPUT))
      b8:	41 30       	cpi	r20, 0x01	; 1
      ba:	c1 f5       	brne	.+112    	; 0x12c <DIO_udtSetPinDirection+0x74>
	{
		switch(udtPort)
      bc:	81 30       	cpi	r24, 0x01	; 1
      be:	91 f0       	breq	.+36     	; 0xe4 <DIO_udtSetPinDirection+0x2c>
      c0:	28 f0       	brcs	.+10     	; 0xcc <DIO_udtSetPinDirection+0x14>
      c2:	82 30       	cpi	r24, 0x02	; 2
      c4:	d9 f0       	breq	.+54     	; 0xfc <DIO_udtSetPinDirection+0x44>
      c6:	83 30       	cpi	r24, 0x03	; 3
      c8:	29 f1       	breq	.+74     	; 0x114 <DIO_udtSetPinDirection+0x5c>
      ca:	6e c0       	rjmp	.+220    	; 0x1a8 <DIO_udtSetPinDirection+0xf0>
		{
			case PORTA_INDEX: SET_BIT(DIO->DDRA, udtPin);
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_udtSetPinDirection+0x1e>
      d2:	88 0f       	add	r24, r24
      d4:	99 1f       	adc	r25, r25
      d6:	6a 95       	dec	r22
      d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_udtSetPinDirection+0x1a>
      da:	9a b3       	in	r25, 0x1a	; 26
      dc:	89 2b       	or	r24, r25
      de:	8a bb       	out	0x1a, r24	; 26
			                  udtReturnValue = E_OK;
      e0:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
      e2:	08 95       	ret
			case PORTB_INDEX: SET_BIT(DIO->DDRB, udtPin);
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_udtSetPinDirection+0x36>
      ea:	88 0f       	add	r24, r24
      ec:	99 1f       	adc	r25, r25
      ee:	6a 95       	dec	r22
      f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_udtSetPinDirection+0x32>
      f2:	97 b3       	in	r25, 0x17	; 23
      f4:	89 2b       	or	r24, r25
      f6:	87 bb       	out	0x17, r24	; 23
			                  udtReturnValue = E_OK;
      f8:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
      fa:	08 95       	ret
			case PORTC_INDEX: SET_BIT(DIO->DDRC, udtPin);
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_udtSetPinDirection+0x4e>
     102:	88 0f       	add	r24, r24
     104:	99 1f       	adc	r25, r25
     106:	6a 95       	dec	r22
     108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_udtSetPinDirection+0x4a>
     10a:	94 b3       	in	r25, 0x14	; 20
     10c:	89 2b       	or	r24, r25
     10e:	84 bb       	out	0x14, r24	; 20
			                  udtReturnValue = E_OK;
     110:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
     112:	08 95       	ret
			case PORTD_INDEX: SET_BIT(DIO->DDRD, udtPin);
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_udtSetPinDirection+0x66>
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	6a 95       	dec	r22
     120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_udtSetPinDirection+0x62>
     122:	91 b3       	in	r25, 0x11	; 17
     124:	89 2b       	or	r24, r25
     126:	81 bb       	out	0x11, r24	; 17
			                  udtReturnValue = E_OK;
     128:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
     12a:	08 95       	ret
			default:		  /*	!Comment: Do nothing	*/
			                  break;
		}
	}
	else if (udtDirection == (DIO_DIRECTION_INPUT))
     12c:	41 11       	cpse	r20, r1
     12e:	3e c0       	rjmp	.+124    	; 0x1ac <DIO_udtSetPinDirection+0xf4>
	{
		switch(udtPort)
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	99 f0       	breq	.+38     	; 0x15a <DIO_udtSetPinDirection+0xa2>
     134:	28 f0       	brcs	.+10     	; 0x140 <DIO_udtSetPinDirection+0x88>
     136:	82 30       	cpi	r24, 0x02	; 2
     138:	e9 f0       	breq	.+58     	; 0x174 <DIO_udtSetPinDirection+0xbc>
     13a:	83 30       	cpi	r24, 0x03	; 3
     13c:	41 f1       	breq	.+80     	; 0x18e <DIO_udtSetPinDirection+0xd6>
     13e:	38 c0       	rjmp	.+112    	; 0x1b0 <DIO_udtSetPinDirection+0xf8>
		{
			case PORTA_INDEX: CLR_BIT(DIO->DDRA, udtPin);
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_udtSetPinDirection+0x92>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	6a 95       	dec	r22
     14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_udtSetPinDirection+0x8e>
     14e:	80 95       	com	r24
     150:	9a b3       	in	r25, 0x1a	; 26
     152:	89 23       	and	r24, r25
     154:	8a bb       	out	0x1a, r24	; 26
			                  udtReturnValue = E_OK;
     156:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
     158:	08 95       	ret
			case PORTB_INDEX: CLR_BIT(DIO->DDRB, udtPin);
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_udtSetPinDirection+0xac>
     160:	88 0f       	add	r24, r24
     162:	99 1f       	adc	r25, r25
     164:	6a 95       	dec	r22
     166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_udtSetPinDirection+0xa8>
     168:	80 95       	com	r24
     16a:	97 b3       	in	r25, 0x17	; 23
     16c:	89 23       	and	r24, r25
     16e:	87 bb       	out	0x17, r24	; 23
			                  udtReturnValue = E_OK;
     170:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
     172:	08 95       	ret
			case PORTC_INDEX: CLR_BIT(DIO->DDRC, udtPin);
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_udtSetPinDirection+0xc6>
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	6a 95       	dec	r22
     180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_udtSetPinDirection+0xc2>
     182:	80 95       	com	r24
     184:	94 b3       	in	r25, 0x14	; 20
     186:	89 23       	and	r24, r25
     188:	84 bb       	out	0x14, r24	; 20
			                  udtReturnValue = E_OK;
     18a:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
     18c:	08 95       	ret
			case PORTD_INDEX: CLR_BIT(DIO->DDRD, udtPin);
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_udtSetPinDirection+0xe0>
     194:	88 0f       	add	r24, r24
     196:	99 1f       	adc	r25, r25
     198:	6a 95       	dec	r22
     19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_udtSetPinDirection+0xdc>
     19c:	80 95       	com	r24
     19e:	91 b3       	in	r25, 0x11	; 17
     1a0:	89 23       	and	r24, r25
     1a2:	81 bb       	out	0x11, r24	; 17
			                  udtReturnValue = E_OK;
     1a4:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
     1a6:	08 95       	ret
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	direction_t 	udtDirection
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	08 95       	ret
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	08 95       	ret
     1b0:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		/*	!Comment: Do nothing	*/
	}
	return udtReturnValue;
}
     1b2:	08 95       	ret

000001b4 <DIO_udtSetPinValue>:
	logic_t 		udtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	if (udtValue == DIO_HIGH)
     1b4:	41 30       	cpi	r20, 0x01	; 1
     1b6:	c1 f5       	brne	.+112    	; 0x228 <DIO_udtSetPinValue+0x74>
	{
		switch(udtPort)
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	91 f0       	breq	.+36     	; 0x1e0 <DIO_udtSetPinValue+0x2c>
     1bc:	28 f0       	brcs	.+10     	; 0x1c8 <DIO_udtSetPinValue+0x14>
     1be:	82 30       	cpi	r24, 0x02	; 2
     1c0:	d9 f0       	breq	.+54     	; 0x1f8 <DIO_udtSetPinValue+0x44>
     1c2:	83 30       	cpi	r24, 0x03	; 3
     1c4:	29 f1       	breq	.+74     	; 0x210 <DIO_udtSetPinValue+0x5c>
     1c6:	6e c0       	rjmp	.+220    	; 0x2a4 <DIO_udtSetPinValue+0xf0>
		{
			case PORTA_INDEX: SET_BIT(DIO->PORTA, udtPin);
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_udtSetPinValue+0x1e>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	6a 95       	dec	r22
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_udtSetPinValue+0x1a>
     1d6:	9b b3       	in	r25, 0x1b	; 27
     1d8:	89 2b       	or	r24, r25
     1da:	8b bb       	out	0x1b, r24	; 27
			                  udtReturnValue = E_OK;
     1dc:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
     1de:	08 95       	ret
			case PORTB_INDEX: SET_BIT(DIO->PORTB, udtPin);
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_udtSetPinValue+0x36>
     1e6:	88 0f       	add	r24, r24
     1e8:	99 1f       	adc	r25, r25
     1ea:	6a 95       	dec	r22
     1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_udtSetPinValue+0x32>
     1ee:	98 b3       	in	r25, 0x18	; 24
     1f0:	89 2b       	or	r24, r25
     1f2:	88 bb       	out	0x18, r24	; 24
			                  udtReturnValue = E_OK;
     1f4:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
     1f6:	08 95       	ret
			case PORTC_INDEX: SET_BIT(DIO->PORTC, udtPin);
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_udtSetPinValue+0x4e>
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	6a 95       	dec	r22
     204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_udtSetPinValue+0x4a>
     206:	95 b3       	in	r25, 0x15	; 21
     208:	89 2b       	or	r24, r25
     20a:	85 bb       	out	0x15, r24	; 21
			                  udtReturnValue = E_OK;
     20c:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
     20e:	08 95       	ret
			case PORTD_INDEX: SET_BIT(DIO->PORTD, udtPin);
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_udtSetPinValue+0x66>
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_udtSetPinValue+0x62>
     21e:	92 b3       	in	r25, 0x12	; 18
     220:	89 2b       	or	r24, r25
     222:	82 bb       	out	0x12, r24	; 18
			                  udtReturnValue = E_OK;
     224:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
     226:	08 95       	ret
			default:          /* !Comment: Do nothing */
			                  break;
		}
		
	}
	else if(udtValue == DIO_LOW)
     228:	41 11       	cpse	r20, r1
     22a:	3e c0       	rjmp	.+124    	; 0x2a8 <DIO_udtSetPinValue+0xf4>
	{
		switch(udtPort)
     22c:	81 30       	cpi	r24, 0x01	; 1
     22e:	99 f0       	breq	.+38     	; 0x256 <DIO_udtSetPinValue+0xa2>
     230:	28 f0       	brcs	.+10     	; 0x23c <DIO_udtSetPinValue+0x88>
     232:	82 30       	cpi	r24, 0x02	; 2
     234:	e9 f0       	breq	.+58     	; 0x270 <DIO_udtSetPinValue+0xbc>
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	41 f1       	breq	.+80     	; 0x28a <DIO_udtSetPinValue+0xd6>
     23a:	38 c0       	rjmp	.+112    	; 0x2ac <DIO_udtSetPinValue+0xf8>
		{
			case PORTA_INDEX: CLR_BIT(DIO->PORTA, udtPin);
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_udtSetPinValue+0x92>
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	6a 95       	dec	r22
     248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_udtSetPinValue+0x8e>
     24a:	80 95       	com	r24
     24c:	9b b3       	in	r25, 0x1b	; 27
     24e:	89 23       	and	r24, r25
     250:	8b bb       	out	0x1b, r24	; 27
							  udtReturnValue = E_OK;
     252:	80 e0       	ldi	r24, 0x00	; 0
							  break;
     254:	08 95       	ret
			case PORTB_INDEX: CLR_BIT(DIO->PORTB, udtPin);
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_udtSetPinValue+0xac>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	6a 95       	dec	r22
     262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_udtSetPinValue+0xa8>
     264:	80 95       	com	r24
     266:	98 b3       	in	r25, 0x18	; 24
     268:	89 23       	and	r24, r25
     26a:	88 bb       	out	0x18, r24	; 24
							  udtReturnValue = E_OK;
     26c:	80 e0       	ldi	r24, 0x00	; 0
							  break;
     26e:	08 95       	ret
			case PORTC_INDEX: CLR_BIT(DIO->PORTC, udtPin);
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_udtSetPinValue+0xc6>
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	6a 95       	dec	r22
     27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_udtSetPinValue+0xc2>
     27e:	80 95       	com	r24
     280:	95 b3       	in	r25, 0x15	; 21
     282:	89 23       	and	r24, r25
     284:	85 bb       	out	0x15, r24	; 21
						      udtReturnValue = E_OK;
     286:	80 e0       	ldi	r24, 0x00	; 0
							  break;
     288:	08 95       	ret
			case PORTD_INDEX: CLR_BIT(DIO->PORTD, udtPin);
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_udtSetPinValue+0xe0>
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	6a 95       	dec	r22
     296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_udtSetPinValue+0xdc>
     298:	80 95       	com	r24
     29a:	92 b3       	in	r25, 0x12	; 18
     29c:	89 23       	and	r24, r25
     29e:	82 bb       	out	0x12, r24	; 18
							  udtReturnValue = E_OK;
     2a0:	80 e0       	ldi	r24, 0x00	; 0
							  break;
     2a2:	08 95       	ret
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	logic_t 		udtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	08 95       	ret
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	08 95       	ret
     2ac:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		/* !Comment: Do nothing */
	}
	return udtReturnValue;
}
     2ae:	08 95       	ret

000002b0 <DIO_udtGetPinValue>:
	logic_t* 		pudtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	switch(udtPort)
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	91 f0       	breq	.+36     	; 0x2d8 <DIO_udtGetPinValue+0x28>
     2b4:	28 f0       	brcs	.+10     	; 0x2c0 <DIO_udtGetPinValue+0x10>
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	d9 f0       	breq	.+54     	; 0x2f0 <DIO_udtGetPinValue+0x40>
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	29 f1       	breq	.+74     	; 0x308 <DIO_udtGetPinValue+0x58>
     2be:	30 c0       	rjmp	.+96     	; 0x320 <DIO_udtGetPinValue+0x70>
	{
		case PORTA_INDEX: *pudtValue = GET_BIT(DIO->PINA, udtPin);
     2c0:	89 b3       	in	r24, 0x19	; 25
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_udtGetPinValue+0x1a>
     2c6:	95 95       	asr	r25
     2c8:	87 95       	ror	r24
     2ca:	6a 95       	dec	r22
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_udtGetPinValue+0x16>
     2ce:	81 70       	andi	r24, 0x01	; 1
     2d0:	fa 01       	movw	r30, r20
     2d2:	80 83       	st	Z, r24
						  udtReturnValue = E_OK;
     2d4:	80 e0       	ldi	r24, 0x00	; 0
						  break;
     2d6:	08 95       	ret
		case PORTB_INDEX: *pudtValue = GET_BIT(DIO->PINB, udtPin);
     2d8:	86 b3       	in	r24, 0x16	; 22
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_udtGetPinValue+0x32>
     2de:	95 95       	asr	r25
     2e0:	87 95       	ror	r24
     2e2:	6a 95       	dec	r22
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_udtGetPinValue+0x2e>
     2e6:	81 70       	andi	r24, 0x01	; 1
     2e8:	fa 01       	movw	r30, r20
     2ea:	80 83       	st	Z, r24
						  udtReturnValue = E_OK;
     2ec:	80 e0       	ldi	r24, 0x00	; 0
						  break;
     2ee:	08 95       	ret
		case PORTC_INDEX: *pudtValue = GET_BIT(DIO->PINC, udtPin);
     2f0:	83 b3       	in	r24, 0x13	; 19
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_udtGetPinValue+0x4a>
     2f6:	95 95       	asr	r25
     2f8:	87 95       	ror	r24
     2fa:	6a 95       	dec	r22
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_udtGetPinValue+0x46>
     2fe:	81 70       	andi	r24, 0x01	; 1
     300:	fa 01       	movw	r30, r20
     302:	80 83       	st	Z, r24
						  udtReturnValue = E_OK;
     304:	80 e0       	ldi	r24, 0x00	; 0
						  break;
     306:	08 95       	ret
		case PORTD_INDEX: *pudtValue = GET_BIT(DIO->PIND, udtPin);
     308:	80 b3       	in	r24, 0x10	; 16
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_udtGetPinValue+0x62>
     30e:	95 95       	asr	r25
     310:	87 95       	ror	r24
     312:	6a 95       	dec	r22
     314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_udtGetPinValue+0x5e>
     316:	81 70       	andi	r24, 0x01	; 1
     318:	fa 01       	movw	r30, r20
     31a:	80 83       	st	Z, r24
					      udtReturnValue = E_OK;
     31c:	80 e0       	ldi	r24, 0x00	; 0
					      break;
     31e:	08 95       	ret
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	logic_t* 		pudtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
     320:	81 e0       	ldi	r24, 0x01	; 1
		default:		  /* !Comment: Do nothing */
					      break;
		
	}
	return udtReturnValue;
}
     322:	08 95       	ret

00000324 <DISPLAY_udtUltrasonicLcdInit>:
Std_ReturnType DISPLAY_udtUltrasonicLcdInit
(
const ULTRASONIC_obj_t* ULTRASONIC_pudtconfig,
uint8 u8NumOfUltrasonic
)
{
     324:	ef 92       	push	r14
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	8c 01       	movw	r16, r24
     332:	e6 2e       	mov	r14, r22
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	/* 1- Init LCD */
	udtReturnValue = LCD_udt4BitInitialize();
     334:	0e 94 89 03 	call	0x712	; 0x712 <LCD_udt4BitInitialize>
     338:	f8 2e       	mov	r15, r24
	
	/* 2- Init ULTRASONIC SENSORS */
	for (int i = 0 ; i < u8NumOfUltrasonic ; i++)
     33a:	c0 e0       	ldi	r28, 0x00	; 0
     33c:	d0 e0       	ldi	r29, 0x00	; 0
     33e:	07 c0       	rjmp	.+14     	; 0x34e <DISPLAY_udtUltrasonicLcdInit+0x2a>
	{
		udtReturnValue = Ultrasonic_udtInit(ULTRASONIC_pudtconfig);	
     340:	c8 01       	movw	r24, r16
     342:	0e 94 3a 05 	call	0xa74	; 0xa74 <Ultrasonic_udtInit>
     346:	f8 2e       	mov	r15, r24
		++ULTRASONIC_pudtconfig;
     348:	0e 5f       	subi	r16, 0xFE	; 254
     34a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	/* 1- Init LCD */
	udtReturnValue = LCD_udt4BitInitialize();
	
	/* 2- Init ULTRASONIC SENSORS */
	for (int i = 0 ; i < u8NumOfUltrasonic ; i++)
     34c:	21 96       	adiw	r28, 0x01	; 1
     34e:	8e 2d       	mov	r24, r14
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	c8 17       	cp	r28, r24
     354:	d9 07       	cpc	r29, r25
     356:	a4 f3       	brlt	.-24     	; 0x340 <DISPLAY_udtUltrasonicLcdInit+0x1c>
			for the capture unit.	
		*/
		/*
			No Prescaler +  Normal Mode + 8MHZ + ICU + Rising ----->  .125 Sec for 1 Tick		
		*/
	TIMER1_vdInit();
     358:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <TIMER1_vdInit>
	
	
	
	return udtReturnValue;		
}
     35c:	8f 2d       	mov	r24, r15
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	08 95       	ret

0000036c <DISPLAY_udtUltrasonicDispLcd>:
/***********************************************************************************************************/
Std_ReturnType DISPLAY_udtUltrasonicDispLcd
(
const ULTRASONIC_obj_t* ULTRASONIC_pudtconfig
)
{
     36c:	cf 92       	push	r12
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	28 97       	sbiw	r28, 0x08	; 8
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	6c 01       	movw	r12, r24
	Std_ReturnType udtReturnValue = E_NOT_OK;
	uint16 ULTRASONIC_LocalDistance[4]= {0};
     38e:	fe 01       	movw	r30, r28
     390:	31 96       	adiw	r30, 0x01	; 1
     392:	88 e0       	ldi	r24, 0x08	; 8
     394:	df 01       	movw	r26, r30
     396:	1d 92       	st	X+, r1
     398:	8a 95       	dec	r24
     39a:	e9 f7       	brne	.-6      	; 0x396 <DISPLAY_udtUltrasonicDispLcd+0x2a>
			event occurs on the ICP1 pin (or
			optionally on the analog comparator output for Timer/Counter1). The Input Capture 
			can be used for defining the counter TOP value
		*/
	
	for (uint8 i = 0 ; i < 4 ; i++)
     39c:	f1 2c       	mov	r15, r1
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	uint16 ULTRASONIC_LocalDistance[4]= {0};
	
	uint8 u8Row = ROW1 ;
	uint8 u8Column = COLUMN1 ;
     39e:	e1 2c       	mov	r14, r1
Std_ReturnType DISPLAY_udtUltrasonicDispLcd
(
const ULTRASONIC_obj_t* ULTRASONIC_pudtconfig
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
			event occurs on the ICP1 pin (or
			optionally on the analog comparator output for Timer/Counter1). The Input Capture 
			can be used for defining the counter TOP value
		*/
	
	for (uint8 i = 0 ; i < 4 ; i++)
     3a2:	25 c0       	rjmp	.+74     	; 0x3ee <DISPLAY_udtUltrasonicDispLcd+0x82>
	{
		udtReturnValue = Ultrasonic_udtCalculateDistance(ULTRASONIC_pudtconfig, 
														 &ULTRASONIC_LocalDistance[i]);
     3a4:	0f 2d       	mov	r16, r15
     3a6:	10 e0       	ldi	r17, 0x00	; 0
			can be used for defining the counter TOP value
		*/
	
	for (uint8 i = 0 ; i < 4 ; i++)
	{
		udtReturnValue = Ultrasonic_udtCalculateDistance(ULTRASONIC_pudtconfig, 
     3a8:	00 0f       	add	r16, r16
     3aa:	11 1f       	adc	r17, r17
     3ac:	e1 e0       	ldi	r30, 0x01	; 1
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	ec 0f       	add	r30, r28
     3b2:	fd 1f       	adc	r31, r29
     3b4:	0e 0f       	add	r16, r30
     3b6:	1f 1f       	adc	r17, r31
     3b8:	b8 01       	movw	r22, r16
     3ba:	c6 01       	movw	r24, r12
     3bc:	0e 94 6c 05 	call	0xad8	; 0xad8 <Ultrasonic_udtCalculateDistance>
			udtReturnValue = LCD_udtGoTo( , );
		
			udtReturnValue = LCD_udt4BitSendData((uint8)ULTRASONIC_LocalDistance[i]);
		}
	*/
		udtReturnValue = LCD_udtGoTo(u8Row, u8Column);
     3c0:	6e 2d       	mov	r22, r14
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 6f 03 	call	0x6de	; 0x6de <LCD_udtGoTo>
		
		udtReturnValue = LCD_udtSendNumber(ULTRASONIC_LocalDistance[i]);
     3c8:	d8 01       	movw	r26, r16
     3ca:	4d 91       	ld	r20, X+
     3cc:	5c 91       	ld	r21, X
     3ce:	24 2f       	mov	r18, r20
     3d0:	35 2f       	mov	r19, r21
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_udtSendNumber>
			
		u8Column += COLUMN4;		
     3e2:	b3 e0       	ldi	r27, 0x03	; 3
     3e4:	eb 0e       	add	r14, r27
		++ULTRASONIC_pudtconfig;
     3e6:	e2 e0       	ldi	r30, 0x02	; 2
     3e8:	ce 0e       	add	r12, r30
     3ea:	d1 1c       	adc	r13, r1
			event occurs on the ICP1 pin (or
			optionally on the analog comparator output for Timer/Counter1). The Input Capture 
			can be used for defining the counter TOP value
		*/
	
	for (uint8 i = 0 ; i < 4 ; i++)
     3ec:	f3 94       	inc	r15
     3ee:	f3 e0       	ldi	r31, 0x03	; 3
     3f0:	ff 15       	cp	r31, r15
     3f2:	c0 f6       	brcc	.-80     	; 0x3a4 <DISPLAY_udtUltrasonicDispLcd+0x38>
		++ULTRASONIC_pudtconfig;
	}

	return udtReturnValue;	
	
}
     3f4:	28 96       	adiw	r28, 0x08	; 8
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	08 95       	ret

00000412 <LCD_udt4bit_send_enable_signal>:
		udtReturnValue = LCD_udtGoTo(u8DDRAMRow, u8DDRAMColumn);
		/* !Comment: Print CGRAM data */
		udtReturnValue = LCD_udt4BitSendData(u8CGRAMLocation);
	}
	return udtReturnValue;
}
     412:	41 e0       	ldi	r20, 0x01	; 1
     414:	67 e0       	ldi	r22, 0x07	; 7
     416:	82 e0       	ldi	r24, 0x02	; 2
     418:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
     41c:	8f ec       	ldi	r24, 0xCF	; 207
     41e:	97 e0       	ldi	r25, 0x07	; 7
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <LCD_udt4bit_send_enable_signal+0xe>
     424:	00 c0       	rjmp	.+0      	; 0x426 <LCD_udt4bit_send_enable_signal+0x14>
     426:	00 00       	nop
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	67 e0       	ldi	r22, 0x07	; 7
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
     432:	ef ec       	ldi	r30, 0xCF	; 207
     434:	f7 e0       	ldi	r31, 0x07	; 7
     436:	31 97       	sbiw	r30, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <LCD_udt4bit_send_enable_signal+0x24>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <LCD_udt4bit_send_enable_signal+0x2a>
     43c:	00 00       	nop
     43e:	08 95       	ret

00000440 <LCD_udt4BitSendCommand>:
     440:	cf 93       	push	r28
     442:	c8 2f       	mov	r28, r24
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	65 e0       	ldi	r22, 0x05	; 5
     448:	82 e0       	ldi	r24, 0x02	; 2
     44a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	66 e0       	ldi	r22, 0x06	; 6
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
     458:	8c 2f       	mov	r24, r28
     45a:	80 7f       	andi	r24, 0xF0	; 240
     45c:	8b bb       	out	0x1b, r24	; 27
     45e:	0e 94 09 02 	call	0x412	; 0x412 <LCD_udt4bit_send_enable_signal>
     462:	c2 95       	swap	r28
     464:	c0 7f       	andi	r28, 0xF0	; 240
     466:	cb bb       	out	0x1b, r28	; 27
     468:	0e 94 09 02 	call	0x412	; 0x412 <LCD_udt4bit_send_enable_signal>
     46c:	ef ec       	ldi	r30, 0xCF	; 207
     46e:	f7 e0       	ldi	r31, 0x07	; 7
     470:	31 97       	sbiw	r30, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <LCD_udt4BitSendCommand+0x30>
     474:	00 c0       	rjmp	.+0      	; 0x476 <LCD_udt4BitSendCommand+0x36>
     476:	00 00       	nop
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <LCD_udt4BitSendData>:
     47c:	cf 93       	push	r28
     47e:	c8 2f       	mov	r28, r24
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	65 e0       	ldi	r22, 0x05	; 5
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	66 e0       	ldi	r22, 0x06	; 6
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
     494:	8c 2f       	mov	r24, r28
     496:	80 7f       	andi	r24, 0xF0	; 240
     498:	8b bb       	out	0x1b, r24	; 27
     49a:	0e 94 09 02 	call	0x412	; 0x412 <LCD_udt4bit_send_enable_signal>
     49e:	c2 95       	swap	r28
     4a0:	c0 7f       	andi	r28, 0xF0	; 240
     4a2:	cb bb       	out	0x1b, r28	; 27
     4a4:	0e 94 09 02 	call	0x412	; 0x412 <LCD_udt4bit_send_enable_signal>
     4a8:	ef ec       	ldi	r30, 0xCF	; 207
     4aa:	f7 e0       	ldi	r31, 0x07	; 7
     4ac:	31 97       	sbiw	r30, 0x01	; 1
     4ae:	f1 f7       	brne	.-4      	; 0x4ac <LCD_udt4BitSendData+0x30>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <LCD_udt4BitSendData+0x36>
     4b2:	00 00       	nop
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <LCD_udtSendNumber>:
     4b8:	2f 92       	push	r2
     4ba:	3f 92       	push	r3
     4bc:	4f 92       	push	r4
     4be:	5f 92       	push	r5
     4c0:	6f 92       	push	r6
     4c2:	7f 92       	push	r7
     4c4:	8f 92       	push	r8
     4c6:	9f 92       	push	r9
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	28 97       	sbiw	r28, 0x08	; 8
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
     4ec:	29 83       	std	Y+1, r18	; 0x01
     4ee:	3a 83       	std	Y+2, r19	; 0x02
     4f0:	4b 83       	std	Y+3, r20	; 0x03
     4f2:	5c 83       	std	Y+4, r21	; 0x04
     4f4:	6d 83       	std	Y+5, r22	; 0x05
     4f6:	7e 83       	std	Y+6, r23	; 0x06
     4f8:	38 2e       	mov	r3, r24
     4fa:	29 2e       	mov	r2, r25
     4fc:	a0 e0       	ldi	r26, 0x00	; 0
     4fe:	0e 94 01 08 	call	0x1002	; 0x1002 <__cmpdi2_s8>
     502:	09 f0       	breq	.+2      	; 0x506 <LCD_udtSendNumber+0x4e>
     504:	82 c0       	rjmp	.+260    	; 0x60a <LCD_udtSendNumber+0x152>
     506:	80 e3       	ldi	r24, 0x30	; 48
     508:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_udt4BitSendData>
     50c:	38 2e       	mov	r3, r24
     50e:	cd c0       	rjmp	.+410    	; 0x6aa <LCD_udtSendNumber+0x1f2>
     510:	2f 81       	ldd	r18, Y+7	; 0x07
     512:	38 85       	ldd	r19, Y+8	; 0x08
     514:	49 2d       	mov	r20, r9
     516:	58 2d       	mov	r21, r8
     518:	67 2d       	mov	r22, r7
     51a:	76 2d       	mov	r23, r6
     51c:	85 2d       	mov	r24, r5
     51e:	94 2d       	mov	r25, r4
     520:	01 e0       	ldi	r16, 0x01	; 1
     522:	0e 94 df 07 	call	0xfbe	; 0xfbe <__ashldi3>
     526:	82 2e       	mov	r8, r18
     528:	93 2e       	mov	r9, r19
     52a:	48 87       	std	Y+8, r20	; 0x08
     52c:	5f 83       	std	Y+7, r21	; 0x07
     52e:	b6 2f       	mov	r27, r22
     530:	a7 2f       	mov	r26, r23
     532:	f8 2f       	mov	r31, r24
     534:	e9 2f       	mov	r30, r25
     536:	02 e0       	ldi	r16, 0x02	; 2
     538:	0e 94 df 07 	call	0xfbe	; 0xfbe <__ashldi3>
     53c:	a2 2e       	mov	r10, r18
     53e:	b3 2e       	mov	r11, r19
     540:	c4 2e       	mov	r12, r20
     542:	d5 2e       	mov	r13, r21
     544:	e6 2e       	mov	r14, r22
     546:	f7 2e       	mov	r15, r23
     548:	08 2f       	mov	r16, r24
     54a:	19 2f       	mov	r17, r25
     54c:	28 2d       	mov	r18, r8
     54e:	39 2d       	mov	r19, r9
     550:	48 85       	ldd	r20, Y+8	; 0x08
     552:	5f 81       	ldd	r21, Y+7	; 0x07
     554:	6b 2f       	mov	r22, r27
     556:	7a 2f       	mov	r23, r26
     558:	8f 2f       	mov	r24, r31
     55a:	9e 2f       	mov	r25, r30
     55c:	0e 94 f8 07 	call	0xff0	; 0xff0 <__adddi3>
     560:	28 87       	std	Y+8, r18	; 0x08
     562:	3f 83       	std	Y+7, r19	; 0x07
     564:	94 2e       	mov	r9, r20
     566:	85 2e       	mov	r8, r21
     568:	76 2e       	mov	r7, r22
     56a:	67 2e       	mov	r6, r23
     56c:	58 2e       	mov	r5, r24
     56e:	49 2e       	mov	r4, r25
     570:	0f 2e       	mov	r0, r31
     572:	fa e0       	ldi	r31, 0x0A	; 10
     574:	af 2e       	mov	r10, r31
     576:	f0 2d       	mov	r31, r0
     578:	b1 2c       	mov	r11, r1
     57a:	c1 2c       	mov	r12, r1
     57c:	d1 2c       	mov	r13, r1
     57e:	e1 2c       	mov	r14, r1
     580:	f1 2c       	mov	r15, r1
     582:	00 e0       	ldi	r16, 0x00	; 0
     584:	10 e0       	ldi	r17, 0x00	; 0
     586:	29 81       	ldd	r18, Y+1	; 0x01
     588:	3a 81       	ldd	r19, Y+2	; 0x02
     58a:	4b 81       	ldd	r20, Y+3	; 0x03
     58c:	5c 81       	ldd	r21, Y+4	; 0x04
     58e:	6d 81       	ldd	r22, Y+5	; 0x05
     590:	7e 81       	ldd	r23, Y+6	; 0x06
     592:	83 2d       	mov	r24, r3
     594:	92 2d       	mov	r25, r2
     596:	0e 94 80 07 	call	0xf00	; 0xf00 <__umoddi3>
     59a:	a2 2e       	mov	r10, r18
     59c:	b3 2e       	mov	r11, r19
     59e:	c4 2e       	mov	r12, r20
     5a0:	d5 2e       	mov	r13, r21
     5a2:	e6 2e       	mov	r14, r22
     5a4:	f7 2e       	mov	r15, r23
     5a6:	08 2f       	mov	r16, r24
     5a8:	19 2f       	mov	r17, r25
     5aa:	28 85       	ldd	r18, Y+8	; 0x08
     5ac:	3f 81       	ldd	r19, Y+7	; 0x07
     5ae:	49 2d       	mov	r20, r9
     5b0:	58 2d       	mov	r21, r8
     5b2:	67 2d       	mov	r22, r7
     5b4:	76 2d       	mov	r23, r6
     5b6:	85 2d       	mov	r24, r5
     5b8:	94 2d       	mov	r25, r4
     5ba:	0e 94 f8 07 	call	0xff0	; 0xff0 <__adddi3>
     5be:	2f 83       	std	Y+7, r18	; 0x07
     5c0:	38 87       	std	Y+8, r19	; 0x08
     5c2:	94 2e       	mov	r9, r20
     5c4:	85 2e       	mov	r8, r21
     5c6:	76 2e       	mov	r7, r22
     5c8:	67 2e       	mov	r6, r23
     5ca:	58 2e       	mov	r5, r24
     5cc:	49 2e       	mov	r4, r25
     5ce:	0f 2e       	mov	r0, r31
     5d0:	fa e0       	ldi	r31, 0x0A	; 10
     5d2:	af 2e       	mov	r10, r31
     5d4:	f0 2d       	mov	r31, r0
     5d6:	b1 2c       	mov	r11, r1
     5d8:	c1 2c       	mov	r12, r1
     5da:	d1 2c       	mov	r13, r1
     5dc:	e1 2c       	mov	r14, r1
     5de:	f1 2c       	mov	r15, r1
     5e0:	00 e0       	ldi	r16, 0x00	; 0
     5e2:	10 e0       	ldi	r17, 0x00	; 0
     5e4:	29 81       	ldd	r18, Y+1	; 0x01
     5e6:	3a 81       	ldd	r19, Y+2	; 0x02
     5e8:	4b 81       	ldd	r20, Y+3	; 0x03
     5ea:	5c 81       	ldd	r21, Y+4	; 0x04
     5ec:	6d 81       	ldd	r22, Y+5	; 0x05
     5ee:	7e 81       	ldd	r23, Y+6	; 0x06
     5f0:	83 2d       	mov	r24, r3
     5f2:	92 2d       	mov	r25, r2
     5f4:	0e 94 82 07 	call	0xf04	; 0xf04 <__udivdi3>
     5f8:	29 83       	std	Y+1, r18	; 0x01
     5fa:	3a 83       	std	Y+2, r19	; 0x02
     5fc:	4b 83       	std	Y+3, r20	; 0x03
     5fe:	5c 83       	std	Y+4, r21	; 0x04
     600:	6d 83       	std	Y+5, r22	; 0x05
     602:	7e 83       	std	Y+6, r23	; 0x06
     604:	38 2e       	mov	r3, r24
     606:	29 2e       	mov	r2, r25
     608:	09 c0       	rjmp	.+18     	; 0x61c <LCD_udtSendNumber+0x164>
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	18 86       	std	Y+8, r1	; 0x08
     60e:	91 2c       	mov	r9, r1
     610:	81 2c       	mov	r8, r1
     612:	71 2c       	mov	r7, r1
     614:	61 2c       	mov	r6, r1
     616:	51 2c       	mov	r5, r1
     618:	41 2c       	mov	r4, r1
     61a:	8f 83       	std	Y+7, r24	; 0x07
     61c:	29 81       	ldd	r18, Y+1	; 0x01
     61e:	3a 81       	ldd	r19, Y+2	; 0x02
     620:	4b 81       	ldd	r20, Y+3	; 0x03
     622:	5c 81       	ldd	r21, Y+4	; 0x04
     624:	6d 81       	ldd	r22, Y+5	; 0x05
     626:	7e 81       	ldd	r23, Y+6	; 0x06
     628:	83 2d       	mov	r24, r3
     62a:	92 2d       	mov	r25, r2
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	0e 94 01 08 	call	0x1002	; 0x1002 <__cmpdi2_s8>
     632:	09 f0       	breq	.+2      	; 0x636 <LCD_udtSendNumber+0x17e>
     634:	6d cf       	rjmp	.-294    	; 0x510 <LCD_udtSendNumber+0x58>
     636:	31 2c       	mov	r3, r1
     638:	2c c0       	rjmp	.+88     	; 0x692 <LCD_udtSendNumber+0x1da>
     63a:	0f 2e       	mov	r0, r31
     63c:	fa e0       	ldi	r31, 0x0A	; 10
     63e:	af 2e       	mov	r10, r31
     640:	f0 2d       	mov	r31, r0
     642:	b1 2c       	mov	r11, r1
     644:	c1 2c       	mov	r12, r1
     646:	d1 2c       	mov	r13, r1
     648:	e1 2c       	mov	r14, r1
     64a:	f1 2c       	mov	r15, r1
     64c:	00 e0       	ldi	r16, 0x00	; 0
     64e:	10 e0       	ldi	r17, 0x00	; 0
     650:	2f 81       	ldd	r18, Y+7	; 0x07
     652:	38 85       	ldd	r19, Y+8	; 0x08
     654:	49 2d       	mov	r20, r9
     656:	58 2d       	mov	r21, r8
     658:	67 2d       	mov	r22, r7
     65a:	76 2d       	mov	r23, r6
     65c:	85 2d       	mov	r24, r5
     65e:	94 2d       	mov	r25, r4
     660:	0e 94 80 07 	call	0xf00	; 0xf00 <__umoddi3>
     664:	80 e3       	ldi	r24, 0x30	; 48
     666:	82 0f       	add	r24, r18
     668:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_udt4BitSendData>
     66c:	38 2e       	mov	r3, r24
     66e:	2f 81       	ldd	r18, Y+7	; 0x07
     670:	38 85       	ldd	r19, Y+8	; 0x08
     672:	49 2d       	mov	r20, r9
     674:	58 2d       	mov	r21, r8
     676:	67 2d       	mov	r22, r7
     678:	76 2d       	mov	r23, r6
     67a:	85 2d       	mov	r24, r5
     67c:	94 2d       	mov	r25, r4
     67e:	0e 94 82 07 	call	0xf04	; 0xf04 <__udivdi3>
     682:	2f 83       	std	Y+7, r18	; 0x07
     684:	38 87       	std	Y+8, r19	; 0x08
     686:	94 2e       	mov	r9, r20
     688:	85 2e       	mov	r8, r21
     68a:	76 2e       	mov	r7, r22
     68c:	67 2e       	mov	r6, r23
     68e:	58 2e       	mov	r5, r24
     690:	49 2e       	mov	r4, r25
     692:	2f 81       	ldd	r18, Y+7	; 0x07
     694:	38 85       	ldd	r19, Y+8	; 0x08
     696:	49 2d       	mov	r20, r9
     698:	58 2d       	mov	r21, r8
     69a:	67 2d       	mov	r22, r7
     69c:	76 2d       	mov	r23, r6
     69e:	85 2d       	mov	r24, r5
     6a0:	94 2d       	mov	r25, r4
     6a2:	a1 e0       	ldi	r26, 0x01	; 1
     6a4:	0e 94 01 08 	call	0x1002	; 0x1002 <__cmpdi2_s8>
     6a8:	41 f6       	brne	.-112    	; 0x63a <LCD_udtSendNumber+0x182>
     6aa:	83 2d       	mov	r24, r3
     6ac:	28 96       	adiw	r28, 0x08	; 8
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
     6c8:	bf 90       	pop	r11
     6ca:	af 90       	pop	r10
     6cc:	9f 90       	pop	r9
     6ce:	8f 90       	pop	r8
     6d0:	7f 90       	pop	r7
     6d2:	6f 90       	pop	r6
     6d4:	5f 90       	pop	r5
     6d6:	4f 90       	pop	r4
     6d8:	3f 90       	pop	r3
     6da:	2f 90       	pop	r2
     6dc:	08 95       	ret

000006de <LCD_udtGoTo>:
     6de:	81 11       	cpse	r24, r1
     6e0:	05 c0       	rjmp	.+10     	; 0x6ec <LCD_udtGoTo+0xe>
     6e2:	80 e8       	ldi	r24, 0x80	; 128
     6e4:	86 0f       	add	r24, r22
     6e6:	0e 94 20 02 	call	0x440	; 0x440 <LCD_udt4BitSendCommand>
     6ea:	08 95       	ret
     6ec:	81 30       	cpi	r24, 0x01	; 1
     6ee:	29 f4       	brne	.+10     	; 0x6fa <LCD_udtGoTo+0x1c>
     6f0:	80 ec       	ldi	r24, 0xC0	; 192
     6f2:	86 0f       	add	r24, r22
     6f4:	0e 94 20 02 	call	0x440	; 0x440 <LCD_udt4BitSendCommand>
     6f8:	08 95       	ret
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	08 95       	ret

000006fe <LCD_udtClearScreen>:
void
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;

	udtReturnValue = LCD_udt4BitSendCommand(LCD_CLEAR_DISPLAY);
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	0e 94 20 02 	call	0x440	; 0x440 <LCD_udt4BitSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     704:	ef ea       	ldi	r30, 0xAF	; 175
     706:	f6 e3       	ldi	r31, 0x36	; 54
     708:	31 97       	sbiw	r30, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <LCD_udtClearScreen+0xa>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <LCD_udtClearScreen+0x10>
     70e:	00 00       	nop
	_delay_ms(7); //wait more than 1.53 ms
	
	return udtReturnValue;
}
     710:	08 95       	ret

00000712 <LCD_udt4BitInitialize>:
     712:	2f ef       	ldi	r18, 0xFF	; 255
     714:	89 ef       	ldi	r24, 0xF9	; 249
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	21 50       	subi	r18, 0x01	; 1
     71a:	80 40       	sbci	r24, 0x00	; 0
     71c:	90 40       	sbci	r25, 0x00	; 0
     71e:	e1 f7       	brne	.-8      	; 0x718 <LCD_udt4BitInitialize+0x6>
     720:	00 c0       	rjmp	.+0      	; 0x722 <LCD_udt4BitInitialize+0x10>
     722:	00 00       	nop
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	/* !Comment: initialization of data pins control pins */
	//LCD_DATA_DIRECTION = 0xFF;
	_delay_ms(40);	
	udtReturnValue = DIO_udtSetPinDirection(CLCD_DATA_PORT, CLCD_D4, DIO_DIR_OUTPUT);
     724:	41 e0       	ldi	r20, 0x01	; 1
     726:	64 e0       	ldi	r22, 0x04	; 4
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_DATA_PORT, CLCD_D5, DIO_DIR_OUTPUT);
     72e:	41 e0       	ldi	r20, 0x01	; 1
     730:	65 e0       	ldi	r22, 0x05	; 5
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_DATA_PORT, CLCD_D6, DIO_DIR_OUTPUT);
     738:	41 e0       	ldi	r20, 0x01	; 1
     73a:	66 e0       	ldi	r22, 0x06	; 6
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_DATA_PORT, CLCD_D7, DIO_DIR_OUTPUT);
     742:	41 e0       	ldi	r20, 0x01	; 1
     744:	67 e0       	ldi	r22, 0x07	; 7
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
	
	udtReturnValue = DIO_udtSetPinDirection(CLCD_CONTROL_PORT, CLCD_RS, DIO_DIR_OUTPUT);
     74c:	41 e0       	ldi	r20, 0x01	; 1
     74e:	65 e0       	ldi	r22, 0x05	; 5
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_CONTROL_PORT, CLCD_RW, DIO_DIR_OUTPUT);
     756:	41 e0       	ldi	r20, 0x01	; 1
     758:	66 e0       	ldi	r22, 0x06	; 6
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_CONTROL_PORT, CLCD_EN, DIO_DIR_OUTPUT);
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	67 e0       	ldi	r22, 0x07	; 7
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
	
	/* !Comment: initialization of some command from data sheet */	
		//udtReturnValue = LCD_udt4BitSendCommand(0x33);
		//udtReturnValue = LCD_udt4BitSendCommand(0x32);
	udtReturnValue = LCD_udt4BitSendCommand(LCD_RETURN_HOME);
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	0e 94 20 02 	call	0x440	; 0x440 <LCD_udt4BitSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     770:	ef ec       	ldi	r30, 0xCF	; 207
     772:	f7 e0       	ldi	r31, 0x07	; 7
     774:	31 97       	sbiw	r30, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <LCD_udt4BitInitialize+0x62>
     778:	00 c0       	rjmp	.+0      	; 0x77a <LCD_udt4BitInitialize+0x68>
     77a:	00 00       	nop
	_delay_us(1000);
	
	udtReturnValue = LCD_udt4BitSendCommand(LCD_4BIT_MODE_2_LINE_5_IN_7);
     77c:	88 e2       	ldi	r24, 0x28	; 40
     77e:	0e 94 20 02 	call	0x440	; 0x440 <LCD_udt4BitSendCommand>
     782:	8f ec       	ldi	r24, 0xCF	; 207
     784:	97 e0       	ldi	r25, 0x07	; 7
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <LCD_udt4BitInitialize+0x74>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <LCD_udt4BitInitialize+0x7a>
     78c:	00 00       	nop
	_delay_us(1000);
	
	udtReturnValue = LCD_udt4BitSendCommand(LCD_DISPLAY_ON_UNDERLINE_ON_CURSOR_OFF); 
     78e:	8c e0       	ldi	r24, 0x0C	; 12
     790:	0e 94 20 02 	call	0x440	; 0x440 <LCD_udt4BitSendCommand>
     794:	ef ec       	ldi	r30, 0xCF	; 207
     796:	f7 e0       	ldi	r31, 0x07	; 7
     798:	31 97       	sbiw	r30, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <LCD_udt4BitInitialize+0x86>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <LCD_udt4BitInitialize+0x8c>
     79e:	00 00       	nop
	_delay_us(1000);
	
	udtReturnValue = LCD_udtClearScreen();
     7a0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCD_udtClearScreen>
	
	udtReturnValue = LCD_udt4BitSendCommand(LCD_ENTRY_MODE_INC_SHIFT_OFF);
     7a4:	86 e0       	ldi	r24, 0x06	; 6
     7a6:	0e 94 20 02 	call	0x440	; 0x440 <LCD_udt4BitSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7aa:	ef ec       	ldi	r30, 0xCF	; 207
     7ac:	f7 e0       	ldi	r31, 0x07	; 7
     7ae:	31 97       	sbiw	r30, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <LCD_udt4BitInitialize+0x9c>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <LCD_udt4BitInitialize+0xa2>
     7b4:	00 00       	nop
	_delay_ms(1);	
	
	return udtReturnValue;	
}	
     7b6:	08 95       	ret

000007b8 <TIMER1_vdInit>:
	else
	{
		udtReturnValue = E_NOT_OK;
	}
	return udtReturnValue;
}
     7b8:	8f b5       	in	r24, 0x2f	; 47
     7ba:	8c 7f       	andi	r24, 0xFC	; 252
     7bc:	8f bd       	out	0x2f, r24	; 47
     7be:	8e b5       	in	r24, 0x2e	; 46
     7c0:	98 2f       	mov	r25, r24
     7c2:	97 7e       	andi	r25, 0xE7	; 231
     7c4:	9e bd       	out	0x2e, r25	; 46
     7c6:	1d bc       	out	0x2d, r1	; 45
     7c8:	1c bc       	out	0x2c, r1	; 44
     7ca:	99 b7       	in	r25, 0x39	; 57
     7cc:	9b 7f       	andi	r25, 0xFB	; 251
     7ce:	99 bf       	out	0x39, r25	; 57
     7d0:	80 7e       	andi	r24, 0xE0	; 224
     7d2:	81 60       	ori	r24, 0x01	; 1
     7d4:	8e bd       	out	0x2e, r24	; 46
     7d6:	08 95       	ret

000007d8 <TIMER1_vdSetPreload>:
     7d8:	9d bd       	out	0x2d, r25	; 45
     7da:	8c bd       	out	0x2c, r24	; 44
     7dc:	08 95       	ret

000007de <TIMER_u16GetICR>:
     7de:	86 b5       	in	r24, 0x26	; 38
     7e0:	97 b5       	in	r25, 0x27	; 39
     7e2:	08 95       	ret

000007e4 <__vector_4>:
/* TIMER2 COMP ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
     7ee:	2f 93       	push	r18
     7f0:	3f 93       	push	r19
     7f2:	4f 93       	push	r20
     7f4:	5f 93       	push	r21
     7f6:	6f 93       	push	r22
     7f8:	7f 93       	push	r23
     7fa:	8f 93       	push	r24
     7fc:	9f 93       	push	r25
     7fe:	af 93       	push	r26
     800:	bf 93       	push	r27
     802:	ef 93       	push	r30
     804:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
     806:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <__data_end>
     80a:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <__data_end+0x1>
     80e:	30 97       	sbiw	r30, 0x00	; 0
     810:	09 f0       	breq	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]();
     812:	09 95       	icall
	}	
}
     814:	ff 91       	pop	r31
     816:	ef 91       	pop	r30
     818:	bf 91       	pop	r27
     81a:	af 91       	pop	r26
     81c:	9f 91       	pop	r25
     81e:	8f 91       	pop	r24
     820:	7f 91       	pop	r23
     822:	6f 91       	pop	r22
     824:	5f 91       	pop	r21
     826:	4f 91       	pop	r20
     828:	3f 91       	pop	r19
     82a:	2f 91       	pop	r18
     82c:	0f 90       	pop	r0
     82e:	0f be       	out	0x3f, r0	; 63
     830:	0f 90       	pop	r0
     832:	1f 90       	pop	r1
     834:	18 95       	reti

00000836 <__vector_5>:
/* TIMER2 OVF ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
     836:	1f 92       	push	r1
     838:	0f 92       	push	r0
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	0f 92       	push	r0
     83e:	11 24       	eor	r1, r1
     840:	2f 93       	push	r18
     842:	3f 93       	push	r19
     844:	4f 93       	push	r20
     846:	5f 93       	push	r21
     848:	6f 93       	push	r22
     84a:	7f 93       	push	r23
     84c:	8f 93       	push	r24
     84e:	9f 93       	push	r25
     850:	af 93       	push	r26
     852:	bf 93       	push	r27
     854:	ef 93       	push	r30
     856:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
     858:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end+0x2>
     85c:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x3>
     860:	30 97       	sbiw	r30, 0x00	; 0
     862:	09 f0       	breq	.+2      	; 0x866 <__stack+0x7>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]();
     864:	09 95       	icall
	}	
}
     866:	ff 91       	pop	r31
     868:	ef 91       	pop	r30
     86a:	bf 91       	pop	r27
     86c:	af 91       	pop	r26
     86e:	9f 91       	pop	r25
     870:	8f 91       	pop	r24
     872:	7f 91       	pop	r23
     874:	6f 91       	pop	r22
     876:	5f 91       	pop	r21
     878:	4f 91       	pop	r20
     87a:	3f 91       	pop	r19
     87c:	2f 91       	pop	r18
     87e:	0f 90       	pop	r0
     880:	0f be       	out	0x3f, r0	; 63
     882:	0f 90       	pop	r0
     884:	1f 90       	pop	r1
     886:	18 95       	reti

00000888 <__vector_6>:
/* TIMER1 CAPT ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
     888:	1f 92       	push	r1
     88a:	0f 92       	push	r0
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	0f 92       	push	r0
     890:	11 24       	eor	r1, r1
     892:	2f 93       	push	r18
     894:	3f 93       	push	r19
     896:	4f 93       	push	r20
     898:	5f 93       	push	r21
     89a:	6f 93       	push	r22
     89c:	7f 93       	push	r23
     89e:	8f 93       	push	r24
     8a0:	9f 93       	push	r25
     8a2:	af 93       	push	r26
     8a4:	bf 93       	push	r27
     8a6:	ef 93       	push	r30
     8a8:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
     8aa:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end+0x4>
     8ae:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x5>
     8b2:	30 97       	sbiw	r30, 0x00	; 0
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <__vector_6+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]();
     8b6:	09 95       	icall
	}	
}
     8b8:	ff 91       	pop	r31
     8ba:	ef 91       	pop	r30
     8bc:	bf 91       	pop	r27
     8be:	af 91       	pop	r26
     8c0:	9f 91       	pop	r25
     8c2:	8f 91       	pop	r24
     8c4:	7f 91       	pop	r23
     8c6:	6f 91       	pop	r22
     8c8:	5f 91       	pop	r21
     8ca:	4f 91       	pop	r20
     8cc:	3f 91       	pop	r19
     8ce:	2f 91       	pop	r18
     8d0:	0f 90       	pop	r0
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	0f 90       	pop	r0
     8d6:	1f 90       	pop	r1
     8d8:	18 95       	reti

000008da <__vector_7>:
/* TIMER1 COMPA ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
     8da:	1f 92       	push	r1
     8dc:	0f 92       	push	r0
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	0f 92       	push	r0
     8e2:	11 24       	eor	r1, r1
     8e4:	2f 93       	push	r18
     8e6:	3f 93       	push	r19
     8e8:	4f 93       	push	r20
     8ea:	5f 93       	push	r21
     8ec:	6f 93       	push	r22
     8ee:	7f 93       	push	r23
     8f0:	8f 93       	push	r24
     8f2:	9f 93       	push	r25
     8f4:	af 93       	push	r26
     8f6:	bf 93       	push	r27
     8f8:	ef 93       	push	r30
     8fa:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
     8fc:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end+0x6>
     900:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x7>
     904:	30 97       	sbiw	r30, 0x00	; 0
     906:	09 f0       	breq	.+2      	; 0x90a <__vector_7+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]();
     908:	09 95       	icall
	}	
}
     90a:	ff 91       	pop	r31
     90c:	ef 91       	pop	r30
     90e:	bf 91       	pop	r27
     910:	af 91       	pop	r26
     912:	9f 91       	pop	r25
     914:	8f 91       	pop	r24
     916:	7f 91       	pop	r23
     918:	6f 91       	pop	r22
     91a:	5f 91       	pop	r21
     91c:	4f 91       	pop	r20
     91e:	3f 91       	pop	r19
     920:	2f 91       	pop	r18
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	0f 90       	pop	r0
     928:	1f 90       	pop	r1
     92a:	18 95       	reti

0000092c <__vector_8>:
/* TIMER1 COMPB ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
     92c:	1f 92       	push	r1
     92e:	0f 92       	push	r0
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	0f 92       	push	r0
     934:	11 24       	eor	r1, r1
     936:	2f 93       	push	r18
     938:	3f 93       	push	r19
     93a:	4f 93       	push	r20
     93c:	5f 93       	push	r21
     93e:	6f 93       	push	r22
     940:	7f 93       	push	r23
     942:	8f 93       	push	r24
     944:	9f 93       	push	r25
     946:	af 93       	push	r26
     948:	bf 93       	push	r27
     94a:	ef 93       	push	r30
     94c:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
     94e:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end+0x8>
     952:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x9>
     956:	30 97       	sbiw	r30, 0x00	; 0
     958:	09 f0       	breq	.+2      	; 0x95c <__vector_8+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]();
     95a:	09 95       	icall
	}	
}
     95c:	ff 91       	pop	r31
     95e:	ef 91       	pop	r30
     960:	bf 91       	pop	r27
     962:	af 91       	pop	r26
     964:	9f 91       	pop	r25
     966:	8f 91       	pop	r24
     968:	7f 91       	pop	r23
     96a:	6f 91       	pop	r22
     96c:	5f 91       	pop	r21
     96e:	4f 91       	pop	r20
     970:	3f 91       	pop	r19
     972:	2f 91       	pop	r18
     974:	0f 90       	pop	r0
     976:	0f be       	out	0x3f, r0	; 63
     978:	0f 90       	pop	r0
     97a:	1f 90       	pop	r1
     97c:	18 95       	reti

0000097e <__vector_9>:
/* TIMER1 OVF ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
     97e:	1f 92       	push	r1
     980:	0f 92       	push	r0
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	0f 92       	push	r0
     986:	11 24       	eor	r1, r1
     988:	2f 93       	push	r18
     98a:	3f 93       	push	r19
     98c:	4f 93       	push	r20
     98e:	5f 93       	push	r21
     990:	6f 93       	push	r22
     992:	7f 93       	push	r23
     994:	8f 93       	push	r24
     996:	9f 93       	push	r25
     998:	af 93       	push	r26
     99a:	bf 93       	push	r27
     99c:	ef 93       	push	r30
     99e:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
     9a0:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end+0xa>
     9a4:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__data_end+0xb>
     9a8:	30 97       	sbiw	r30, 0x00	; 0
     9aa:	09 f0       	breq	.+2      	; 0x9ae <__vector_9+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]();
     9ac:	09 95       	icall
	}	
}
     9ae:	ff 91       	pop	r31
     9b0:	ef 91       	pop	r30
     9b2:	bf 91       	pop	r27
     9b4:	af 91       	pop	r26
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	7f 91       	pop	r23
     9bc:	6f 91       	pop	r22
     9be:	5f 91       	pop	r21
     9c0:	4f 91       	pop	r20
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	0f 90       	pop	r0
     9cc:	1f 90       	pop	r1
     9ce:	18 95       	reti

000009d0 <__vector_10>:
/* TIMER0 COMP ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
     9d0:	1f 92       	push	r1
     9d2:	0f 92       	push	r0
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	0f 92       	push	r0
     9d8:	11 24       	eor	r1, r1
     9da:	2f 93       	push	r18
     9dc:	3f 93       	push	r19
     9de:	4f 93       	push	r20
     9e0:	5f 93       	push	r21
     9e2:	6f 93       	push	r22
     9e4:	7f 93       	push	r23
     9e6:	8f 93       	push	r24
     9e8:	9f 93       	push	r25
     9ea:	af 93       	push	r26
     9ec:	bf 93       	push	r27
     9ee:	ef 93       	push	r30
     9f0:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
     9f2:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__data_end+0xc>
     9f6:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__data_end+0xd>
     9fa:	30 97       	sbiw	r30, 0x00	; 0
     9fc:	09 f0       	breq	.+2      	; 0xa00 <__vector_10+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]();
     9fe:	09 95       	icall
	}	
}
     a00:	ff 91       	pop	r31
     a02:	ef 91       	pop	r30
     a04:	bf 91       	pop	r27
     a06:	af 91       	pop	r26
     a08:	9f 91       	pop	r25
     a0a:	8f 91       	pop	r24
     a0c:	7f 91       	pop	r23
     a0e:	6f 91       	pop	r22
     a10:	5f 91       	pop	r21
     a12:	4f 91       	pop	r20
     a14:	3f 91       	pop	r19
     a16:	2f 91       	pop	r18
     a18:	0f 90       	pop	r0
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	0f 90       	pop	r0
     a1e:	1f 90       	pop	r1
     a20:	18 95       	reti

00000a22 <__vector_11>:
/* TIMER0 OVF ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	0f 92       	push	r0
     a2a:	11 24       	eor	r1, r1
     a2c:	2f 93       	push	r18
     a2e:	3f 93       	push	r19
     a30:	4f 93       	push	r20
     a32:	5f 93       	push	r21
     a34:	6f 93       	push	r22
     a36:	7f 93       	push	r23
     a38:	8f 93       	push	r24
     a3a:	9f 93       	push	r25
     a3c:	af 93       	push	r26
     a3e:	bf 93       	push	r27
     a40:	ef 93       	push	r30
     a42:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
     a44:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__bss_end>
     a48:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <__bss_end+0x1>
     a4c:	30 97       	sbiw	r30, 0x00	; 0
     a4e:	09 f0       	breq	.+2      	; 0xa52 <__vector_11+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]();
     a50:	09 95       	icall
	}
     a52:	ff 91       	pop	r31
     a54:	ef 91       	pop	r30
     a56:	bf 91       	pop	r27
     a58:	af 91       	pop	r26
     a5a:	9f 91       	pop	r25
     a5c:	8f 91       	pop	r24
     a5e:	7f 91       	pop	r23
     a60:	6f 91       	pop	r22
     a62:	5f 91       	pop	r21
     a64:	4f 91       	pop	r20
     a66:	3f 91       	pop	r19
     a68:	2f 91       	pop	r18
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <Ultrasonic_udtInit>:
/***********************************************************************************************************/
Std_ReturnType Ultrasonic_udtInit
(
const ULTRASONIC_obj_t* ULTRASONIC_pudtobj
)
{
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
	*/

	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	
	if (NULL == ULTRASONIC_pudtobj)
     a78:	00 97       	sbiw	r24, 0x00	; 0
     a7a:	51 f1       	breq	.+84     	; 0xad0 <Ultrasonic_udtInit+0x5c>
     a7c:	ec 01       	movw	r28, r24
		udtReturnValue = E_NOT_OK;
	}
	else
	{
	udtReturnValue = DIO_udtSetPinDirection(ULTRASONIC_pudtobj->udtTriggerPin.port,
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
     a7e:	88 81       	ld	r24, Y
     a80:	68 2f       	mov	r22, r24
     a82:	66 95       	lsr	r22
     a84:	66 95       	lsr	r22
     a86:	66 95       	lsr	r22
     a88:	67 70       	andi	r22, 0x07	; 7
	{
		udtReturnValue = E_NOT_OK;
	}
	else
	{
	udtReturnValue = DIO_udtSetPinDirection(ULTRASONIC_pudtobj->udtTriggerPin.port,
     a8a:	41 e0       	ldi	r20, 0x01	; 1
     a8c:	87 70       	andi	r24, 0x07	; 7
     a8e:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
											ULTRASONIC_TRIG_OUTPUT
											);
	udtReturnValue = DIO_udtSetPinDirection(ULTRASONIC_pudtobj->udtEchoPin.port,
											ULTRASONIC_pudtobj->udtEchoPin.pin,
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	68 2f       	mov	r22, r24
     a96:	66 95       	lsr	r22
     a98:	66 95       	lsr	r22
     a9a:	66 95       	lsr	r22
     a9c:	67 70       	andi	r22, 0x07	; 7
	{
	udtReturnValue = DIO_udtSetPinDirection(ULTRASONIC_pudtobj->udtTriggerPin.port,
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
											ULTRASONIC_TRIG_OUTPUT
											);
	udtReturnValue = DIO_udtSetPinDirection(ULTRASONIC_pudtobj->udtEchoPin.port,
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	87 70       	andi	r24, 0x07	; 7
     aa2:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
											);



	udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
										ULTRASONIC_pudtobj->udtTriggerPin.pin,
     aa6:	88 81       	ld	r24, Y
     aa8:	68 2f       	mov	r22, r24
     aaa:	66 95       	lsr	r22
     aac:	66 95       	lsr	r22
     aae:	66 95       	lsr	r22
     ab0:	67 70       	andi	r22, 0x07	; 7
											ULTRASONIC_ECHO_INPUT											
											);



	udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	87 70       	andi	r24, 0x07	; 7
     ab6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
										ULTRASONIC_pudtobj->udtTriggerPin.pin,
										ULTRASONIC_TRIG_LOW
										);

	udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
										ULTRASONIC_pudtobj->udtEchoPin.pin,
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	68 2f       	mov	r22, r24
     abe:	66 95       	lsr	r22
     ac0:	66 95       	lsr	r22
     ac2:	66 95       	lsr	r22
     ac4:	67 70       	andi	r22, 0x07	; 7
	udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
										ULTRASONIC_pudtobj->udtTriggerPin.pin,
										ULTRASONIC_TRIG_LOW
										);

	udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	87 70       	andi	r24, 0x07	; 7
     aca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <Ultrasonic_udtInit+0x5e>
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	
	if (NULL == ULTRASONIC_pudtobj)
	{
		udtReturnValue = E_NOT_OK;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
										ULTRASONIC_TRIG_LOW
										);											
	}
	
	return udtReturnValue;	
}
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <Ultrasonic_udtCalculateDistance>:
Std_ReturnType Ultrasonic_udtCalculateDistance
(
const ULTRASONIC_obj_t* ULTRASONIC_pudtobj, 
uint16* ULTRASONIC_pu16Distance
)
{
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	1f 92       	push	r1
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType udtReturnValue = E_NOT_OK;
    logic_t EchoPinLogic = DIO_LOW;
     aec:	19 82       	std	Y+1, r1	; 0x01
	uint16 Timers_u16IcuValue = 0;
	
	if (NULL == ULTRASONIC_pudtobj)
     aee:	00 97       	sbiw	r24, 0x00	; 0
     af0:	09 f4       	brne	.+2      	; 0xaf4 <Ultrasonic_udtCalculateDistance+0x1c>
     af2:	5e c0       	rjmp	.+188    	; 0xbb0 <Ultrasonic_udtCalculateDistance+0xd8>
     af4:	6b 01       	movw	r12, r22
     af6:	8c 01       	movw	r16, r24
	}
	else
	{
        /* Send Trigger Signal to the Ultrasonic Trigger Pin */
		udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
     af8:	fc 01       	movw	r30, r24
     afa:	80 81       	ld	r24, Z
     afc:	68 2f       	mov	r22, r24
     afe:	66 95       	lsr	r22
     b00:	66 95       	lsr	r22
     b02:	66 95       	lsr	r22
     b04:	67 70       	andi	r22, 0x07	; 7
		udtReturnValue = E_NOT_OK;
	}
	else
	{
        /* Send Trigger Signal to the Ultrasonic Trigger Pin */
		udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
     b06:	41 e0       	ldi	r20, 0x01	; 1
     b08:	87 70       	andi	r24, 0x07	; 7
     b0a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b0e:	fa e1       	ldi	r31, 0x1A	; 26
     b10:	fa 95       	dec	r31
     b12:	f1 f7       	brne	.-4      	; 0xb10 <Ultrasonic_udtCalculateDistance+0x38>
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <Ultrasonic_udtCalculateDistance+0x3e>
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
											ULTRASONIC_TRIG_HIGH
											);
		_delay_us(10);
		udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
     b16:	f8 01       	movw	r30, r16
     b18:	80 81       	ld	r24, Z
     b1a:	68 2f       	mov	r22, r24
     b1c:	66 95       	lsr	r22
     b1e:	66 95       	lsr	r22
     b20:	66 95       	lsr	r22
     b22:	67 70       	andi	r22, 0x07	; 7
		udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
											ULTRASONIC_TRIG_HIGH
											);
		_delay_us(10);
		udtReturnValue = DIO_udtSetPinValue(ULTRASONIC_pudtobj->udtTriggerPin.port,
     b24:	40 e0       	ldi	r20, 0x00	; 0
     b26:	87 70       	andi	r24, 0x07	; 7
     b28:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
     b2c:	f8 2e       	mov	r15, r24
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
											ULTRASONIC_TRIG_LOW
											);		
	
        /* Wait the Echo pin to be High */
		while (DIO_LOW == EchoPinLogic)
     b2e:	0e c0       	rjmp	.+28     	; 0xb4c <Ultrasonic_udtCalculateDistance+0x74>
		{
			udtReturnValue = DIO_udtGetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
												ULTRASONIC_pudtobj->udtEchoPin.pin,
     b30:	f8 01       	movw	r30, r16
     b32:	81 81       	ldd	r24, Z+1	; 0x01
     b34:	68 2f       	mov	r22, r24
     b36:	66 95       	lsr	r22
     b38:	66 95       	lsr	r22
     b3a:	66 95       	lsr	r22
     b3c:	67 70       	andi	r22, 0x07	; 7
											);		
	
        /* Wait the Echo pin to be High */
		while (DIO_LOW == EchoPinLogic)
		{
			udtReturnValue = DIO_udtGetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
     b3e:	ae 01       	movw	r20, r28
     b40:	4f 5f       	subi	r20, 0xFF	; 255
     b42:	5f 4f       	sbci	r21, 0xFF	; 255
     b44:	87 70       	andi	r24, 0x07	; 7
     b46:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_udtGetPinValue>
     b4a:	f8 2e       	mov	r15, r24
											ULTRASONIC_pudtobj->udtTriggerPin.pin,
											ULTRASONIC_TRIG_LOW
											);		
	
        /* Wait the Echo pin to be High */
		while (DIO_LOW == EchoPinLogic)
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	88 23       	and	r24, r24
     b50:	79 f3       	breq	.-34     	; 0xb30 <Ultrasonic_udtCalculateDistance+0x58>
												&EchoPinLogic);
		}


        /* Clear Timer1 Ticks TCNT1 */
		TIMER1_vdSetPreload(Timers_u16IcuValue);
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <TIMER1_vdSetPreload>
		
        /* Wait the Echo pin to be Low */
		while (DIO_HIGH == EchoPinLogic)
     b5a:	0e c0       	rjmp	.+28     	; 0xb78 <Ultrasonic_udtCalculateDistance+0xa0>
		{
			udtReturnValue = DIO_udtGetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
												ULTRASONIC_pudtobj->udtEchoPin.pin,
     b5c:	f8 01       	movw	r30, r16
     b5e:	81 81       	ldd	r24, Z+1	; 0x01
     b60:	68 2f       	mov	r22, r24
     b62:	66 95       	lsr	r22
     b64:	66 95       	lsr	r22
     b66:	66 95       	lsr	r22
     b68:	67 70       	andi	r22, 0x07	; 7
		TIMER1_vdSetPreload(Timers_u16IcuValue);
		
        /* Wait the Echo pin to be Low */
		while (DIO_HIGH == EchoPinLogic)
		{
			udtReturnValue = DIO_udtGetPinValue(ULTRASONIC_pudtobj->udtEchoPin.port,
     b6a:	ae 01       	movw	r20, r28
     b6c:	4f 5f       	subi	r20, 0xFF	; 255
     b6e:	5f 4f       	sbci	r21, 0xFF	; 255
     b70:	87 70       	andi	r24, 0x07	; 7
     b72:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_udtGetPinValue>
     b76:	f8 2e       	mov	r15, r24

        /* Clear Timer1 Ticks TCNT1 */
		TIMER1_vdSetPreload(Timers_u16IcuValue);
		
        /* Wait the Echo pin to be Low */
		while (DIO_HIGH == EchoPinLogic)
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	79 f3       	breq	.-34     	; 0xb5c <Ultrasonic_udtCalculateDistance+0x84>
		}

        /* Read the time */
        //ret = Timer0_Read_Value(&timer0_timer_obj, &Timer_Value);
        
		Timers_u16IcuValue = TIMER_u16GetICR();
     b7e:	0e 94 ef 03 	call	0x7de	; 0x7de <TIMER_u16GetICR>
			from data sheet 
							distance = time / 58 where where us & 58us/cm
		*/
		
		//*ULTRASONIC_pu8Distance = (uint16)((f32)Timers_u16IcuValue*(4.25f/1000));
		*ULTRASONIC_pu16Distance = (uint16)(((d64)Timers_u16IcuValue*ULTRASONIC_TIME_TICK)/58);
     b82:	bc 01       	movw	r22, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 85 06 	call	0xd0a	; 0xd0a <__floatunsisf>
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	5e e3       	ldi	r21, 0x3E	; 62
     b94:	0e 94 13 07 	call	0xe26	; 0xe26 <__mulsf3>
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	48 e6       	ldi	r20, 0x68	; 104
     b9e:	52 e4       	ldi	r21, 0x42	; 66
     ba0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__divsf3>
     ba4:	0e 94 56 06 	call	0xcac	; 0xcac <__fixunssfsi>
     ba8:	f6 01       	movw	r30, r12
     baa:	71 83       	std	Z+1, r23	; 0x01
     bac:	60 83       	st	Z, r22
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <Ultrasonic_udtCalculateDistance+0xdc>
    logic_t EchoPinLogic = DIO_LOW;
	uint16 Timers_u16IcuValue = 0;
	
	if (NULL == ULTRASONIC_pudtobj)
	{
		udtReturnValue = E_NOT_OK;
     bb0:	ff 24       	eor	r15, r15
     bb2:	f3 94       	inc	r15
		*ULTRASONIC_pu16Distance = (uint16)(((d64)Timers_u16IcuValue*ULTRASONIC_TIME_TICK)/58);
		
	}
	
	return udtReturnValue;	
}
     bb4:	8f 2d       	mov	r24, r15
     bb6:	0f 90       	pop	r0
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	df 90       	pop	r13
     bc4:	cf 90       	pop	r12
     bc6:	08 95       	ret

00000bc8 <__divsf3>:
     bc8:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__divsf3x>
     bcc:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__fp_round>
     bd0:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_pscB>
     bd4:	58 f0       	brcs	.+22     	; 0xbec <__divsf3+0x24>
     bd6:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fp_pscA>
     bda:	40 f0       	brcs	.+16     	; 0xbec <__divsf3+0x24>
     bdc:	29 f4       	brne	.+10     	; 0xbe8 <__divsf3+0x20>
     bde:	5f 3f       	cpi	r21, 0xFF	; 255
     be0:	29 f0       	breq	.+10     	; 0xbec <__divsf3+0x24>
     be2:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_inf>
     be6:	51 11       	cpse	r21, r1
     be8:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_szero>
     bec:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__fp_nan>

00000bf0 <__divsf3x>:
     bf0:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__fp_split3>
     bf4:	68 f3       	brcs	.-38     	; 0xbd0 <__divsf3+0x8>

00000bf6 <__divsf3_pse>:
     bf6:	99 23       	and	r25, r25
     bf8:	b1 f3       	breq	.-20     	; 0xbe6 <__divsf3+0x1e>
     bfa:	55 23       	and	r21, r21
     bfc:	91 f3       	breq	.-28     	; 0xbe2 <__divsf3+0x1a>
     bfe:	95 1b       	sub	r25, r21
     c00:	55 0b       	sbc	r21, r21
     c02:	bb 27       	eor	r27, r27
     c04:	aa 27       	eor	r26, r26
     c06:	62 17       	cp	r22, r18
     c08:	73 07       	cpc	r23, r19
     c0a:	84 07       	cpc	r24, r20
     c0c:	38 f0       	brcs	.+14     	; 0xc1c <__divsf3_pse+0x26>
     c0e:	9f 5f       	subi	r25, 0xFF	; 255
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
     c12:	22 0f       	add	r18, r18
     c14:	33 1f       	adc	r19, r19
     c16:	44 1f       	adc	r20, r20
     c18:	aa 1f       	adc	r26, r26
     c1a:	a9 f3       	breq	.-22     	; 0xc06 <__divsf3_pse+0x10>
     c1c:	35 d0       	rcall	.+106    	; 0xc88 <__divsf3_pse+0x92>
     c1e:	0e 2e       	mov	r0, r30
     c20:	3a f0       	brmi	.+14     	; 0xc30 <__divsf3_pse+0x3a>
     c22:	e0 e8       	ldi	r30, 0x80	; 128
     c24:	32 d0       	rcall	.+100    	; 0xc8a <__divsf3_pse+0x94>
     c26:	91 50       	subi	r25, 0x01	; 1
     c28:	50 40       	sbci	r21, 0x00	; 0
     c2a:	e6 95       	lsr	r30
     c2c:	00 1c       	adc	r0, r0
     c2e:	ca f7       	brpl	.-14     	; 0xc22 <__divsf3_pse+0x2c>
     c30:	2b d0       	rcall	.+86     	; 0xc88 <__divsf3_pse+0x92>
     c32:	fe 2f       	mov	r31, r30
     c34:	29 d0       	rcall	.+82     	; 0xc88 <__divsf3_pse+0x92>
     c36:	66 0f       	add	r22, r22
     c38:	77 1f       	adc	r23, r23
     c3a:	88 1f       	adc	r24, r24
     c3c:	bb 1f       	adc	r27, r27
     c3e:	26 17       	cp	r18, r22
     c40:	37 07       	cpc	r19, r23
     c42:	48 07       	cpc	r20, r24
     c44:	ab 07       	cpc	r26, r27
     c46:	b0 e8       	ldi	r27, 0x80	; 128
     c48:	09 f0       	breq	.+2      	; 0xc4c <__divsf3_pse+0x56>
     c4a:	bb 0b       	sbc	r27, r27
     c4c:	80 2d       	mov	r24, r0
     c4e:	bf 01       	movw	r22, r30
     c50:	ff 27       	eor	r31, r31
     c52:	93 58       	subi	r25, 0x83	; 131
     c54:	5f 4f       	sbci	r21, 0xFF	; 255
     c56:	3a f0       	brmi	.+14     	; 0xc66 <__divsf3_pse+0x70>
     c58:	9e 3f       	cpi	r25, 0xFE	; 254
     c5a:	51 05       	cpc	r21, r1
     c5c:	78 f0       	brcs	.+30     	; 0xc7c <__divsf3_pse+0x86>
     c5e:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_inf>
     c62:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_szero>
     c66:	5f 3f       	cpi	r21, 0xFF	; 255
     c68:	e4 f3       	brlt	.-8      	; 0xc62 <__divsf3_pse+0x6c>
     c6a:	98 3e       	cpi	r25, 0xE8	; 232
     c6c:	d4 f3       	brlt	.-12     	; 0xc62 <__divsf3_pse+0x6c>
     c6e:	86 95       	lsr	r24
     c70:	77 95       	ror	r23
     c72:	67 95       	ror	r22
     c74:	b7 95       	ror	r27
     c76:	f7 95       	ror	r31
     c78:	9f 5f       	subi	r25, 0xFF	; 255
     c7a:	c9 f7       	brne	.-14     	; 0xc6e <__divsf3_pse+0x78>
     c7c:	88 0f       	add	r24, r24
     c7e:	91 1d       	adc	r25, r1
     c80:	96 95       	lsr	r25
     c82:	87 95       	ror	r24
     c84:	97 f9       	bld	r25, 7
     c86:	08 95       	ret
     c88:	e1 e0       	ldi	r30, 0x01	; 1
     c8a:	66 0f       	add	r22, r22
     c8c:	77 1f       	adc	r23, r23
     c8e:	88 1f       	adc	r24, r24
     c90:	bb 1f       	adc	r27, r27
     c92:	62 17       	cp	r22, r18
     c94:	73 07       	cpc	r23, r19
     c96:	84 07       	cpc	r24, r20
     c98:	ba 07       	cpc	r27, r26
     c9a:	20 f0       	brcs	.+8      	; 0xca4 <__divsf3_pse+0xae>
     c9c:	62 1b       	sub	r22, r18
     c9e:	73 0b       	sbc	r23, r19
     ca0:	84 0b       	sbc	r24, r20
     ca2:	ba 0b       	sbc	r27, r26
     ca4:	ee 1f       	adc	r30, r30
     ca6:	88 f7       	brcc	.-30     	; 0xc8a <__divsf3_pse+0x94>
     ca8:	e0 95       	com	r30
     caa:	08 95       	ret

00000cac <__fixunssfsi>:
     cac:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_splitA>
     cb0:	88 f0       	brcs	.+34     	; 0xcd4 <__fixunssfsi+0x28>
     cb2:	9f 57       	subi	r25, 0x7F	; 127
     cb4:	98 f0       	brcs	.+38     	; 0xcdc <__fixunssfsi+0x30>
     cb6:	b9 2f       	mov	r27, r25
     cb8:	99 27       	eor	r25, r25
     cba:	b7 51       	subi	r27, 0x17	; 23
     cbc:	b0 f0       	brcs	.+44     	; 0xcea <__fixunssfsi+0x3e>
     cbe:	e1 f0       	breq	.+56     	; 0xcf8 <__fixunssfsi+0x4c>
     cc0:	66 0f       	add	r22, r22
     cc2:	77 1f       	adc	r23, r23
     cc4:	88 1f       	adc	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	1a f0       	brmi	.+6      	; 0xcd0 <__fixunssfsi+0x24>
     cca:	ba 95       	dec	r27
     ccc:	c9 f7       	brne	.-14     	; 0xcc0 <__fixunssfsi+0x14>
     cce:	14 c0       	rjmp	.+40     	; 0xcf8 <__fixunssfsi+0x4c>
     cd0:	b1 30       	cpi	r27, 0x01	; 1
     cd2:	91 f0       	breq	.+36     	; 0xcf8 <__fixunssfsi+0x4c>
     cd4:	0e 94 0c 07 	call	0xe18	; 0xe18 <__fp_zero>
     cd8:	b1 e0       	ldi	r27, 0x01	; 1
     cda:	08 95       	ret
     cdc:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__fp_zero>
     ce0:	67 2f       	mov	r22, r23
     ce2:	78 2f       	mov	r23, r24
     ce4:	88 27       	eor	r24, r24
     ce6:	b8 5f       	subi	r27, 0xF8	; 248
     ce8:	39 f0       	breq	.+14     	; 0xcf8 <__fixunssfsi+0x4c>
     cea:	b9 3f       	cpi	r27, 0xF9	; 249
     cec:	cc f3       	brlt	.-14     	; 0xce0 <__fixunssfsi+0x34>
     cee:	86 95       	lsr	r24
     cf0:	77 95       	ror	r23
     cf2:	67 95       	ror	r22
     cf4:	b3 95       	inc	r27
     cf6:	d9 f7       	brne	.-10     	; 0xcee <__fixunssfsi+0x42>
     cf8:	3e f4       	brtc	.+14     	; 0xd08 <__fixunssfsi+0x5c>
     cfa:	90 95       	com	r25
     cfc:	80 95       	com	r24
     cfe:	70 95       	com	r23
     d00:	61 95       	neg	r22
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	8f 4f       	sbci	r24, 0xFF	; 255
     d06:	9f 4f       	sbci	r25, 0xFF	; 255
     d08:	08 95       	ret

00000d0a <__floatunsisf>:
     d0a:	e8 94       	clt
     d0c:	09 c0       	rjmp	.+18     	; 0xd20 <__floatsisf+0x12>

00000d0e <__floatsisf>:
     d0e:	97 fb       	bst	r25, 7
     d10:	3e f4       	brtc	.+14     	; 0xd20 <__floatsisf+0x12>
     d12:	90 95       	com	r25
     d14:	80 95       	com	r24
     d16:	70 95       	com	r23
     d18:	61 95       	neg	r22
     d1a:	7f 4f       	sbci	r23, 0xFF	; 255
     d1c:	8f 4f       	sbci	r24, 0xFF	; 255
     d1e:	9f 4f       	sbci	r25, 0xFF	; 255
     d20:	99 23       	and	r25, r25
     d22:	a9 f0       	breq	.+42     	; 0xd4e <__floatsisf+0x40>
     d24:	f9 2f       	mov	r31, r25
     d26:	96 e9       	ldi	r25, 0x96	; 150
     d28:	bb 27       	eor	r27, r27
     d2a:	93 95       	inc	r25
     d2c:	f6 95       	lsr	r31
     d2e:	87 95       	ror	r24
     d30:	77 95       	ror	r23
     d32:	67 95       	ror	r22
     d34:	b7 95       	ror	r27
     d36:	f1 11       	cpse	r31, r1
     d38:	f8 cf       	rjmp	.-16     	; 0xd2a <__floatsisf+0x1c>
     d3a:	fa f4       	brpl	.+62     	; 0xd7a <__floatsisf+0x6c>
     d3c:	bb 0f       	add	r27, r27
     d3e:	11 f4       	brne	.+4      	; 0xd44 <__floatsisf+0x36>
     d40:	60 ff       	sbrs	r22, 0
     d42:	1b c0       	rjmp	.+54     	; 0xd7a <__floatsisf+0x6c>
     d44:	6f 5f       	subi	r22, 0xFF	; 255
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	8f 4f       	sbci	r24, 0xFF	; 255
     d4a:	9f 4f       	sbci	r25, 0xFF	; 255
     d4c:	16 c0       	rjmp	.+44     	; 0xd7a <__floatsisf+0x6c>
     d4e:	88 23       	and	r24, r24
     d50:	11 f0       	breq	.+4      	; 0xd56 <__floatsisf+0x48>
     d52:	96 e9       	ldi	r25, 0x96	; 150
     d54:	11 c0       	rjmp	.+34     	; 0xd78 <__floatsisf+0x6a>
     d56:	77 23       	and	r23, r23
     d58:	21 f0       	breq	.+8      	; 0xd62 <__floatsisf+0x54>
     d5a:	9e e8       	ldi	r25, 0x8E	; 142
     d5c:	87 2f       	mov	r24, r23
     d5e:	76 2f       	mov	r23, r22
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <__floatsisf+0x5e>
     d62:	66 23       	and	r22, r22
     d64:	71 f0       	breq	.+28     	; 0xd82 <__floatsisf+0x74>
     d66:	96 e8       	ldi	r25, 0x86	; 134
     d68:	86 2f       	mov	r24, r22
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	2a f0       	brmi	.+10     	; 0xd7a <__floatsisf+0x6c>
     d70:	9a 95       	dec	r25
     d72:	66 0f       	add	r22, r22
     d74:	77 1f       	adc	r23, r23
     d76:	88 1f       	adc	r24, r24
     d78:	da f7       	brpl	.-10     	; 0xd70 <__floatsisf+0x62>
     d7a:	88 0f       	add	r24, r24
     d7c:	96 95       	lsr	r25
     d7e:	87 95       	ror	r24
     d80:	97 f9       	bld	r25, 7
     d82:	08 95       	ret

00000d84 <__fp_inf>:
     d84:	97 f9       	bld	r25, 7
     d86:	9f 67       	ori	r25, 0x7F	; 127
     d88:	80 e8       	ldi	r24, 0x80	; 128
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	08 95       	ret

00000d90 <__fp_nan>:
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	80 ec       	ldi	r24, 0xC0	; 192
     d94:	08 95       	ret

00000d96 <__fp_pscA>:
     d96:	00 24       	eor	r0, r0
     d98:	0a 94       	dec	r0
     d9a:	16 16       	cp	r1, r22
     d9c:	17 06       	cpc	r1, r23
     d9e:	18 06       	cpc	r1, r24
     da0:	09 06       	cpc	r0, r25
     da2:	08 95       	ret

00000da4 <__fp_pscB>:
     da4:	00 24       	eor	r0, r0
     da6:	0a 94       	dec	r0
     da8:	12 16       	cp	r1, r18
     daa:	13 06       	cpc	r1, r19
     dac:	14 06       	cpc	r1, r20
     dae:	05 06       	cpc	r0, r21
     db0:	08 95       	ret

00000db2 <__fp_round>:
     db2:	09 2e       	mov	r0, r25
     db4:	03 94       	inc	r0
     db6:	00 0c       	add	r0, r0
     db8:	11 f4       	brne	.+4      	; 0xdbe <__fp_round+0xc>
     dba:	88 23       	and	r24, r24
     dbc:	52 f0       	brmi	.+20     	; 0xdd2 <__fp_round+0x20>
     dbe:	bb 0f       	add	r27, r27
     dc0:	40 f4       	brcc	.+16     	; 0xdd2 <__fp_round+0x20>
     dc2:	bf 2b       	or	r27, r31
     dc4:	11 f4       	brne	.+4      	; 0xdca <__fp_round+0x18>
     dc6:	60 ff       	sbrs	r22, 0
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <__fp_round+0x20>
     dca:	6f 5f       	subi	r22, 0xFF	; 255
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	8f 4f       	sbci	r24, 0xFF	; 255
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	08 95       	ret

00000dd4 <__fp_split3>:
     dd4:	57 fd       	sbrc	r21, 7
     dd6:	90 58       	subi	r25, 0x80	; 128
     dd8:	44 0f       	add	r20, r20
     dda:	55 1f       	adc	r21, r21
     ddc:	59 f0       	breq	.+22     	; 0xdf4 <__fp_splitA+0x10>
     dde:	5f 3f       	cpi	r21, 0xFF	; 255
     de0:	71 f0       	breq	.+28     	; 0xdfe <__fp_splitA+0x1a>
     de2:	47 95       	ror	r20

00000de4 <__fp_splitA>:
     de4:	88 0f       	add	r24, r24
     de6:	97 fb       	bst	r25, 7
     de8:	99 1f       	adc	r25, r25
     dea:	61 f0       	breq	.+24     	; 0xe04 <__fp_splitA+0x20>
     dec:	9f 3f       	cpi	r25, 0xFF	; 255
     dee:	79 f0       	breq	.+30     	; 0xe0e <__fp_splitA+0x2a>
     df0:	87 95       	ror	r24
     df2:	08 95       	ret
     df4:	12 16       	cp	r1, r18
     df6:	13 06       	cpc	r1, r19
     df8:	14 06       	cpc	r1, r20
     dfa:	55 1f       	adc	r21, r21
     dfc:	f2 cf       	rjmp	.-28     	; 0xde2 <__fp_split3+0xe>
     dfe:	46 95       	lsr	r20
     e00:	f1 df       	rcall	.-30     	; 0xde4 <__fp_splitA>
     e02:	08 c0       	rjmp	.+16     	; 0xe14 <__fp_splitA+0x30>
     e04:	16 16       	cp	r1, r22
     e06:	17 06       	cpc	r1, r23
     e08:	18 06       	cpc	r1, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	f1 cf       	rjmp	.-30     	; 0xdf0 <__fp_splitA+0xc>
     e0e:	86 95       	lsr	r24
     e10:	71 05       	cpc	r23, r1
     e12:	61 05       	cpc	r22, r1
     e14:	08 94       	sec
     e16:	08 95       	ret

00000e18 <__fp_zero>:
     e18:	e8 94       	clt

00000e1a <__fp_szero>:
     e1a:	bb 27       	eor	r27, r27
     e1c:	66 27       	eor	r22, r22
     e1e:	77 27       	eor	r23, r23
     e20:	cb 01       	movw	r24, r22
     e22:	97 f9       	bld	r25, 7
     e24:	08 95       	ret

00000e26 <__mulsf3>:
     e26:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulsf3x>
     e2a:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__fp_round>
     e2e:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fp_pscA>
     e32:	38 f0       	brcs	.+14     	; 0xe42 <__mulsf3+0x1c>
     e34:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_pscB>
     e38:	20 f0       	brcs	.+8      	; 0xe42 <__mulsf3+0x1c>
     e3a:	95 23       	and	r25, r21
     e3c:	11 f0       	breq	.+4      	; 0xe42 <__mulsf3+0x1c>
     e3e:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_inf>
     e42:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__fp_nan>
     e46:	11 24       	eor	r1, r1
     e48:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_szero>

00000e4c <__mulsf3x>:
     e4c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__fp_split3>
     e50:	70 f3       	brcs	.-36     	; 0xe2e <__mulsf3+0x8>

00000e52 <__mulsf3_pse>:
     e52:	95 9f       	mul	r25, r21
     e54:	c1 f3       	breq	.-16     	; 0xe46 <__mulsf3+0x20>
     e56:	95 0f       	add	r25, r21
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	55 1f       	adc	r21, r21
     e5c:	62 9f       	mul	r22, r18
     e5e:	f0 01       	movw	r30, r0
     e60:	72 9f       	mul	r23, r18
     e62:	bb 27       	eor	r27, r27
     e64:	f0 0d       	add	r31, r0
     e66:	b1 1d       	adc	r27, r1
     e68:	63 9f       	mul	r22, r19
     e6a:	aa 27       	eor	r26, r26
     e6c:	f0 0d       	add	r31, r0
     e6e:	b1 1d       	adc	r27, r1
     e70:	aa 1f       	adc	r26, r26
     e72:	64 9f       	mul	r22, r20
     e74:	66 27       	eor	r22, r22
     e76:	b0 0d       	add	r27, r0
     e78:	a1 1d       	adc	r26, r1
     e7a:	66 1f       	adc	r22, r22
     e7c:	82 9f       	mul	r24, r18
     e7e:	22 27       	eor	r18, r18
     e80:	b0 0d       	add	r27, r0
     e82:	a1 1d       	adc	r26, r1
     e84:	62 1f       	adc	r22, r18
     e86:	73 9f       	mul	r23, r19
     e88:	b0 0d       	add	r27, r0
     e8a:	a1 1d       	adc	r26, r1
     e8c:	62 1f       	adc	r22, r18
     e8e:	83 9f       	mul	r24, r19
     e90:	a0 0d       	add	r26, r0
     e92:	61 1d       	adc	r22, r1
     e94:	22 1f       	adc	r18, r18
     e96:	74 9f       	mul	r23, r20
     e98:	33 27       	eor	r19, r19
     e9a:	a0 0d       	add	r26, r0
     e9c:	61 1d       	adc	r22, r1
     e9e:	23 1f       	adc	r18, r19
     ea0:	84 9f       	mul	r24, r20
     ea2:	60 0d       	add	r22, r0
     ea4:	21 1d       	adc	r18, r1
     ea6:	82 2f       	mov	r24, r18
     ea8:	76 2f       	mov	r23, r22
     eaa:	6a 2f       	mov	r22, r26
     eac:	11 24       	eor	r1, r1
     eae:	9f 57       	subi	r25, 0x7F	; 127
     eb0:	50 40       	sbci	r21, 0x00	; 0
     eb2:	9a f0       	brmi	.+38     	; 0xeda <__mulsf3_pse+0x88>
     eb4:	f1 f0       	breq	.+60     	; 0xef2 <__mulsf3_pse+0xa0>
     eb6:	88 23       	and	r24, r24
     eb8:	4a f0       	brmi	.+18     	; 0xecc <__mulsf3_pse+0x7a>
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	bb 1f       	adc	r27, r27
     ec0:	66 1f       	adc	r22, r22
     ec2:	77 1f       	adc	r23, r23
     ec4:	88 1f       	adc	r24, r24
     ec6:	91 50       	subi	r25, 0x01	; 1
     ec8:	50 40       	sbci	r21, 0x00	; 0
     eca:	a9 f7       	brne	.-22     	; 0xeb6 <__mulsf3_pse+0x64>
     ecc:	9e 3f       	cpi	r25, 0xFE	; 254
     ece:	51 05       	cpc	r21, r1
     ed0:	80 f0       	brcs	.+32     	; 0xef2 <__mulsf3_pse+0xa0>
     ed2:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_inf>
     ed6:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_szero>
     eda:	5f 3f       	cpi	r21, 0xFF	; 255
     edc:	e4 f3       	brlt	.-8      	; 0xed6 <__mulsf3_pse+0x84>
     ede:	98 3e       	cpi	r25, 0xE8	; 232
     ee0:	d4 f3       	brlt	.-12     	; 0xed6 <__mulsf3_pse+0x84>
     ee2:	86 95       	lsr	r24
     ee4:	77 95       	ror	r23
     ee6:	67 95       	ror	r22
     ee8:	b7 95       	ror	r27
     eea:	f7 95       	ror	r31
     eec:	e7 95       	ror	r30
     eee:	9f 5f       	subi	r25, 0xFF	; 255
     ef0:	c1 f7       	brne	.-16     	; 0xee2 <__mulsf3_pse+0x90>
     ef2:	fe 2b       	or	r31, r30
     ef4:	88 0f       	add	r24, r24
     ef6:	91 1d       	adc	r25, r1
     ef8:	96 95       	lsr	r25
     efa:	87 95       	ror	r24
     efc:	97 f9       	bld	r25, 7
     efe:	08 95       	ret

00000f00 <__umoddi3>:
     f00:	68 94       	set
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <__udivdi3_umoddi3>

00000f04 <__udivdi3>:
     f04:	e8 94       	clt

00000f06 <__udivdi3_umoddi3>:
     f06:	8f 92       	push	r8
     f08:	9f 92       	push	r9
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__udivmod64>
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	9f 90       	pop	r9
     f18:	8f 90       	pop	r8
     f1a:	08 95       	ret

00000f1c <__udivmod64>:
     f1c:	88 24       	eor	r8, r8
     f1e:	99 24       	eor	r9, r9
     f20:	f4 01       	movw	r30, r8
     f22:	e4 01       	movw	r28, r8
     f24:	b0 e4       	ldi	r27, 0x40	; 64
     f26:	9f 93       	push	r25
     f28:	aa 27       	eor	r26, r26
     f2a:	9a 15       	cp	r25, r10
     f2c:	8b 04       	cpc	r8, r11
     f2e:	9c 04       	cpc	r9, r12
     f30:	ed 05       	cpc	r30, r13
     f32:	fe 05       	cpc	r31, r14
     f34:	cf 05       	cpc	r28, r15
     f36:	d0 07       	cpc	r29, r16
     f38:	a1 07       	cpc	r26, r17
     f3a:	98 f4       	brcc	.+38     	; 0xf62 <__udivmod64+0x46>
     f3c:	ad 2f       	mov	r26, r29
     f3e:	dc 2f       	mov	r29, r28
     f40:	cf 2f       	mov	r28, r31
     f42:	fe 2f       	mov	r31, r30
     f44:	e9 2d       	mov	r30, r9
     f46:	98 2c       	mov	r9, r8
     f48:	89 2e       	mov	r8, r25
     f4a:	98 2f       	mov	r25, r24
     f4c:	87 2f       	mov	r24, r23
     f4e:	76 2f       	mov	r23, r22
     f50:	65 2f       	mov	r22, r21
     f52:	54 2f       	mov	r21, r20
     f54:	43 2f       	mov	r20, r19
     f56:	32 2f       	mov	r19, r18
     f58:	22 27       	eor	r18, r18
     f5a:	b8 50       	subi	r27, 0x08	; 8
     f5c:	31 f7       	brne	.-52     	; 0xf2a <__udivmod64+0xe>
     f5e:	bf 91       	pop	r27
     f60:	27 c0       	rjmp	.+78     	; 0xfb0 <__udivmod64+0x94>
     f62:	1b 2e       	mov	r1, r27
     f64:	bf 91       	pop	r27
     f66:	bb 27       	eor	r27, r27
     f68:	22 0f       	add	r18, r18
     f6a:	33 1f       	adc	r19, r19
     f6c:	44 1f       	adc	r20, r20
     f6e:	55 1f       	adc	r21, r21
     f70:	66 1f       	adc	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	88 1f       	adc	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	88 1c       	adc	r8, r8
     f7a:	99 1c       	adc	r9, r9
     f7c:	ee 1f       	adc	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	cc 1f       	adc	r28, r28
     f82:	dd 1f       	adc	r29, r29
     f84:	aa 1f       	adc	r26, r26
     f86:	bb 1f       	adc	r27, r27
     f88:	8a 14       	cp	r8, r10
     f8a:	9b 04       	cpc	r9, r11
     f8c:	ec 05       	cpc	r30, r12
     f8e:	fd 05       	cpc	r31, r13
     f90:	ce 05       	cpc	r28, r14
     f92:	df 05       	cpc	r29, r15
     f94:	a0 07       	cpc	r26, r16
     f96:	b1 07       	cpc	r27, r17
     f98:	48 f0       	brcs	.+18     	; 0xfac <__udivmod64+0x90>
     f9a:	8a 18       	sub	r8, r10
     f9c:	9b 08       	sbc	r9, r11
     f9e:	ec 09       	sbc	r30, r12
     fa0:	fd 09       	sbc	r31, r13
     fa2:	ce 09       	sbc	r28, r14
     fa4:	df 09       	sbc	r29, r15
     fa6:	a0 0b       	sbc	r26, r16
     fa8:	b1 0b       	sbc	r27, r17
     faa:	21 60       	ori	r18, 0x01	; 1
     fac:	1a 94       	dec	r1
     fae:	e1 f6       	brne	.-72     	; 0xf68 <__udivmod64+0x4c>
     fb0:	2e f4       	brtc	.+10     	; 0xfbc <__udivmod64+0xa0>
     fb2:	94 01       	movw	r18, r8
     fb4:	af 01       	movw	r20, r30
     fb6:	be 01       	movw	r22, r28
     fb8:	cd 01       	movw	r24, r26
     fba:	00 0c       	add	r0, r0
     fbc:	08 95       	ret

00000fbe <__ashldi3>:
     fbe:	0f 93       	push	r16
     fc0:	08 30       	cpi	r16, 0x08	; 8
     fc2:	90 f0       	brcs	.+36     	; 0xfe8 <__ashldi3+0x2a>
     fc4:	98 2f       	mov	r25, r24
     fc6:	87 2f       	mov	r24, r23
     fc8:	76 2f       	mov	r23, r22
     fca:	65 2f       	mov	r22, r21
     fcc:	54 2f       	mov	r21, r20
     fce:	43 2f       	mov	r20, r19
     fd0:	32 2f       	mov	r19, r18
     fd2:	22 27       	eor	r18, r18
     fd4:	08 50       	subi	r16, 0x08	; 8
     fd6:	f4 cf       	rjmp	.-24     	; 0xfc0 <__ashldi3+0x2>
     fd8:	22 0f       	add	r18, r18
     fda:	33 1f       	adc	r19, r19
     fdc:	44 1f       	adc	r20, r20
     fde:	55 1f       	adc	r21, r21
     fe0:	66 1f       	adc	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	88 1f       	adc	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 95       	dec	r16
     fea:	b2 f7       	brpl	.-20     	; 0xfd8 <__ashldi3+0x1a>
     fec:	0f 91       	pop	r16
     fee:	08 95       	ret

00000ff0 <__adddi3>:
     ff0:	2a 0d       	add	r18, r10
     ff2:	3b 1d       	adc	r19, r11
     ff4:	4c 1d       	adc	r20, r12
     ff6:	5d 1d       	adc	r21, r13
     ff8:	6e 1d       	adc	r22, r14
     ffa:	7f 1d       	adc	r23, r15
     ffc:	80 1f       	adc	r24, r16
     ffe:	91 1f       	adc	r25, r17
    1000:	08 95       	ret

00001002 <__cmpdi2_s8>:
    1002:	00 24       	eor	r0, r0
    1004:	a7 fd       	sbrc	r26, 7
    1006:	00 94       	com	r0
    1008:	2a 17       	cp	r18, r26
    100a:	30 05       	cpc	r19, r0
    100c:	40 05       	cpc	r20, r0
    100e:	50 05       	cpc	r21, r0
    1010:	60 05       	cpc	r22, r0
    1012:	70 05       	cpc	r23, r0
    1014:	80 05       	cpc	r24, r0
    1016:	90 05       	cpc	r25, r0
    1018:	08 95       	ret

0000101a <_exit>:
    101a:	f8 94       	cli

0000101c <__stop_program>:
    101c:	ff cf       	rjmp	.-2      	; 0x101c <__stop_program>
