
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000006aa  0000073e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800062  00800062  00000740  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b20  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aca  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e73  00000000  00000000  00002f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  00003de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b25  00000000  00000000  000043a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000182e  00000000  00000000  00004ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000066f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_4>
  14:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_5>
  18:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__vector_6>
  1c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_7>
  20:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_8>
  24:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_9>
  28:	0c 94 01 03 	jmp	0x602	; 0x602 <__vector_10>
  2c:	0c 94 2a 03 	jmp	0x654	; 0x654 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
					
							LCD_Send_Number_Pos(distance, 2, 9);
							_delay_ms(100);
			*/

	udtReturnValue = LCD_udt4BitInitialize();
  92:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_udt4BitInitialize>
  96:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	while (1)
	{
		
		udtReturnValue = LCD_udt4BitSendData(80);
  9a:	80 e5       	ldi	r24, 0x50	; 80
  9c:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_udt4BitSendData>
  a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	83 ed       	ldi	r24, 0xD3	; 211
  a8:	90 e3       	ldi	r25, 0x30	; 48
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x22>
  b4:	00 00       	nop
  b6:	f1 cf       	rjmp	.-30     	; 0x9a <main+0x8>

000000b8 <DIO_udtSetPinDirection>:
	direction_t 	udtDirection
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	if (udtDirection == (DIO_DIRECTION_OUTPUT))
  b8:	41 30       	cpi	r20, 0x01	; 1
  ba:	c1 f5       	brne	.+112    	; 0x12c <DIO_udtSetPinDirection+0x74>
	{
		switch(udtPort)
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	91 f0       	breq	.+36     	; 0xe4 <DIO_udtSetPinDirection+0x2c>
  c0:	28 f0       	brcs	.+10     	; 0xcc <DIO_udtSetPinDirection+0x14>
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	d9 f0       	breq	.+54     	; 0xfc <DIO_udtSetPinDirection+0x44>
  c6:	83 30       	cpi	r24, 0x03	; 3
  c8:	29 f1       	breq	.+74     	; 0x114 <DIO_udtSetPinDirection+0x5c>
  ca:	6e c0       	rjmp	.+220    	; 0x1a8 <DIO_udtSetPinDirection+0xf0>
		{
			case PORTA_INDEX: SET_BIT(DIO->DDRA, udtPin);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_udtSetPinDirection+0x1e>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_udtSetPinDirection+0x1a>
  da:	9a b3       	in	r25, 0x1a	; 26
  dc:	89 2b       	or	r24, r25
  de:	8a bb       	out	0x1a, r24	; 26
			                  udtReturnValue = E_OK;
  e0:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
  e2:	08 95       	ret
			case PORTB_INDEX: SET_BIT(DIO->DDRB, udtPin);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_udtSetPinDirection+0x36>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_udtSetPinDirection+0x32>
  f2:	97 b3       	in	r25, 0x17	; 23
  f4:	89 2b       	or	r24, r25
  f6:	87 bb       	out	0x17, r24	; 23
			                  udtReturnValue = E_OK;
  f8:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
  fa:	08 95       	ret
			case PORTC_INDEX: SET_BIT(DIO->DDRC, udtPin);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_udtSetPinDirection+0x4e>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_udtSetPinDirection+0x4a>
 10a:	94 b3       	in	r25, 0x14	; 20
 10c:	89 2b       	or	r24, r25
 10e:	84 bb       	out	0x14, r24	; 20
			                  udtReturnValue = E_OK;
 110:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 112:	08 95       	ret
			case PORTD_INDEX: SET_BIT(DIO->DDRD, udtPin);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_udtSetPinDirection+0x66>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_udtSetPinDirection+0x62>
 122:	91 b3       	in	r25, 0x11	; 17
 124:	89 2b       	or	r24, r25
 126:	81 bb       	out	0x11, r24	; 17
			                  udtReturnValue = E_OK;
 128:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 12a:	08 95       	ret
			default:		  /*	!Comment: Do nothing	*/
			                  break;
		}
	}
	else if (udtDirection == (DIO_DIRECTION_INPUT))
 12c:	41 11       	cpse	r20, r1
 12e:	3e c0       	rjmp	.+124    	; 0x1ac <DIO_udtSetPinDirection+0xf4>
	{
		switch(udtPort)
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	99 f0       	breq	.+38     	; 0x15a <DIO_udtSetPinDirection+0xa2>
 134:	28 f0       	brcs	.+10     	; 0x140 <DIO_udtSetPinDirection+0x88>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	e9 f0       	breq	.+58     	; 0x174 <DIO_udtSetPinDirection+0xbc>
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	41 f1       	breq	.+80     	; 0x18e <DIO_udtSetPinDirection+0xd6>
 13e:	38 c0       	rjmp	.+112    	; 0x1b0 <DIO_udtSetPinDirection+0xf8>
		{
			case PORTA_INDEX: CLR_BIT(DIO->DDRA, udtPin);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_udtSetPinDirection+0x92>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_udtSetPinDirection+0x8e>
 14e:	80 95       	com	r24
 150:	9a b3       	in	r25, 0x1a	; 26
 152:	89 23       	and	r24, r25
 154:	8a bb       	out	0x1a, r24	; 26
			                  udtReturnValue = E_OK;
 156:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 158:	08 95       	ret
			case PORTB_INDEX: CLR_BIT(DIO->DDRB, udtPin);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_udtSetPinDirection+0xac>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_udtSetPinDirection+0xa8>
 168:	80 95       	com	r24
 16a:	97 b3       	in	r25, 0x17	; 23
 16c:	89 23       	and	r24, r25
 16e:	87 bb       	out	0x17, r24	; 23
			                  udtReturnValue = E_OK;
 170:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 172:	08 95       	ret
			case PORTC_INDEX: CLR_BIT(DIO->DDRC, udtPin);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_udtSetPinDirection+0xc6>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_udtSetPinDirection+0xc2>
 182:	80 95       	com	r24
 184:	94 b3       	in	r25, 0x14	; 20
 186:	89 23       	and	r24, r25
 188:	84 bb       	out	0x14, r24	; 20
			                  udtReturnValue = E_OK;
 18a:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 18c:	08 95       	ret
			case PORTD_INDEX: CLR_BIT(DIO->DDRD, udtPin);
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_udtSetPinDirection+0xe0>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_udtSetPinDirection+0xdc>
 19c:	80 95       	com	r24
 19e:	91 b3       	in	r25, 0x11	; 17
 1a0:	89 23       	and	r24, r25
 1a2:	81 bb       	out	0x11, r24	; 17
			                  udtReturnValue = E_OK;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 1a6:	08 95       	ret
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	direction_t 	udtDirection
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	08 95       	ret
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	08 95       	ret
 1b0:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		/*	!Comment: Do nothing	*/
	}
	return udtReturnValue;
}
 1b2:	08 95       	ret

000001b4 <DIO_udtSetPinValue>:
	logic_t 		udtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	
	if (udtValue == DIO_HIGH)
 1b4:	41 30       	cpi	r20, 0x01	; 1
 1b6:	c1 f5       	brne	.+112    	; 0x228 <DIO_udtSetPinValue+0x74>
	{
		switch(udtPort)
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	91 f0       	breq	.+36     	; 0x1e0 <DIO_udtSetPinValue+0x2c>
 1bc:	28 f0       	brcs	.+10     	; 0x1c8 <DIO_udtSetPinValue+0x14>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	d9 f0       	breq	.+54     	; 0x1f8 <DIO_udtSetPinValue+0x44>
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	29 f1       	breq	.+74     	; 0x210 <DIO_udtSetPinValue+0x5c>
 1c6:	6e c0       	rjmp	.+220    	; 0x2a4 <DIO_udtSetPinValue+0xf0>
		{
			case PORTA_INDEX: SET_BIT(DIO->PORTA, udtPin);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_udtSetPinValue+0x1e>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_udtSetPinValue+0x1a>
 1d6:	9b b3       	in	r25, 0x1b	; 27
 1d8:	89 2b       	or	r24, r25
 1da:	8b bb       	out	0x1b, r24	; 27
			                  udtReturnValue = E_OK;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 1de:	08 95       	ret
			case PORTB_INDEX: SET_BIT(DIO->PORTB, udtPin);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_udtSetPinValue+0x36>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_udtSetPinValue+0x32>
 1ee:	98 b3       	in	r25, 0x18	; 24
 1f0:	89 2b       	or	r24, r25
 1f2:	88 bb       	out	0x18, r24	; 24
			                  udtReturnValue = E_OK;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 1f6:	08 95       	ret
			case PORTC_INDEX: SET_BIT(DIO->PORTC, udtPin);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_udtSetPinValue+0x4e>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_udtSetPinValue+0x4a>
 206:	95 b3       	in	r25, 0x15	; 21
 208:	89 2b       	or	r24, r25
 20a:	85 bb       	out	0x15, r24	; 21
			                  udtReturnValue = E_OK;
 20c:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 20e:	08 95       	ret
			case PORTD_INDEX: SET_BIT(DIO->PORTD, udtPin);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_udtSetPinValue+0x66>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_udtSetPinValue+0x62>
 21e:	92 b3       	in	r25, 0x12	; 18
 220:	89 2b       	or	r24, r25
 222:	82 bb       	out	0x12, r24	; 18
			                  udtReturnValue = E_OK;
 224:	80 e0       	ldi	r24, 0x00	; 0
			                  break;
 226:	08 95       	ret
			default:          /* !Comment: Do nothing */
			                  break;
		}
		
	}
	else if(udtValue == DIO_LOW)
 228:	41 11       	cpse	r20, r1
 22a:	3e c0       	rjmp	.+124    	; 0x2a8 <DIO_udtSetPinValue+0xf4>
	{
		switch(udtPort)
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	99 f0       	breq	.+38     	; 0x256 <DIO_udtSetPinValue+0xa2>
 230:	28 f0       	brcs	.+10     	; 0x23c <DIO_udtSetPinValue+0x88>
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	e9 f0       	breq	.+58     	; 0x270 <DIO_udtSetPinValue+0xbc>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	41 f1       	breq	.+80     	; 0x28a <DIO_udtSetPinValue+0xd6>
 23a:	38 c0       	rjmp	.+112    	; 0x2ac <DIO_udtSetPinValue+0xf8>
		{
			case PORTA_INDEX: CLR_BIT(DIO->PORTA, udtPin);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_udtSetPinValue+0x92>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_udtSetPinValue+0x8e>
 24a:	80 95       	com	r24
 24c:	9b b3       	in	r25, 0x1b	; 27
 24e:	89 23       	and	r24, r25
 250:	8b bb       	out	0x1b, r24	; 27
							  udtReturnValue = E_OK;
 252:	80 e0       	ldi	r24, 0x00	; 0
							  break;
 254:	08 95       	ret
			case PORTB_INDEX: CLR_BIT(DIO->PORTB, udtPin);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_udtSetPinValue+0xac>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_udtSetPinValue+0xa8>
 264:	80 95       	com	r24
 266:	98 b3       	in	r25, 0x18	; 24
 268:	89 23       	and	r24, r25
 26a:	88 bb       	out	0x18, r24	; 24
							  udtReturnValue = E_OK;
 26c:	80 e0       	ldi	r24, 0x00	; 0
							  break;
 26e:	08 95       	ret
			case PORTC_INDEX: CLR_BIT(DIO->PORTC, udtPin);
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_udtSetPinValue+0xc6>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_udtSetPinValue+0xc2>
 27e:	80 95       	com	r24
 280:	95 b3       	in	r25, 0x15	; 21
 282:	89 23       	and	r24, r25
 284:	85 bb       	out	0x15, r24	; 21
						      udtReturnValue = E_OK;
 286:	80 e0       	ldi	r24, 0x00	; 0
							  break;
 288:	08 95       	ret
			case PORTD_INDEX: CLR_BIT(DIO->PORTD, udtPin);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_udtSetPinValue+0xe0>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_udtSetPinValue+0xdc>
 298:	80 95       	com	r24
 29a:	92 b3       	in	r25, 0x12	; 18
 29c:	89 23       	and	r24, r25
 29e:	82 bb       	out	0x12, r24	; 18
							  udtReturnValue = E_OK;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
							  break;
 2a2:	08 95       	ret
	port_index_t 	udtPort,
	pin_index_t 	udtPin,
	logic_t 		udtValue
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	08 95       	ret
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	08 95       	ret
 2ac:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		/* !Comment: Do nothing */
	}
	return udtReturnValue;
}
 2ae:	08 95       	ret

000002b0 <LCD_udt4bit_send_enable_signal>:
		udtReturnValue = LCD_udtGoTo(u8DDRAMRow, u8DDRAMColumn);
		/* !Comment: Print CGRAM data */
		udtReturnValue = LCD_udt4BitSendData(u8CGRAMLocation);
	}
	return udtReturnValue;
}
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	67 e0       	ldi	r22, 0x07	; 7
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
 2ba:	8f ec       	ldi	r24, 0xCF	; 207
 2bc:	97 e0       	ldi	r25, 0x07	; 7
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_udt4bit_send_enable_signal+0xe>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_udt4bit_send_enable_signal+0x14>
 2c4:	00 00       	nop
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	67 e0       	ldi	r22, 0x07	; 7
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
 2d0:	ef ec       	ldi	r30, 0xCF	; 207
 2d2:	f7 e0       	ldi	r31, 0x07	; 7
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_udt4bit_send_enable_signal+0x24>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_udt4bit_send_enable_signal+0x2a>
 2da:	00 00       	nop
 2dc:	08 95       	ret

000002de <LCD_udt4BitSendCommand>:
 2de:	cf 93       	push	r28
 2e0:	c8 2f       	mov	r28, r24
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	65 e0       	ldi	r22, 0x05	; 5
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	66 e0       	ldi	r22, 0x06	; 6
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
 2f6:	8c 2f       	mov	r24, r28
 2f8:	80 7f       	andi	r24, 0xF0	; 240
 2fa:	8b bb       	out	0x1b, r24	; 27
 2fc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_udt4bit_send_enable_signal>
 300:	c2 95       	swap	r28
 302:	c0 7f       	andi	r28, 0xF0	; 240
 304:	cb bb       	out	0x1b, r28	; 27
 306:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_udt4bit_send_enable_signal>
 30a:	ef ec       	ldi	r30, 0xCF	; 207
 30c:	f7 e0       	ldi	r31, 0x07	; 7
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCD_udt4BitSendCommand+0x30>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCD_udt4BitSendCommand+0x36>
 314:	00 00       	nop
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <LCD_udt4BitSendData>:
 31a:	cf 93       	push	r28
 31c:	c8 2f       	mov	r28, r24
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	65 e0       	ldi	r22, 0x05	; 5
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	66 e0       	ldi	r22, 0x06	; 6
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_udtSetPinValue>
 332:	8c 2f       	mov	r24, r28
 334:	80 7f       	andi	r24, 0xF0	; 240
 336:	8b bb       	out	0x1b, r24	; 27
 338:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_udt4bit_send_enable_signal>
 33c:	c2 95       	swap	r28
 33e:	c0 7f       	andi	r28, 0xF0	; 240
 340:	cb bb       	out	0x1b, r28	; 27
 342:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_udt4bit_send_enable_signal>
 346:	ef ec       	ldi	r30, 0xCF	; 207
 348:	f7 e0       	ldi	r31, 0x07	; 7
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <LCD_udt4BitSendData+0x30>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <LCD_udt4BitSendData+0x36>
 350:	00 00       	nop
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <LCD_udtClearScreen>:
void
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK;

	udtReturnValue = LCD_udt4BitSendCommand(LCD_CLEAR_DISPLAY);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_udt4BitSendCommand>
 35c:	ef e6       	ldi	r30, 0x6F	; 111
 35e:	f7 e1       	ldi	r31, 0x17	; 23
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <LCD_udtClearScreen+0xa>
 364:	00 c0       	rjmp	.+0      	; 0x366 <LCD_udtClearScreen+0x10>
 366:	00 00       	nop
	_delay_ms(3); //wait more than 1.53 ms
	return udtReturnValue;

}
 368:	08 95       	ret

0000036a <LCD_udt4BitInitialize>:
 36a:	8f e1       	ldi	r24, 0x1F	; 31
 36c:	9e e4       	ldi	r25, 0x4E	; 78
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCD_udt4BitInitialize+0x4>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_udt4BitInitialize+0xa>
 374:	00 00       	nop
{
	Std_ReturnType udtReturnValue = E_NOT_OK;
	/* !Comment: initialization of data pins control pins */
	//LCD_DATA_DIRECTION = 0xFF;
	_delay_ms(10);	
	udtReturnValue = DIO_udtSetPinDirection(CLCD_DATA_PORT, CLCD_D4, DIO_DIR_OUTPUT);
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	64 e0       	ldi	r22, 0x04	; 4
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_DATA_PORT, CLCD_D5, DIO_DIR_OUTPUT);
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	65 e0       	ldi	r22, 0x05	; 5
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_DATA_PORT, CLCD_D6, DIO_DIR_OUTPUT);
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	66 e0       	ldi	r22, 0x06	; 6
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_DATA_PORT, CLCD_D7, DIO_DIR_OUTPUT);
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	67 e0       	ldi	r22, 0x07	; 7
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
	
	udtReturnValue = DIO_udtSetPinDirection(CLCD_CONTROL_PORT, CLCD_RS, DIO_DIR_OUTPUT);
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	65 e0       	ldi	r22, 0x05	; 5
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_CONTROL_PORT, CLCD_RW, DIO_DIR_OUTPUT);
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	66 e0       	ldi	r22, 0x06	; 6
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
	udtReturnValue = DIO_udtSetPinDirection(CLCD_CONTROL_PORT, CLCD_EN, DIO_DIR_OUTPUT);
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	67 e0       	ldi	r22, 0x07	; 7
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_udtSetPinDirection>
 3bc:	ef e1       	ldi	r30, 0x1F	; 31
 3be:	fe e4       	ldi	r31, 0x4E	; 78
 3c0:	31 97       	sbiw	r30, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <LCD_udt4BitInitialize+0x56>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <LCD_udt4BitInitialize+0x5c>
 3c6:	00 00       	nop
	_delay_ms(10);	
	
	/* !Comment: initialization of some command from data sheet */	
		//udtReturnValue = LCD_udt4BitSendCommand(0x33);
		//udtReturnValue = LCD_udt4BitSendCommand(0x32);
	udtReturnValue = LCD_udt4BitSendCommand(LCD_RETURN_HOME);
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_udt4BitSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ce:	8f e9       	ldi	r24, 0x9F	; 159
 3d0:	9f e0       	ldi	r25, 0x0F	; 15
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <LCD_udt4BitInitialize+0x68>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <LCD_udt4BitInitialize+0x6e>
 3d8:	00 00       	nop
	_delay_us(2000);
	
	udtReturnValue = LCD_udt4BitSendCommand(LCD_4BIT_MODE_2_LINE_5_IN_7);
 3da:	88 e2       	ldi	r24, 0x28	; 40
 3dc:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_udt4BitSendCommand>
 3e0:	e7 ee       	ldi	r30, 0xE7	; 231
 3e2:	f3 e0       	ldi	r31, 0x03	; 3
 3e4:	31 97       	sbiw	r30, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <LCD_udt4BitInitialize+0x7a>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <LCD_udt4BitInitialize+0x80>
 3ea:	00 00       	nop
	_delay_us(500);
	
	udtReturnValue = LCD_udt4BitSendCommand(LCD_DISPLAY_ON_UNDERLINE_ON_CURSOR_OFF); 
 3ec:	8c e0       	ldi	r24, 0x0C	; 12
 3ee:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_udt4BitSendCommand>
 3f2:	87 ee       	ldi	r24, 0xE7	; 231
 3f4:	93 e0       	ldi	r25, 0x03	; 3
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCD_udt4BitInitialize+0x8c>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_udt4BitInitialize+0x92>
 3fc:	00 00       	nop
	_delay_us(500);
	
	udtReturnValue = LCD_udtClearScreen();
 3fe:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_udtClearScreen>
	
	udtReturnValue = LCD_udt4BitSendCommand(LCD_ENTRY_MODE_INC_SHIFT_OFF);
 402:	86 e0       	ldi	r24, 0x06	; 6
 404:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_udt4BitSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 408:	ef e9       	ldi	r30, 0x9F	; 159
 40a:	ff e0       	ldi	r31, 0x0F	; 15
 40c:	31 97       	sbiw	r30, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 412:	00 00       	nop
	_delay_ms(2);	
	
	return udtReturnValue;	
}	
 414:	08 95       	ret

00000416 <__vector_4>:
	return udtReturnValue;
}
/* TIMER2 COMP ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	0f 92       	push	r0
 41e:	11 24       	eor	r1, r1
 420:	2f 93       	push	r18
 422:	3f 93       	push	r19
 424:	4f 93       	push	r20
 426:	5f 93       	push	r21
 428:	6f 93       	push	r22
 42a:	7f 93       	push	r23
 42c:	8f 93       	push	r24
 42e:	9f 93       	push	r25
 430:	af 93       	push	r26
 432:	bf 93       	push	r27
 434:	ef 93       	push	r30
 436:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
 438:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 43c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 440:	30 97       	sbiw	r30, 0x00	; 0
 442:	09 f0       	breq	.+2      	; 0x446 <__vector_4+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]();
 444:	09 95       	icall
	}	
}
 446:	ff 91       	pop	r31
 448:	ef 91       	pop	r30
 44a:	bf 91       	pop	r27
 44c:	af 91       	pop	r26
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	7f 91       	pop	r23
 454:	6f 91       	pop	r22
 456:	5f 91       	pop	r21
 458:	4f 91       	pop	r20
 45a:	3f 91       	pop	r19
 45c:	2f 91       	pop	r18
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <__vector_5>:
/* TIMER2 OVF ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	2f 93       	push	r18
 474:	3f 93       	push	r19
 476:	4f 93       	push	r20
 478:	5f 93       	push	r21
 47a:	6f 93       	push	r22
 47c:	7f 93       	push	r23
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
 48a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end+0x2>
 48e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x3>
 492:	30 97       	sbiw	r30, 0x00	; 0
 494:	09 f0       	breq	.+2      	; 0x498 <__vector_5+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]();
 496:	09 95       	icall
	}	
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	bf 91       	pop	r27
 49e:	af 91       	pop	r26
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	7f 91       	pop	r23
 4a6:	6f 91       	pop	r22
 4a8:	5f 91       	pop	r21
 4aa:	4f 91       	pop	r20
 4ac:	3f 91       	pop	r19
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <__vector_6>:
/* TIMER1 CAPT ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
 4ba:	1f 92       	push	r1
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	0f 92       	push	r0
 4c2:	11 24       	eor	r1, r1
 4c4:	2f 93       	push	r18
 4c6:	3f 93       	push	r19
 4c8:	4f 93       	push	r20
 4ca:	5f 93       	push	r21
 4cc:	6f 93       	push	r22
 4ce:	7f 93       	push	r23
 4d0:	8f 93       	push	r24
 4d2:	9f 93       	push	r25
 4d4:	af 93       	push	r26
 4d6:	bf 93       	push	r27
 4d8:	ef 93       	push	r30
 4da:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
 4dc:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end+0x4>
 4e0:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x5>
 4e4:	30 97       	sbiw	r30, 0x00	; 0
 4e6:	09 f0       	breq	.+2      	; 0x4ea <__vector_6+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]();
 4e8:	09 95       	icall
	}	
}
 4ea:	ff 91       	pop	r31
 4ec:	ef 91       	pop	r30
 4ee:	bf 91       	pop	r27
 4f0:	af 91       	pop	r26
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	7f 91       	pop	r23
 4f8:	6f 91       	pop	r22
 4fa:	5f 91       	pop	r21
 4fc:	4f 91       	pop	r20
 4fe:	3f 91       	pop	r19
 500:	2f 91       	pop	r18
 502:	0f 90       	pop	r0
 504:	0f be       	out	0x3f, r0	; 63
 506:	0f 90       	pop	r0
 508:	1f 90       	pop	r1
 50a:	18 95       	reti

0000050c <__vector_7>:
/* TIMER1 COMPA ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
 50c:	1f 92       	push	r1
 50e:	0f 92       	push	r0
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	0f 92       	push	r0
 514:	11 24       	eor	r1, r1
 516:	2f 93       	push	r18
 518:	3f 93       	push	r19
 51a:	4f 93       	push	r20
 51c:	5f 93       	push	r21
 51e:	6f 93       	push	r22
 520:	7f 93       	push	r23
 522:	8f 93       	push	r24
 524:	9f 93       	push	r25
 526:	af 93       	push	r26
 528:	bf 93       	push	r27
 52a:	ef 93       	push	r30
 52c:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
 52e:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end+0x6>
 532:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x7>
 536:	30 97       	sbiw	r30, 0x00	; 0
 538:	09 f0       	breq	.+2      	; 0x53c <__vector_7+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]();
 53a:	09 95       	icall
	}	
}
 53c:	ff 91       	pop	r31
 53e:	ef 91       	pop	r30
 540:	bf 91       	pop	r27
 542:	af 91       	pop	r26
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	7f 91       	pop	r23
 54a:	6f 91       	pop	r22
 54c:	5f 91       	pop	r21
 54e:	4f 91       	pop	r20
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <__vector_8>:
/* TIMER1 COMPB ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	2f 93       	push	r18
 56a:	3f 93       	push	r19
 56c:	4f 93       	push	r20
 56e:	5f 93       	push	r21
 570:	6f 93       	push	r22
 572:	7f 93       	push	r23
 574:	8f 93       	push	r24
 576:	9f 93       	push	r25
 578:	af 93       	push	r26
 57a:	bf 93       	push	r27
 57c:	ef 93       	push	r30
 57e:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
 580:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end+0x8>
 584:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x9>
 588:	30 97       	sbiw	r30, 0x00	; 0
 58a:	09 f0       	breq	.+2      	; 0x58e <__vector_8+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]();
 58c:	09 95       	icall
	}	
}
 58e:	ff 91       	pop	r31
 590:	ef 91       	pop	r30
 592:	bf 91       	pop	r27
 594:	af 91       	pop	r26
 596:	9f 91       	pop	r25
 598:	8f 91       	pop	r24
 59a:	7f 91       	pop	r23
 59c:	6f 91       	pop	r22
 59e:	5f 91       	pop	r21
 5a0:	4f 91       	pop	r20
 5a2:	3f 91       	pop	r19
 5a4:	2f 91       	pop	r18
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <__vector_9>:
/* TIMER1 OVF ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	4f 93       	push	r20
 5c0:	5f 93       	push	r21
 5c2:	6f 93       	push	r22
 5c4:	7f 93       	push	r23
 5c6:	8f 93       	push	r24
 5c8:	9f 93       	push	r25
 5ca:	af 93       	push	r26
 5cc:	bf 93       	push	r27
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
 5d2:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <__data_end+0xa>
 5d6:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <__data_end+0xb>
 5da:	30 97       	sbiw	r30, 0x00	; 0
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <__vector_9+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]();
 5de:	09 95       	icall
	}	
}
 5e0:	ff 91       	pop	r31
 5e2:	ef 91       	pop	r30
 5e4:	bf 91       	pop	r27
 5e6:	af 91       	pop	r26
 5e8:	9f 91       	pop	r25
 5ea:	8f 91       	pop	r24
 5ec:	7f 91       	pop	r23
 5ee:	6f 91       	pop	r22
 5f0:	5f 91       	pop	r21
 5f2:	4f 91       	pop	r20
 5f4:	3f 91       	pop	r19
 5f6:	2f 91       	pop	r18
 5f8:	0f 90       	pop	r0
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	0f 90       	pop	r0
 5fe:	1f 90       	pop	r1
 600:	18 95       	reti

00000602 <__vector_10>:
/* TIMER0 COMP ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
 602:	1f 92       	push	r1
 604:	0f 92       	push	r0
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	0f 92       	push	r0
 60a:	11 24       	eor	r1, r1
 60c:	2f 93       	push	r18
 60e:	3f 93       	push	r19
 610:	4f 93       	push	r20
 612:	5f 93       	push	r21
 614:	6f 93       	push	r22
 616:	7f 93       	push	r23
 618:	8f 93       	push	r24
 61a:	9f 93       	push	r25
 61c:	af 93       	push	r26
 61e:	bf 93       	push	r27
 620:	ef 93       	push	r30
 622:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
 624:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end+0xc>
 628:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0xd>
 62c:	30 97       	sbiw	r30, 0x00	; 0
 62e:	09 f0       	breq	.+2      	; 0x632 <__vector_10+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]();
 630:	09 95       	icall
	}	
}
 632:	ff 91       	pop	r31
 634:	ef 91       	pop	r30
 636:	bf 91       	pop	r27
 638:	af 91       	pop	r26
 63a:	9f 91       	pop	r25
 63c:	8f 91       	pop	r24
 63e:	7f 91       	pop	r23
 640:	6f 91       	pop	r22
 642:	5f 91       	pop	r21
 644:	4f 91       	pop	r20
 646:	3f 91       	pop	r19
 648:	2f 91       	pop	r18
 64a:	0f 90       	pop	r0
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	0f 90       	pop	r0
 650:	1f 90       	pop	r1
 652:	18 95       	reti

00000654 <__vector_11>:
/* TIMER0 OVF ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
 654:	1f 92       	push	r1
 656:	0f 92       	push	r0
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	0f 92       	push	r0
 65c:	11 24       	eor	r1, r1
 65e:	2f 93       	push	r18
 660:	3f 93       	push	r19
 662:	4f 93       	push	r20
 664:	5f 93       	push	r21
 666:	6f 93       	push	r22
 668:	7f 93       	push	r23
 66a:	8f 93       	push	r24
 66c:	9f 93       	push	r25
 66e:	af 93       	push	r26
 670:	bf 93       	push	r27
 672:	ef 93       	push	r30
 674:	ff 93       	push	r31
	if ( TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
 676:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__bss_end>
 67a:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__bss_end+0x1>
 67e:	30 97       	sbiw	r30, 0x00	; 0
 680:	09 f0       	breq	.+2      	; 0x684 <__vector_11+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]();
 682:	09 95       	icall
	}
 684:	ff 91       	pop	r31
 686:	ef 91       	pop	r30
 688:	bf 91       	pop	r27
 68a:	af 91       	pop	r26
 68c:	9f 91       	pop	r25
 68e:	8f 91       	pop	r24
 690:	7f 91       	pop	r23
 692:	6f 91       	pop	r22
 694:	5f 91       	pop	r21
 696:	4f 91       	pop	r20
 698:	3f 91       	pop	r19
 69a:	2f 91       	pop	r18
 69c:	0f 90       	pop	r0
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	0f 90       	pop	r0
 6a2:	1f 90       	pop	r1
 6a4:	18 95       	reti

000006a6 <_exit>:
 6a6:	f8 94       	cli

000006a8 <__stop_program>:
 6a8:	ff cf       	rjmp	.-2      	; 0x6a8 <__stop_program>
